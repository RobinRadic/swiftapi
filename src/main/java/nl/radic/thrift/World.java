/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package nl.radic.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Represents a game world
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-24")
public class World implements org.apache.thrift.TBase<World, World._Fields>, java.io.Serializable, Cloneable, Comparable<World> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("World");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField HAS_STORM_FIELD_DESC = new org.apache.thrift.protocol.TField("hasStorm", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField IS_THUNDERING_FIELD_DESC = new org.apache.thrift.protocol.TField("isThundering", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField CAN_GENERATE_STRUCTURES_FIELD_DESC = new org.apache.thrift.protocol.TField("canGenerateStructures", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField ALLOW_ANIMALS_FIELD_DESC = new org.apache.thrift.protocol.TField("allowAnimals", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField ALLOW_MONSTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("allowMonsters", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField DIFFICULTY_FIELD_DESC = new org.apache.thrift.protocol.TField("difficulty", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ENVIRONMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("environment", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField FULL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("fullTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField WEATHER_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("weatherDuration", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("seed", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField IS_PVP_FIELD_DESC = new org.apache.thrift.protocol.TField("isPvp", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField CHUNKS_FIELD_DESC = new org.apache.thrift.protocol.TField("chunks", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorldTupleSchemeFactory());
  }

  /**
   * The name of the world
   */
  public String name; // required
  /**
   * The time of day
   */
  public long time; // required
  /**
   * Whether or not there is a storm
   */
  public boolean hasStorm; // required
  /**
   * If there is thunder
   */
  public boolean isThundering; // required
  /**
   * Whether or not structures are being generated
   */
  public boolean canGenerateStructures; // required
  /**
   * Whether or not animals will spawn
   */
  public boolean allowAnimals; // required
  /**
   * Whether or not monsters will spawn
   */
  public boolean allowMonsters; // required
  /**
   * The difficulty of the world
   * 
   * @see Difficulty
   */
  public Difficulty difficulty; // required
  /**
   * The environment of the world
   * 
   * @see Environment
   */
  public Environment environment; // required
  /**
   * Gets the full in-game time on this world
   */
  public long fullTime; // required
  /**
   * The remaining time in ticks of the current conditions.
   */
  public long weatherDuration; // required
  /**
   * She Seed for this world.
   */
  public long seed; // required
  /**
   * The current PVP setting for this world.
   */
  public boolean isPvp; // required
  /**
   * The number of currently loaded chunks
   * @since 1.7
   */
  public int chunks; // required
  /**
   * The number of entities
   * @since 1.7
   */
  public int entities; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The name of the world
     */
    NAME((short)1, "name"),
    /**
     * The time of day
     */
    TIME((short)2, "time"),
    /**
     * Whether or not there is a storm
     */
    HAS_STORM((short)3, "hasStorm"),
    /**
     * If there is thunder
     */
    IS_THUNDERING((short)4, "isThundering"),
    /**
     * Whether or not structures are being generated
     */
    CAN_GENERATE_STRUCTURES((short)5, "canGenerateStructures"),
    /**
     * Whether or not animals will spawn
     */
    ALLOW_ANIMALS((short)6, "allowAnimals"),
    /**
     * Whether or not monsters will spawn
     */
    ALLOW_MONSTERS((short)7, "allowMonsters"),
    /**
     * The difficulty of the world
     * 
     * @see Difficulty
     */
    DIFFICULTY((short)8, "difficulty"),
    /**
     * The environment of the world
     * 
     * @see Environment
     */
    ENVIRONMENT((short)9, "environment"),
    /**
     * Gets the full in-game time on this world
     */
    FULL_TIME((short)10, "fullTime"),
    /**
     * The remaining time in ticks of the current conditions.
     */
    WEATHER_DURATION((short)11, "weatherDuration"),
    /**
     * She Seed for this world.
     */
    SEED((short)12, "seed"),
    /**
     * The current PVP setting for this world.
     */
    IS_PVP((short)13, "isPvp"),
    /**
     * The number of currently loaded chunks
     * @since 1.7
     */
    CHUNKS((short)14, "chunks"),
    /**
     * The number of entities
     * @since 1.7
     */
    ENTITIES((short)15, "entities");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // TIME
          return TIME;
        case 3: // HAS_STORM
          return HAS_STORM;
        case 4: // IS_THUNDERING
          return IS_THUNDERING;
        case 5: // CAN_GENERATE_STRUCTURES
          return CAN_GENERATE_STRUCTURES;
        case 6: // ALLOW_ANIMALS
          return ALLOW_ANIMALS;
        case 7: // ALLOW_MONSTERS
          return ALLOW_MONSTERS;
        case 8: // DIFFICULTY
          return DIFFICULTY;
        case 9: // ENVIRONMENT
          return ENVIRONMENT;
        case 10: // FULL_TIME
          return FULL_TIME;
        case 11: // WEATHER_DURATION
          return WEATHER_DURATION;
        case 12: // SEED
          return SEED;
        case 13: // IS_PVP
          return IS_PVP;
        case 14: // CHUNKS
          return CHUNKS;
        case 15: // ENTITIES
          return ENTITIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_ISSET_ID = 0;
  private static final int __HASSTORM_ISSET_ID = 1;
  private static final int __ISTHUNDERING_ISSET_ID = 2;
  private static final int __CANGENERATESTRUCTURES_ISSET_ID = 3;
  private static final int __ALLOWANIMALS_ISSET_ID = 4;
  private static final int __ALLOWMONSTERS_ISSET_ID = 5;
  private static final int __FULLTIME_ISSET_ID = 6;
  private static final int __WEATHERDURATION_ISSET_ID = 7;
  private static final int __SEED_ISSET_ID = 8;
  private static final int __ISPVP_ISSET_ID = 9;
  private static final int __CHUNKS_ISSET_ID = 10;
  private static final int __ENTITIES_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HAS_STORM, new org.apache.thrift.meta_data.FieldMetaData("hasStorm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_THUNDERING, new org.apache.thrift.meta_data.FieldMetaData("isThundering", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CAN_GENERATE_STRUCTURES, new org.apache.thrift.meta_data.FieldMetaData("canGenerateStructures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ALLOW_ANIMALS, new org.apache.thrift.meta_data.FieldMetaData("allowAnimals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ALLOW_MONSTERS, new org.apache.thrift.meta_data.FieldMetaData("allowMonsters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DIFFICULTY, new org.apache.thrift.meta_data.FieldMetaData("difficulty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Difficulty.class)));
    tmpMap.put(_Fields.ENVIRONMENT, new org.apache.thrift.meta_data.FieldMetaData("environment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Environment.class)));
    tmpMap.put(_Fields.FULL_TIME, new org.apache.thrift.meta_data.FieldMetaData("fullTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WEATHER_DURATION, new org.apache.thrift.meta_data.FieldMetaData("weatherDuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEED, new org.apache.thrift.meta_data.FieldMetaData("seed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_PVP, new org.apache.thrift.meta_data.FieldMetaData("isPvp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHUNKS, new org.apache.thrift.meta_data.FieldMetaData("chunks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(World.class, metaDataMap);
  }

  public World() {
  }

  public World(
    String name,
    long time,
    boolean hasStorm,
    boolean isThundering,
    boolean canGenerateStructures,
    boolean allowAnimals,
    boolean allowMonsters,
    Difficulty difficulty,
    Environment environment,
    long fullTime,
    long weatherDuration,
    long seed,
    boolean isPvp,
    int chunks,
    int entities)
  {
    this();
    this.name = name;
    this.time = time;
    setTimeIsSet(true);
    this.hasStorm = hasStorm;
    setHasStormIsSet(true);
    this.isThundering = isThundering;
    setIsThunderingIsSet(true);
    this.canGenerateStructures = canGenerateStructures;
    setCanGenerateStructuresIsSet(true);
    this.allowAnimals = allowAnimals;
    setAllowAnimalsIsSet(true);
    this.allowMonsters = allowMonsters;
    setAllowMonstersIsSet(true);
    this.difficulty = difficulty;
    this.environment = environment;
    this.fullTime = fullTime;
    setFullTimeIsSet(true);
    this.weatherDuration = weatherDuration;
    setWeatherDurationIsSet(true);
    this.seed = seed;
    setSeedIsSet(true);
    this.isPvp = isPvp;
    setIsPvpIsSet(true);
    this.chunks = chunks;
    setChunksIsSet(true);
    this.entities = entities;
    setEntitiesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public World(World other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.time = other.time;
    this.hasStorm = other.hasStorm;
    this.isThundering = other.isThundering;
    this.canGenerateStructures = other.canGenerateStructures;
    this.allowAnimals = other.allowAnimals;
    this.allowMonsters = other.allowMonsters;
    if (other.isSetDifficulty()) {
      this.difficulty = other.difficulty;
    }
    if (other.isSetEnvironment()) {
      this.environment = other.environment;
    }
    this.fullTime = other.fullTime;
    this.weatherDuration = other.weatherDuration;
    this.seed = other.seed;
    this.isPvp = other.isPvp;
    this.chunks = other.chunks;
    this.entities = other.entities;
  }

  public World deepCopy() {
    return new World(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setTimeIsSet(false);
    this.time = 0;
    setHasStormIsSet(false);
    this.hasStorm = false;
    setIsThunderingIsSet(false);
    this.isThundering = false;
    setCanGenerateStructuresIsSet(false);
    this.canGenerateStructures = false;
    setAllowAnimalsIsSet(false);
    this.allowAnimals = false;
    setAllowMonstersIsSet(false);
    this.allowMonsters = false;
    this.difficulty = null;
    this.environment = null;
    setFullTimeIsSet(false);
    this.fullTime = 0;
    setWeatherDurationIsSet(false);
    this.weatherDuration = 0;
    setSeedIsSet(false);
    this.seed = 0;
    setIsPvpIsSet(false);
    this.isPvp = false;
    setChunksIsSet(false);
    this.chunks = 0;
    setEntitiesIsSet(false);
    this.entities = 0;
  }

  /**
   * The name of the world
   */
  public String getName() {
    return this.name;
  }

  /**
   * The name of the world
   */
  public World setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * The time of day
   */
  public long getTime() {
    return this.time;
  }

  /**
   * The time of day
   */
  public World setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  /**
   * Whether or not there is a storm
   */
  public boolean isHasStorm() {
    return this.hasStorm;
  }

  /**
   * Whether or not there is a storm
   */
  public World setHasStorm(boolean hasStorm) {
    this.hasStorm = hasStorm;
    setHasStormIsSet(true);
    return this;
  }

  public void unsetHasStorm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASSTORM_ISSET_ID);
  }

  /** Returns true if field hasStorm is set (has been assigned a value) and false otherwise */
  public boolean isSetHasStorm() {
    return EncodingUtils.testBit(__isset_bitfield, __HASSTORM_ISSET_ID);
  }

  public void setHasStormIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASSTORM_ISSET_ID, value);
  }

  /**
   * If there is thunder
   */
  public boolean isIsThundering() {
    return this.isThundering;
  }

  /**
   * If there is thunder
   */
  public World setIsThundering(boolean isThundering) {
    this.isThundering = isThundering;
    setIsThunderingIsSet(true);
    return this;
  }

  public void unsetIsThundering() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTHUNDERING_ISSET_ID);
  }

  /** Returns true if field isThundering is set (has been assigned a value) and false otherwise */
  public boolean isSetIsThundering() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTHUNDERING_ISSET_ID);
  }

  public void setIsThunderingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTHUNDERING_ISSET_ID, value);
  }

  /**
   * Whether or not structures are being generated
   */
  public boolean isCanGenerateStructures() {
    return this.canGenerateStructures;
  }

  /**
   * Whether or not structures are being generated
   */
  public World setCanGenerateStructures(boolean canGenerateStructures) {
    this.canGenerateStructures = canGenerateStructures;
    setCanGenerateStructuresIsSet(true);
    return this;
  }

  public void unsetCanGenerateStructures() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANGENERATESTRUCTURES_ISSET_ID);
  }

  /** Returns true if field canGenerateStructures is set (has been assigned a value) and false otherwise */
  public boolean isSetCanGenerateStructures() {
    return EncodingUtils.testBit(__isset_bitfield, __CANGENERATESTRUCTURES_ISSET_ID);
  }

  public void setCanGenerateStructuresIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANGENERATESTRUCTURES_ISSET_ID, value);
  }

  /**
   * Whether or not animals will spawn
   */
  public boolean isAllowAnimals() {
    return this.allowAnimals;
  }

  /**
   * Whether or not animals will spawn
   */
  public World setAllowAnimals(boolean allowAnimals) {
    this.allowAnimals = allowAnimals;
    setAllowAnimalsIsSet(true);
    return this;
  }

  public void unsetAllowAnimals() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOWANIMALS_ISSET_ID);
  }

  /** Returns true if field allowAnimals is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowAnimals() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLOWANIMALS_ISSET_ID);
  }

  public void setAllowAnimalsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLOWANIMALS_ISSET_ID, value);
  }

  /**
   * Whether or not monsters will spawn
   */
  public boolean isAllowMonsters() {
    return this.allowMonsters;
  }

  /**
   * Whether or not monsters will spawn
   */
  public World setAllowMonsters(boolean allowMonsters) {
    this.allowMonsters = allowMonsters;
    setAllowMonstersIsSet(true);
    return this;
  }

  public void unsetAllowMonsters() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOWMONSTERS_ISSET_ID);
  }

  /** Returns true if field allowMonsters is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowMonsters() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLOWMONSTERS_ISSET_ID);
  }

  public void setAllowMonstersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLOWMONSTERS_ISSET_ID, value);
  }

  /**
   * The difficulty of the world
   * 
   * @see Difficulty
   */
  public Difficulty getDifficulty() {
    return this.difficulty;
  }

  /**
   * The difficulty of the world
   * 
   * @see Difficulty
   */
  public World setDifficulty(Difficulty difficulty) {
    this.difficulty = difficulty;
    return this;
  }

  public void unsetDifficulty() {
    this.difficulty = null;
  }

  /** Returns true if field difficulty is set (has been assigned a value) and false otherwise */
  public boolean isSetDifficulty() {
    return this.difficulty != null;
  }

  public void setDifficultyIsSet(boolean value) {
    if (!value) {
      this.difficulty = null;
    }
  }

  /**
   * The environment of the world
   * 
   * @see Environment
   */
  public Environment getEnvironment() {
    return this.environment;
  }

  /**
   * The environment of the world
   * 
   * @see Environment
   */
  public World setEnvironment(Environment environment) {
    this.environment = environment;
    return this;
  }

  public void unsetEnvironment() {
    this.environment = null;
  }

  /** Returns true if field environment is set (has been assigned a value) and false otherwise */
  public boolean isSetEnvironment() {
    return this.environment != null;
  }

  public void setEnvironmentIsSet(boolean value) {
    if (!value) {
      this.environment = null;
    }
  }

  /**
   * Gets the full in-game time on this world
   */
  public long getFullTime() {
    return this.fullTime;
  }

  /**
   * Gets the full in-game time on this world
   */
  public World setFullTime(long fullTime) {
    this.fullTime = fullTime;
    setFullTimeIsSet(true);
    return this;
  }

  public void unsetFullTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FULLTIME_ISSET_ID);
  }

  /** Returns true if field fullTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFullTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FULLTIME_ISSET_ID);
  }

  public void setFullTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FULLTIME_ISSET_ID, value);
  }

  /**
   * The remaining time in ticks of the current conditions.
   */
  public long getWeatherDuration() {
    return this.weatherDuration;
  }

  /**
   * The remaining time in ticks of the current conditions.
   */
  public World setWeatherDuration(long weatherDuration) {
    this.weatherDuration = weatherDuration;
    setWeatherDurationIsSet(true);
    return this;
  }

  public void unsetWeatherDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEATHERDURATION_ISSET_ID);
  }

  /** Returns true if field weatherDuration is set (has been assigned a value) and false otherwise */
  public boolean isSetWeatherDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __WEATHERDURATION_ISSET_ID);
  }

  public void setWeatherDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEATHERDURATION_ISSET_ID, value);
  }

  /**
   * She Seed for this world.
   */
  public long getSeed() {
    return this.seed;
  }

  /**
   * She Seed for this world.
   */
  public World setSeed(long seed) {
    this.seed = seed;
    setSeedIsSet(true);
    return this;
  }

  public void unsetSeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEED_ISSET_ID);
  }

  /** Returns true if field seed is set (has been assigned a value) and false otherwise */
  public boolean isSetSeed() {
    return EncodingUtils.testBit(__isset_bitfield, __SEED_ISSET_ID);
  }

  public void setSeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEED_ISSET_ID, value);
  }

  /**
   * The current PVP setting for this world.
   */
  public boolean isIsPvp() {
    return this.isPvp;
  }

  /**
   * The current PVP setting for this world.
   */
  public World setIsPvp(boolean isPvp) {
    this.isPvp = isPvp;
    setIsPvpIsSet(true);
    return this;
  }

  public void unsetIsPvp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPVP_ISSET_ID);
  }

  /** Returns true if field isPvp is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPvp() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPVP_ISSET_ID);
  }

  public void setIsPvpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPVP_ISSET_ID, value);
  }

  /**
   * The number of currently loaded chunks
   * @since 1.7
   */
  public int getChunks() {
    return this.chunks;
  }

  /**
   * The number of currently loaded chunks
   * @since 1.7
   */
  public World setChunks(int chunks) {
    this.chunks = chunks;
    setChunksIsSet(true);
    return this;
  }

  public void unsetChunks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHUNKS_ISSET_ID);
  }

  /** Returns true if field chunks is set (has been assigned a value) and false otherwise */
  public boolean isSetChunks() {
    return EncodingUtils.testBit(__isset_bitfield, __CHUNKS_ISSET_ID);
  }

  public void setChunksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHUNKS_ISSET_ID, value);
  }

  /**
   * The number of entities
   * @since 1.7
   */
  public int getEntities() {
    return this.entities;
  }

  /**
   * The number of entities
   * @since 1.7
   */
  public World setEntities(int entities) {
    this.entities = entities;
    setEntitiesIsSet(true);
    return this;
  }

  public void unsetEntities() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTITIES_ISSET_ID);
  }

  /** Returns true if field entities is set (has been assigned a value) and false otherwise */
  public boolean isSetEntities() {
    return EncodingUtils.testBit(__isset_bitfield, __ENTITIES_ISSET_ID);
  }

  public void setEntitiesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTITIES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Long)value);
      }
      break;

    case HAS_STORM:
      if (value == null) {
        unsetHasStorm();
      } else {
        setHasStorm((Boolean)value);
      }
      break;

    case IS_THUNDERING:
      if (value == null) {
        unsetIsThundering();
      } else {
        setIsThundering((Boolean)value);
      }
      break;

    case CAN_GENERATE_STRUCTURES:
      if (value == null) {
        unsetCanGenerateStructures();
      } else {
        setCanGenerateStructures((Boolean)value);
      }
      break;

    case ALLOW_ANIMALS:
      if (value == null) {
        unsetAllowAnimals();
      } else {
        setAllowAnimals((Boolean)value);
      }
      break;

    case ALLOW_MONSTERS:
      if (value == null) {
        unsetAllowMonsters();
      } else {
        setAllowMonsters((Boolean)value);
      }
      break;

    case DIFFICULTY:
      if (value == null) {
        unsetDifficulty();
      } else {
        setDifficulty((Difficulty)value);
      }
      break;

    case ENVIRONMENT:
      if (value == null) {
        unsetEnvironment();
      } else {
        setEnvironment((Environment)value);
      }
      break;

    case FULL_TIME:
      if (value == null) {
        unsetFullTime();
      } else {
        setFullTime((Long)value);
      }
      break;

    case WEATHER_DURATION:
      if (value == null) {
        unsetWeatherDuration();
      } else {
        setWeatherDuration((Long)value);
      }
      break;

    case SEED:
      if (value == null) {
        unsetSeed();
      } else {
        setSeed((Long)value);
      }
      break;

    case IS_PVP:
      if (value == null) {
        unsetIsPvp();
      } else {
        setIsPvp((Boolean)value);
      }
      break;

    case CHUNKS:
      if (value == null) {
        unsetChunks();
      } else {
        setChunks((Integer)value);
      }
      break;

    case ENTITIES:
      if (value == null) {
        unsetEntities();
      } else {
        setEntities((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case TIME:
      return Long.valueOf(getTime());

    case HAS_STORM:
      return Boolean.valueOf(isHasStorm());

    case IS_THUNDERING:
      return Boolean.valueOf(isIsThundering());

    case CAN_GENERATE_STRUCTURES:
      return Boolean.valueOf(isCanGenerateStructures());

    case ALLOW_ANIMALS:
      return Boolean.valueOf(isAllowAnimals());

    case ALLOW_MONSTERS:
      return Boolean.valueOf(isAllowMonsters());

    case DIFFICULTY:
      return getDifficulty();

    case ENVIRONMENT:
      return getEnvironment();

    case FULL_TIME:
      return Long.valueOf(getFullTime());

    case WEATHER_DURATION:
      return Long.valueOf(getWeatherDuration());

    case SEED:
      return Long.valueOf(getSeed());

    case IS_PVP:
      return Boolean.valueOf(isIsPvp());

    case CHUNKS:
      return Integer.valueOf(getChunks());

    case ENTITIES:
      return Integer.valueOf(getEntities());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case TIME:
      return isSetTime();
    case HAS_STORM:
      return isSetHasStorm();
    case IS_THUNDERING:
      return isSetIsThundering();
    case CAN_GENERATE_STRUCTURES:
      return isSetCanGenerateStructures();
    case ALLOW_ANIMALS:
      return isSetAllowAnimals();
    case ALLOW_MONSTERS:
      return isSetAllowMonsters();
    case DIFFICULTY:
      return isSetDifficulty();
    case ENVIRONMENT:
      return isSetEnvironment();
    case FULL_TIME:
      return isSetFullTime();
    case WEATHER_DURATION:
      return isSetWeatherDuration();
    case SEED:
      return isSetSeed();
    case IS_PVP:
      return isSetIsPvp();
    case CHUNKS:
      return isSetChunks();
    case ENTITIES:
      return isSetEntities();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof World)
      return this.equals((World)that);
    return false;
  }

  public boolean equals(World that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_hasStorm = true;
    boolean that_present_hasStorm = true;
    if (this_present_hasStorm || that_present_hasStorm) {
      if (!(this_present_hasStorm && that_present_hasStorm))
        return false;
      if (this.hasStorm != that.hasStorm)
        return false;
    }

    boolean this_present_isThundering = true;
    boolean that_present_isThundering = true;
    if (this_present_isThundering || that_present_isThundering) {
      if (!(this_present_isThundering && that_present_isThundering))
        return false;
      if (this.isThundering != that.isThundering)
        return false;
    }

    boolean this_present_canGenerateStructures = true;
    boolean that_present_canGenerateStructures = true;
    if (this_present_canGenerateStructures || that_present_canGenerateStructures) {
      if (!(this_present_canGenerateStructures && that_present_canGenerateStructures))
        return false;
      if (this.canGenerateStructures != that.canGenerateStructures)
        return false;
    }

    boolean this_present_allowAnimals = true;
    boolean that_present_allowAnimals = true;
    if (this_present_allowAnimals || that_present_allowAnimals) {
      if (!(this_present_allowAnimals && that_present_allowAnimals))
        return false;
      if (this.allowAnimals != that.allowAnimals)
        return false;
    }

    boolean this_present_allowMonsters = true;
    boolean that_present_allowMonsters = true;
    if (this_present_allowMonsters || that_present_allowMonsters) {
      if (!(this_present_allowMonsters && that_present_allowMonsters))
        return false;
      if (this.allowMonsters != that.allowMonsters)
        return false;
    }

    boolean this_present_difficulty = true && this.isSetDifficulty();
    boolean that_present_difficulty = true && that.isSetDifficulty();
    if (this_present_difficulty || that_present_difficulty) {
      if (!(this_present_difficulty && that_present_difficulty))
        return false;
      if (!this.difficulty.equals(that.difficulty))
        return false;
    }

    boolean this_present_environment = true && this.isSetEnvironment();
    boolean that_present_environment = true && that.isSetEnvironment();
    if (this_present_environment || that_present_environment) {
      if (!(this_present_environment && that_present_environment))
        return false;
      if (!this.environment.equals(that.environment))
        return false;
    }

    boolean this_present_fullTime = true;
    boolean that_present_fullTime = true;
    if (this_present_fullTime || that_present_fullTime) {
      if (!(this_present_fullTime && that_present_fullTime))
        return false;
      if (this.fullTime != that.fullTime)
        return false;
    }

    boolean this_present_weatherDuration = true;
    boolean that_present_weatherDuration = true;
    if (this_present_weatherDuration || that_present_weatherDuration) {
      if (!(this_present_weatherDuration && that_present_weatherDuration))
        return false;
      if (this.weatherDuration != that.weatherDuration)
        return false;
    }

    boolean this_present_seed = true;
    boolean that_present_seed = true;
    if (this_present_seed || that_present_seed) {
      if (!(this_present_seed && that_present_seed))
        return false;
      if (this.seed != that.seed)
        return false;
    }

    boolean this_present_isPvp = true;
    boolean that_present_isPvp = true;
    if (this_present_isPvp || that_present_isPvp) {
      if (!(this_present_isPvp && that_present_isPvp))
        return false;
      if (this.isPvp != that.isPvp)
        return false;
    }

    boolean this_present_chunks = true;
    boolean that_present_chunks = true;
    if (this_present_chunks || that_present_chunks) {
      if (!(this_present_chunks && that_present_chunks))
        return false;
      if (this.chunks != that.chunks)
        return false;
    }

    boolean this_present_entities = true;
    boolean that_present_entities = true;
    if (this_present_entities || that_present_entities) {
      if (!(this_present_entities && that_present_entities))
        return false;
      if (this.entities != that.entities)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_time = true;
    list.add(present_time);
    if (present_time)
      list.add(time);

    boolean present_hasStorm = true;
    list.add(present_hasStorm);
    if (present_hasStorm)
      list.add(hasStorm);

    boolean present_isThundering = true;
    list.add(present_isThundering);
    if (present_isThundering)
      list.add(isThundering);

    boolean present_canGenerateStructures = true;
    list.add(present_canGenerateStructures);
    if (present_canGenerateStructures)
      list.add(canGenerateStructures);

    boolean present_allowAnimals = true;
    list.add(present_allowAnimals);
    if (present_allowAnimals)
      list.add(allowAnimals);

    boolean present_allowMonsters = true;
    list.add(present_allowMonsters);
    if (present_allowMonsters)
      list.add(allowMonsters);

    boolean present_difficulty = true && (isSetDifficulty());
    list.add(present_difficulty);
    if (present_difficulty)
      list.add(difficulty.getValue());

    boolean present_environment = true && (isSetEnvironment());
    list.add(present_environment);
    if (present_environment)
      list.add(environment.getValue());

    boolean present_fullTime = true;
    list.add(present_fullTime);
    if (present_fullTime)
      list.add(fullTime);

    boolean present_weatherDuration = true;
    list.add(present_weatherDuration);
    if (present_weatherDuration)
      list.add(weatherDuration);

    boolean present_seed = true;
    list.add(present_seed);
    if (present_seed)
      list.add(seed);

    boolean present_isPvp = true;
    list.add(present_isPvp);
    if (present_isPvp)
      list.add(isPvp);

    boolean present_chunks = true;
    list.add(present_chunks);
    if (present_chunks)
      list.add(chunks);

    boolean present_entities = true;
    list.add(present_entities);
    if (present_entities)
      list.add(entities);

    return list.hashCode();
  }

  @Override
  public int compareTo(World other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasStorm()).compareTo(other.isSetHasStorm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasStorm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasStorm, other.hasStorm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsThundering()).compareTo(other.isSetIsThundering());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsThundering()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isThundering, other.isThundering);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCanGenerateStructures()).compareTo(other.isSetCanGenerateStructures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanGenerateStructures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canGenerateStructures, other.canGenerateStructures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowAnimals()).compareTo(other.isSetAllowAnimals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowAnimals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowAnimals, other.allowAnimals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowMonsters()).compareTo(other.isSetAllowMonsters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowMonsters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowMonsters, other.allowMonsters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDifficulty()).compareTo(other.isSetDifficulty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDifficulty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.difficulty, other.difficulty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnvironment()).compareTo(other.isSetEnvironment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnvironment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.environment, other.environment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFullTime()).compareTo(other.isSetFullTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullTime, other.fullTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeatherDuration()).compareTo(other.isSetWeatherDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeatherDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weatherDuration, other.weatherDuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeed()).compareTo(other.isSetSeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seed, other.seed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPvp()).compareTo(other.isSetIsPvp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPvp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPvp, other.isPvp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChunks()).compareTo(other.isSetChunks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChunks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunks, other.chunks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("World(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasStorm:");
    sb.append(this.hasStorm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isThundering:");
    sb.append(this.isThundering);
    first = false;
    if (!first) sb.append(", ");
    sb.append("canGenerateStructures:");
    sb.append(this.canGenerateStructures);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowAnimals:");
    sb.append(this.allowAnimals);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowMonsters:");
    sb.append(this.allowMonsters);
    first = false;
    if (!first) sb.append(", ");
    sb.append("difficulty:");
    if (this.difficulty == null) {
      sb.append("null");
    } else {
      sb.append(this.difficulty);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("environment:");
    if (this.environment == null) {
      sb.append("null");
    } else {
      sb.append(this.environment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fullTime:");
    sb.append(this.fullTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("weatherDuration:");
    sb.append(this.weatherDuration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seed:");
    sb.append(this.seed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPvp:");
    sb.append(this.isPvp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chunks:");
    sb.append(this.chunks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entities:");
    sb.append(this.entities);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorldStandardSchemeFactory implements SchemeFactory {
    public WorldStandardScheme getScheme() {
      return new WorldStandardScheme();
    }
  }

  private static class WorldStandardScheme extends StandardScheme<World> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, World struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HAS_STORM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasStorm = iprot.readBool();
              struct.setHasStormIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_THUNDERING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isThundering = iprot.readBool();
              struct.setIsThunderingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CAN_GENERATE_STRUCTURES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canGenerateStructures = iprot.readBool();
              struct.setCanGenerateStructuresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALLOW_ANIMALS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allowAnimals = iprot.readBool();
              struct.setAllowAnimalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ALLOW_MONSTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allowMonsters = iprot.readBool();
              struct.setAllowMonstersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DIFFICULTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.difficulty = nl.radic.thrift.Difficulty.findByValue(iprot.readI32());
              struct.setDifficultyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ENVIRONMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.environment = nl.radic.thrift.Environment.findByValue(iprot.readI32());
              struct.setEnvironmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FULL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fullTime = iprot.readI64();
              struct.setFullTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // WEATHER_DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.weatherDuration = iprot.readI64();
              struct.setWeatherDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SEED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.seed = iprot.readI64();
              struct.setSeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_PVP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPvp = iprot.readBool();
              struct.setIsPvpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CHUNKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chunks = iprot.readI32();
              struct.setChunksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.entities = iprot.readI32();
              struct.setEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, World struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI64(struct.time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_STORM_FIELD_DESC);
      oprot.writeBool(struct.hasStorm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_THUNDERING_FIELD_DESC);
      oprot.writeBool(struct.isThundering);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAN_GENERATE_STRUCTURES_FIELD_DESC);
      oprot.writeBool(struct.canGenerateStructures);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALLOW_ANIMALS_FIELD_DESC);
      oprot.writeBool(struct.allowAnimals);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALLOW_MONSTERS_FIELD_DESC);
      oprot.writeBool(struct.allowMonsters);
      oprot.writeFieldEnd();
      if (struct.difficulty != null) {
        oprot.writeFieldBegin(DIFFICULTY_FIELD_DESC);
        oprot.writeI32(struct.difficulty.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.environment != null) {
        oprot.writeFieldBegin(ENVIRONMENT_FIELD_DESC);
        oprot.writeI32(struct.environment.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FULL_TIME_FIELD_DESC);
      oprot.writeI64(struct.fullTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WEATHER_DURATION_FIELD_DESC);
      oprot.writeI64(struct.weatherDuration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEED_FIELD_DESC);
      oprot.writeI64(struct.seed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PVP_FIELD_DESC);
      oprot.writeBool(struct.isPvp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHUNKS_FIELD_DESC);
      oprot.writeI32(struct.chunks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
      oprot.writeI32(struct.entities);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorldTupleSchemeFactory implements SchemeFactory {
    public WorldTupleScheme getScheme() {
      return new WorldTupleScheme();
    }
  }

  private static class WorldTupleScheme extends TupleScheme<World> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, World struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetTime()) {
        optionals.set(1);
      }
      if (struct.isSetHasStorm()) {
        optionals.set(2);
      }
      if (struct.isSetIsThundering()) {
        optionals.set(3);
      }
      if (struct.isSetCanGenerateStructures()) {
        optionals.set(4);
      }
      if (struct.isSetAllowAnimals()) {
        optionals.set(5);
      }
      if (struct.isSetAllowMonsters()) {
        optionals.set(6);
      }
      if (struct.isSetDifficulty()) {
        optionals.set(7);
      }
      if (struct.isSetEnvironment()) {
        optionals.set(8);
      }
      if (struct.isSetFullTime()) {
        optionals.set(9);
      }
      if (struct.isSetWeatherDuration()) {
        optionals.set(10);
      }
      if (struct.isSetSeed()) {
        optionals.set(11);
      }
      if (struct.isSetIsPvp()) {
        optionals.set(12);
      }
      if (struct.isSetChunks()) {
        optionals.set(13);
      }
      if (struct.isSetEntities()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetTime()) {
        oprot.writeI64(struct.time);
      }
      if (struct.isSetHasStorm()) {
        oprot.writeBool(struct.hasStorm);
      }
      if (struct.isSetIsThundering()) {
        oprot.writeBool(struct.isThundering);
      }
      if (struct.isSetCanGenerateStructures()) {
        oprot.writeBool(struct.canGenerateStructures);
      }
      if (struct.isSetAllowAnimals()) {
        oprot.writeBool(struct.allowAnimals);
      }
      if (struct.isSetAllowMonsters()) {
        oprot.writeBool(struct.allowMonsters);
      }
      if (struct.isSetDifficulty()) {
        oprot.writeI32(struct.difficulty.getValue());
      }
      if (struct.isSetEnvironment()) {
        oprot.writeI32(struct.environment.getValue());
      }
      if (struct.isSetFullTime()) {
        oprot.writeI64(struct.fullTime);
      }
      if (struct.isSetWeatherDuration()) {
        oprot.writeI64(struct.weatherDuration);
      }
      if (struct.isSetSeed()) {
        oprot.writeI64(struct.seed);
      }
      if (struct.isSetIsPvp()) {
        oprot.writeBool(struct.isPvp);
      }
      if (struct.isSetChunks()) {
        oprot.writeI32(struct.chunks);
      }
      if (struct.isSetEntities()) {
        oprot.writeI32(struct.entities);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, World struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.time = iprot.readI64();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hasStorm = iprot.readBool();
        struct.setHasStormIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isThundering = iprot.readBool();
        struct.setIsThunderingIsSet(true);
      }
      if (incoming.get(4)) {
        struct.canGenerateStructures = iprot.readBool();
        struct.setCanGenerateStructuresIsSet(true);
      }
      if (incoming.get(5)) {
        struct.allowAnimals = iprot.readBool();
        struct.setAllowAnimalsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.allowMonsters = iprot.readBool();
        struct.setAllowMonstersIsSet(true);
      }
      if (incoming.get(7)) {
        struct.difficulty = nl.radic.thrift.Difficulty.findByValue(iprot.readI32());
        struct.setDifficultyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.environment = nl.radic.thrift.Environment.findByValue(iprot.readI32());
        struct.setEnvironmentIsSet(true);
      }
      if (incoming.get(9)) {
        struct.fullTime = iprot.readI64();
        struct.setFullTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.weatherDuration = iprot.readI64();
        struct.setWeatherDurationIsSet(true);
      }
      if (incoming.get(11)) {
        struct.seed = iprot.readI64();
        struct.setSeedIsSet(true);
      }
      if (incoming.get(12)) {
        struct.isPvp = iprot.readBool();
        struct.setIsPvpIsSet(true);
      }
      if (incoming.get(13)) {
        struct.chunks = iprot.readI32();
        struct.setChunksIsSet(true);
      }
      if (incoming.get(14)) {
        struct.entities = iprot.readI32();
        struct.setEntitiesIsSet(true);
      }
    }
  }

}

