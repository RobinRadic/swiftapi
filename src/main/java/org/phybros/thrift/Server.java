/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.phybros.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

/**
 * Represents the game server.
 */
public class Server implements org.apache.thrift.TBase<Server, Server._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Server");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OFFLINE_PLAYERS_FIELD_DESC = new org.apache.thrift.protocol.TField("offlinePlayers", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ONLINE_PLAYERS_FIELD_DESC = new org.apache.thrift.protocol.TField("onlinePlayers", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BUKKIT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("bukkitVersion", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_PLAYERS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxPlayers", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ALLOW_FLIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("allowFlight", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField ALLOW_NETHER_FIELD_DESC = new org.apache.thrift.protocol.TField("allowNether", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField ALLOW_END_FIELD_DESC = new org.apache.thrift.protocol.TField("allowEnd", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField WHITELIST_FIELD_DESC = new org.apache.thrift.protocol.TField("whitelist", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField BANNED_PLAYERS_FIELD_DESC = new org.apache.thrift.protocol.TField("bannedPlayers", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField BANNED_IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("bannedIps", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField WORLDS_FIELD_DESC = new org.apache.thrift.protocol.TField("worlds", org.apache.thrift.protocol.TType.LIST, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServerTupleSchemeFactory());
  }

  /**
   * The name of the server
   */
  public String name; // required
  /**
   * A list of all players who have ever played on this server.
   */
  public List<OfflinePlayer> offlinePlayers; // required
  /**
   * A list of players who are currently online
   */
  public List<Player> onlinePlayers; // required
  /**
   * The version of the server
   */
  public String version; // required
  /**
   * The version of CraftBukkit that is running
   */
  public String bukkitVersion; // required
  /**
   * The max players allowed on the server
   */
  public int maxPlayers; // required
  /**
   * The IP of the server (if set)
   */
  public String ip; // required
  /**
   * The port the server is listening on
   */
  public int port; // required
  /**
   * Whether flight is allowed
   */
  public boolean allowFlight; // required
  /**
   * Whether the nether is allowed
   */
  public boolean allowNether; // required
  /**
   * Whether the End is allowed
   */
  public boolean allowEnd; // required
  /**
   * A list of players on the server's whitelist
   */
  public List<OfflinePlayer> whitelist; // required
  /**
   * A list of currently banned players
   */
  public List<OfflinePlayer> bannedPlayers; // required
  /**
   * A list of currently banned IP addresses
   */
  public List<String> bannedIps; // required
  /**
   * A list of worlds currently running on the server
   */
  public List<World> worlds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The name of the server
     */
    NAME((short)1, "name"),
    /**
     * A list of all players who have ever played on this server.
     */
    OFFLINE_PLAYERS((short)2, "offlinePlayers"),
    /**
     * A list of players who are currently online
     */
    ONLINE_PLAYERS((short)3, "onlinePlayers"),
    /**
     * The version of the server
     */
    VERSION((short)4, "version"),
    /**
     * The version of CraftBukkit that is running
     */
    BUKKIT_VERSION((short)5, "bukkitVersion"),
    /**
     * The max players allowed on the server
     */
    MAX_PLAYERS((short)6, "maxPlayers"),
    /**
     * The IP of the server (if set)
     */
    IP((short)7, "ip"),
    /**
     * The port the server is listening on
     */
    PORT((short)8, "port"),
    /**
     * Whether flight is allowed
     */
    ALLOW_FLIGHT((short)9, "allowFlight"),
    /**
     * Whether the nether is allowed
     */
    ALLOW_NETHER((short)10, "allowNether"),
    /**
     * Whether the End is allowed
     */
    ALLOW_END((short)11, "allowEnd"),
    /**
     * A list of players on the server's whitelist
     */
    WHITELIST((short)12, "whitelist"),
    /**
     * A list of currently banned players
     */
    BANNED_PLAYERS((short)13, "bannedPlayers"),
    /**
     * A list of currently banned IP addresses
     */
    BANNED_IPS((short)14, "bannedIps"),
    /**
     * A list of worlds currently running on the server
     */
    WORLDS((short)15, "worlds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // OFFLINE_PLAYERS
          return OFFLINE_PLAYERS;
        case 3: // ONLINE_PLAYERS
          return ONLINE_PLAYERS;
        case 4: // VERSION
          return VERSION;
        case 5: // BUKKIT_VERSION
          return BUKKIT_VERSION;
        case 6: // MAX_PLAYERS
          return MAX_PLAYERS;
        case 7: // IP
          return IP;
        case 8: // PORT
          return PORT;
        case 9: // ALLOW_FLIGHT
          return ALLOW_FLIGHT;
        case 10: // ALLOW_NETHER
          return ALLOW_NETHER;
        case 11: // ALLOW_END
          return ALLOW_END;
        case 12: // WHITELIST
          return WHITELIST;
        case 13: // BANNED_PLAYERS
          return BANNED_PLAYERS;
        case 14: // BANNED_IPS
          return BANNED_IPS;
        case 15: // WORLDS
          return WORLDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXPLAYERS_ISSET_ID = 0;
  private static final int __PORT_ISSET_ID = 1;
  private static final int __ALLOWFLIGHT_ISSET_ID = 2;
  private static final int __ALLOWNETHER_ISSET_ID = 3;
  private static final int __ALLOWEND_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFLINE_PLAYERS, new org.apache.thrift.meta_data.FieldMetaData("offlinePlayers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OfflinePlayer.class))));
    tmpMap.put(_Fields.ONLINE_PLAYERS, new org.apache.thrift.meta_data.FieldMetaData("onlinePlayers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Player.class))));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUKKIT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("bukkitVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_PLAYERS, new org.apache.thrift.meta_data.FieldMetaData("maxPlayers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALLOW_FLIGHT, new org.apache.thrift.meta_data.FieldMetaData("allowFlight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ALLOW_NETHER, new org.apache.thrift.meta_data.FieldMetaData("allowNether", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ALLOW_END, new org.apache.thrift.meta_data.FieldMetaData("allowEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WHITELIST, new org.apache.thrift.meta_data.FieldMetaData("whitelist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OfflinePlayer.class))));
    tmpMap.put(_Fields.BANNED_PLAYERS, new org.apache.thrift.meta_data.FieldMetaData("bannedPlayers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OfflinePlayer.class))));
    tmpMap.put(_Fields.BANNED_IPS, new org.apache.thrift.meta_data.FieldMetaData("bannedIps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.WORLDS, new org.apache.thrift.meta_data.FieldMetaData("worlds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, World.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Server.class, metaDataMap);
  }

  public Server() {
  }

  public Server(
    String name,
    List<OfflinePlayer> offlinePlayers,
    List<Player> onlinePlayers,
    String version,
    String bukkitVersion,
    int maxPlayers,
    String ip,
    int port,
    boolean allowFlight,
    boolean allowNether,
    boolean allowEnd,
    List<OfflinePlayer> whitelist,
    List<OfflinePlayer> bannedPlayers,
    List<String> bannedIps,
    List<World> worlds)
  {
    this();
    this.name = name;
    this.offlinePlayers = offlinePlayers;
    this.onlinePlayers = onlinePlayers;
    this.version = version;
    this.bukkitVersion = bukkitVersion;
    this.maxPlayers = maxPlayers;
    setMaxPlayersIsSet(true);
    this.ip = ip;
    this.port = port;
    setPortIsSet(true);
    this.allowFlight = allowFlight;
    setAllowFlightIsSet(true);
    this.allowNether = allowNether;
    setAllowNetherIsSet(true);
    this.allowEnd = allowEnd;
    setAllowEndIsSet(true);
    this.whitelist = whitelist;
    this.bannedPlayers = bannedPlayers;
    this.bannedIps = bannedIps;
    this.worlds = worlds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Server(Server other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetOfflinePlayers()) {
      List<OfflinePlayer> __this__offlinePlayers = new ArrayList<OfflinePlayer>();
      for (OfflinePlayer other_element : other.offlinePlayers) {
        __this__offlinePlayers.add(new OfflinePlayer(other_element));
      }
      this.offlinePlayers = __this__offlinePlayers;
    }
    if (other.isSetOnlinePlayers()) {
      List<Player> __this__onlinePlayers = new ArrayList<Player>();
      for (Player other_element : other.onlinePlayers) {
        __this__onlinePlayers.add(new Player(other_element));
      }
      this.onlinePlayers = __this__onlinePlayers;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetBukkitVersion()) {
      this.bukkitVersion = other.bukkitVersion;
    }
    this.maxPlayers = other.maxPlayers;
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    this.port = other.port;
    this.allowFlight = other.allowFlight;
    this.allowNether = other.allowNether;
    this.allowEnd = other.allowEnd;
    if (other.isSetWhitelist()) {
      List<OfflinePlayer> __this__whitelist = new ArrayList<OfflinePlayer>();
      for (OfflinePlayer other_element : other.whitelist) {
        __this__whitelist.add(new OfflinePlayer(other_element));
      }
      this.whitelist = __this__whitelist;
    }
    if (other.isSetBannedPlayers()) {
      List<OfflinePlayer> __this__bannedPlayers = new ArrayList<OfflinePlayer>();
      for (OfflinePlayer other_element : other.bannedPlayers) {
        __this__bannedPlayers.add(new OfflinePlayer(other_element));
      }
      this.bannedPlayers = __this__bannedPlayers;
    }
    if (other.isSetBannedIps()) {
      List<String> __this__bannedIps = new ArrayList<String>();
      for (String other_element : other.bannedIps) {
        __this__bannedIps.add(other_element);
      }
      this.bannedIps = __this__bannedIps;
    }
    if (other.isSetWorlds()) {
      List<World> __this__worlds = new ArrayList<World>();
      for (World other_element : other.worlds) {
        __this__worlds.add(new World(other_element));
      }
      this.worlds = __this__worlds;
    }
  }

  public Server deepCopy() {
    return new Server(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.offlinePlayers = null;
    this.onlinePlayers = null;
    this.version = null;
    this.bukkitVersion = null;
    setMaxPlayersIsSet(false);
    this.maxPlayers = 0;
    this.ip = null;
    setPortIsSet(false);
    this.port = 0;
    setAllowFlightIsSet(false);
    this.allowFlight = false;
    setAllowNetherIsSet(false);
    this.allowNether = false;
    setAllowEndIsSet(false);
    this.allowEnd = false;
    this.whitelist = null;
    this.bannedPlayers = null;
    this.bannedIps = null;
    this.worlds = null;
  }

  /**
   * The name of the server
   */
  public String getName() {
    return this.name;
  }

  /**
   * The name of the server
   */
  public Server setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getOfflinePlayersSize() {
    return (this.offlinePlayers == null) ? 0 : this.offlinePlayers.size();
  }

  public java.util.Iterator<OfflinePlayer> getOfflinePlayersIterator() {
    return (this.offlinePlayers == null) ? null : this.offlinePlayers.iterator();
  }

  public void addToOfflinePlayers(OfflinePlayer elem) {
    if (this.offlinePlayers == null) {
      this.offlinePlayers = new ArrayList<OfflinePlayer>();
    }
    this.offlinePlayers.add(elem);
  }

  /**
   * A list of all players who have ever played on this server.
   */
  public List<OfflinePlayer> getOfflinePlayers() {
    return this.offlinePlayers;
  }

  /**
   * A list of all players who have ever played on this server.
   */
  public Server setOfflinePlayers(List<OfflinePlayer> offlinePlayers) {
    this.offlinePlayers = offlinePlayers;
    return this;
  }

  public void unsetOfflinePlayers() {
    this.offlinePlayers = null;
  }

  /** Returns true if field offlinePlayers is set (has been assigned a value) and false otherwise */
  public boolean isSetOfflinePlayers() {
    return this.offlinePlayers != null;
  }

  public void setOfflinePlayersIsSet(boolean value) {
    if (!value) {
      this.offlinePlayers = null;
    }
  }

  public int getOnlinePlayersSize() {
    return (this.onlinePlayers == null) ? 0 : this.onlinePlayers.size();
  }

  public java.util.Iterator<Player> getOnlinePlayersIterator() {
    return (this.onlinePlayers == null) ? null : this.onlinePlayers.iterator();
  }

  public void addToOnlinePlayers(Player elem) {
    if (this.onlinePlayers == null) {
      this.onlinePlayers = new ArrayList<Player>();
    }
    this.onlinePlayers.add(elem);
  }

  /**
   * A list of players who are currently online
   */
  public List<Player> getOnlinePlayers() {
    return this.onlinePlayers;
  }

  /**
   * A list of players who are currently online
   */
  public Server setOnlinePlayers(List<Player> onlinePlayers) {
    this.onlinePlayers = onlinePlayers;
    return this;
  }

  public void unsetOnlinePlayers() {
    this.onlinePlayers = null;
  }

  /** Returns true if field onlinePlayers is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlinePlayers() {
    return this.onlinePlayers != null;
  }

  public void setOnlinePlayersIsSet(boolean value) {
    if (!value) {
      this.onlinePlayers = null;
    }
  }

  /**
   * The version of the server
   */
  public String getVersion() {
    return this.version;
  }

  /**
   * The version of the server
   */
  public Server setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  /**
   * The version of CraftBukkit that is running
   */
  public String getBukkitVersion() {
    return this.bukkitVersion;
  }

  /**
   * The version of CraftBukkit that is running
   */
  public Server setBukkitVersion(String bukkitVersion) {
    this.bukkitVersion = bukkitVersion;
    return this;
  }

  public void unsetBukkitVersion() {
    this.bukkitVersion = null;
  }

  /** Returns true if field bukkitVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetBukkitVersion() {
    return this.bukkitVersion != null;
  }

  public void setBukkitVersionIsSet(boolean value) {
    if (!value) {
      this.bukkitVersion = null;
    }
  }

  /**
   * The max players allowed on the server
   */
  public int getMaxPlayers() {
    return this.maxPlayers;
  }

  /**
   * The max players allowed on the server
   */
  public Server setMaxPlayers(int maxPlayers) {
    this.maxPlayers = maxPlayers;
    setMaxPlayersIsSet(true);
    return this;
  }

  public void unsetMaxPlayers() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXPLAYERS_ISSET_ID);
  }

  /** Returns true if field maxPlayers is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxPlayers() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXPLAYERS_ISSET_ID);
  }

  public void setMaxPlayersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXPLAYERS_ISSET_ID, value);
  }

  /**
   * The IP of the server (if set)
   */
  public String getIp() {
    return this.ip;
  }

  /**
   * The IP of the server (if set)
   */
  public Server setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  /**
   * The port the server is listening on
   */
  public int getPort() {
    return this.port;
  }

  /**
   * The port the server is listening on
   */
  public Server setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  /**
   * Whether flight is allowed
   */
  public boolean isAllowFlight() {
    return this.allowFlight;
  }

  /**
   * Whether flight is allowed
   */
  public Server setAllowFlight(boolean allowFlight) {
    this.allowFlight = allowFlight;
    setAllowFlightIsSet(true);
    return this;
  }

  public void unsetAllowFlight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOWFLIGHT_ISSET_ID);
  }

  /** Returns true if field allowFlight is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowFlight() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLOWFLIGHT_ISSET_ID);
  }

  public void setAllowFlightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLOWFLIGHT_ISSET_ID, value);
  }

  /**
   * Whether the nether is allowed
   */
  public boolean isAllowNether() {
    return this.allowNether;
  }

  /**
   * Whether the nether is allowed
   */
  public Server setAllowNether(boolean allowNether) {
    this.allowNether = allowNether;
    setAllowNetherIsSet(true);
    return this;
  }

  public void unsetAllowNether() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOWNETHER_ISSET_ID);
  }

  /** Returns true if field allowNether is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowNether() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLOWNETHER_ISSET_ID);
  }

  public void setAllowNetherIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLOWNETHER_ISSET_ID, value);
  }

  /**
   * Whether the End is allowed
   */
  public boolean isAllowEnd() {
    return this.allowEnd;
  }

  /**
   * Whether the End is allowed
   */
  public Server setAllowEnd(boolean allowEnd) {
    this.allowEnd = allowEnd;
    setAllowEndIsSet(true);
    return this;
  }

  public void unsetAllowEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOWEND_ISSET_ID);
  }

  /** Returns true if field allowEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLOWEND_ISSET_ID);
  }

  public void setAllowEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLOWEND_ISSET_ID, value);
  }

  public int getWhitelistSize() {
    return (this.whitelist == null) ? 0 : this.whitelist.size();
  }

  public java.util.Iterator<OfflinePlayer> getWhitelistIterator() {
    return (this.whitelist == null) ? null : this.whitelist.iterator();
  }

  public void addToWhitelist(OfflinePlayer elem) {
    if (this.whitelist == null) {
      this.whitelist = new ArrayList<OfflinePlayer>();
    }
    this.whitelist.add(elem);
  }

  /**
   * A list of players on the server's whitelist
   */
  public List<OfflinePlayer> getWhitelist() {
    return this.whitelist;
  }

  /**
   * A list of players on the server's whitelist
   */
  public Server setWhitelist(List<OfflinePlayer> whitelist) {
    this.whitelist = whitelist;
    return this;
  }

  public void unsetWhitelist() {
    this.whitelist = null;
  }

  /** Returns true if field whitelist is set (has been assigned a value) and false otherwise */
  public boolean isSetWhitelist() {
    return this.whitelist != null;
  }

  public void setWhitelistIsSet(boolean value) {
    if (!value) {
      this.whitelist = null;
    }
  }

  public int getBannedPlayersSize() {
    return (this.bannedPlayers == null) ? 0 : this.bannedPlayers.size();
  }

  public java.util.Iterator<OfflinePlayer> getBannedPlayersIterator() {
    return (this.bannedPlayers == null) ? null : this.bannedPlayers.iterator();
  }

  public void addToBannedPlayers(OfflinePlayer elem) {
    if (this.bannedPlayers == null) {
      this.bannedPlayers = new ArrayList<OfflinePlayer>();
    }
    this.bannedPlayers.add(elem);
  }

  /**
   * A list of currently banned players
   */
  public List<OfflinePlayer> getBannedPlayers() {
    return this.bannedPlayers;
  }

  /**
   * A list of currently banned players
   */
  public Server setBannedPlayers(List<OfflinePlayer> bannedPlayers) {
    this.bannedPlayers = bannedPlayers;
    return this;
  }

  public void unsetBannedPlayers() {
    this.bannedPlayers = null;
  }

  /** Returns true if field bannedPlayers is set (has been assigned a value) and false otherwise */
  public boolean isSetBannedPlayers() {
    return this.bannedPlayers != null;
  }

  public void setBannedPlayersIsSet(boolean value) {
    if (!value) {
      this.bannedPlayers = null;
    }
  }

  public int getBannedIpsSize() {
    return (this.bannedIps == null) ? 0 : this.bannedIps.size();
  }

  public java.util.Iterator<String> getBannedIpsIterator() {
    return (this.bannedIps == null) ? null : this.bannedIps.iterator();
  }

  public void addToBannedIps(String elem) {
    if (this.bannedIps == null) {
      this.bannedIps = new ArrayList<String>();
    }
    this.bannedIps.add(elem);
  }

  /**
   * A list of currently banned IP addresses
   */
  public List<String> getBannedIps() {
    return this.bannedIps;
  }

  /**
   * A list of currently banned IP addresses
   */
  public Server setBannedIps(List<String> bannedIps) {
    this.bannedIps = bannedIps;
    return this;
  }

  public void unsetBannedIps() {
    this.bannedIps = null;
  }

  /** Returns true if field bannedIps is set (has been assigned a value) and false otherwise */
  public boolean isSetBannedIps() {
    return this.bannedIps != null;
  }

  public void setBannedIpsIsSet(boolean value) {
    if (!value) {
      this.bannedIps = null;
    }
  }

  public int getWorldsSize() {
    return (this.worlds == null) ? 0 : this.worlds.size();
  }

  public java.util.Iterator<World> getWorldsIterator() {
    return (this.worlds == null) ? null : this.worlds.iterator();
  }

  public void addToWorlds(World elem) {
    if (this.worlds == null) {
      this.worlds = new ArrayList<World>();
    }
    this.worlds.add(elem);
  }

  /**
   * A list of worlds currently running on the server
   */
  public List<World> getWorlds() {
    return this.worlds;
  }

  /**
   * A list of worlds currently running on the server
   */
  public Server setWorlds(List<World> worlds) {
    this.worlds = worlds;
    return this;
  }

  public void unsetWorlds() {
    this.worlds = null;
  }

  /** Returns true if field worlds is set (has been assigned a value) and false otherwise */
  public boolean isSetWorlds() {
    return this.worlds != null;
  }

  public void setWorldsIsSet(boolean value) {
    if (!value) {
      this.worlds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case OFFLINE_PLAYERS:
      if (value == null) {
        unsetOfflinePlayers();
      } else {
        setOfflinePlayers((List<OfflinePlayer>)value);
      }
      break;

    case ONLINE_PLAYERS:
      if (value == null) {
        unsetOnlinePlayers();
      } else {
        setOnlinePlayers((List<Player>)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case BUKKIT_VERSION:
      if (value == null) {
        unsetBukkitVersion();
      } else {
        setBukkitVersion((String)value);
      }
      break;

    case MAX_PLAYERS:
      if (value == null) {
        unsetMaxPlayers();
      } else {
        setMaxPlayers((Integer)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    case ALLOW_FLIGHT:
      if (value == null) {
        unsetAllowFlight();
      } else {
        setAllowFlight((Boolean)value);
      }
      break;

    case ALLOW_NETHER:
      if (value == null) {
        unsetAllowNether();
      } else {
        setAllowNether((Boolean)value);
      }
      break;

    case ALLOW_END:
      if (value == null) {
        unsetAllowEnd();
      } else {
        setAllowEnd((Boolean)value);
      }
      break;

    case WHITELIST:
      if (value == null) {
        unsetWhitelist();
      } else {
        setWhitelist((List<OfflinePlayer>)value);
      }
      break;

    case BANNED_PLAYERS:
      if (value == null) {
        unsetBannedPlayers();
      } else {
        setBannedPlayers((List<OfflinePlayer>)value);
      }
      break;

    case BANNED_IPS:
      if (value == null) {
        unsetBannedIps();
      } else {
        setBannedIps((List<String>)value);
      }
      break;

    case WORLDS:
      if (value == null) {
        unsetWorlds();
      } else {
        setWorlds((List<World>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case OFFLINE_PLAYERS:
      return getOfflinePlayers();

    case ONLINE_PLAYERS:
      return getOnlinePlayers();

    case VERSION:
      return getVersion();

    case BUKKIT_VERSION:
      return getBukkitVersion();

    case MAX_PLAYERS:
      return Integer.valueOf(getMaxPlayers());

    case IP:
      return getIp();

    case PORT:
      return Integer.valueOf(getPort());

    case ALLOW_FLIGHT:
      return Boolean.valueOf(isAllowFlight());

    case ALLOW_NETHER:
      return Boolean.valueOf(isAllowNether());

    case ALLOW_END:
      return Boolean.valueOf(isAllowEnd());

    case WHITELIST:
      return getWhitelist();

    case BANNED_PLAYERS:
      return getBannedPlayers();

    case BANNED_IPS:
      return getBannedIps();

    case WORLDS:
      return getWorlds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case OFFLINE_PLAYERS:
      return isSetOfflinePlayers();
    case ONLINE_PLAYERS:
      return isSetOnlinePlayers();
    case VERSION:
      return isSetVersion();
    case BUKKIT_VERSION:
      return isSetBukkitVersion();
    case MAX_PLAYERS:
      return isSetMaxPlayers();
    case IP:
      return isSetIp();
    case PORT:
      return isSetPort();
    case ALLOW_FLIGHT:
      return isSetAllowFlight();
    case ALLOW_NETHER:
      return isSetAllowNether();
    case ALLOW_END:
      return isSetAllowEnd();
    case WHITELIST:
      return isSetWhitelist();
    case BANNED_PLAYERS:
      return isSetBannedPlayers();
    case BANNED_IPS:
      return isSetBannedIps();
    case WORLDS:
      return isSetWorlds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Server)
      return this.equals((Server)that);
    return false;
  }

  public boolean equals(Server that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_offlinePlayers = true && this.isSetOfflinePlayers();
    boolean that_present_offlinePlayers = true && that.isSetOfflinePlayers();
    if (this_present_offlinePlayers || that_present_offlinePlayers) {
      if (!(this_present_offlinePlayers && that_present_offlinePlayers))
        return false;
      if (!this.offlinePlayers.equals(that.offlinePlayers))
        return false;
    }

    boolean this_present_onlinePlayers = true && this.isSetOnlinePlayers();
    boolean that_present_onlinePlayers = true && that.isSetOnlinePlayers();
    if (this_present_onlinePlayers || that_present_onlinePlayers) {
      if (!(this_present_onlinePlayers && that_present_onlinePlayers))
        return false;
      if (!this.onlinePlayers.equals(that.onlinePlayers))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_bukkitVersion = true && this.isSetBukkitVersion();
    boolean that_present_bukkitVersion = true && that.isSetBukkitVersion();
    if (this_present_bukkitVersion || that_present_bukkitVersion) {
      if (!(this_present_bukkitVersion && that_present_bukkitVersion))
        return false;
      if (!this.bukkitVersion.equals(that.bukkitVersion))
        return false;
    }

    boolean this_present_maxPlayers = true;
    boolean that_present_maxPlayers = true;
    if (this_present_maxPlayers || that_present_maxPlayers) {
      if (!(this_present_maxPlayers && that_present_maxPlayers))
        return false;
      if (this.maxPlayers != that.maxPlayers)
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_allowFlight = true;
    boolean that_present_allowFlight = true;
    if (this_present_allowFlight || that_present_allowFlight) {
      if (!(this_present_allowFlight && that_present_allowFlight))
        return false;
      if (this.allowFlight != that.allowFlight)
        return false;
    }

    boolean this_present_allowNether = true;
    boolean that_present_allowNether = true;
    if (this_present_allowNether || that_present_allowNether) {
      if (!(this_present_allowNether && that_present_allowNether))
        return false;
      if (this.allowNether != that.allowNether)
        return false;
    }

    boolean this_present_allowEnd = true;
    boolean that_present_allowEnd = true;
    if (this_present_allowEnd || that_present_allowEnd) {
      if (!(this_present_allowEnd && that_present_allowEnd))
        return false;
      if (this.allowEnd != that.allowEnd)
        return false;
    }

    boolean this_present_whitelist = true && this.isSetWhitelist();
    boolean that_present_whitelist = true && that.isSetWhitelist();
    if (this_present_whitelist || that_present_whitelist) {
      if (!(this_present_whitelist && that_present_whitelist))
        return false;
      if (!this.whitelist.equals(that.whitelist))
        return false;
    }

    boolean this_present_bannedPlayers = true && this.isSetBannedPlayers();
    boolean that_present_bannedPlayers = true && that.isSetBannedPlayers();
    if (this_present_bannedPlayers || that_present_bannedPlayers) {
      if (!(this_present_bannedPlayers && that_present_bannedPlayers))
        return false;
      if (!this.bannedPlayers.equals(that.bannedPlayers))
        return false;
    }

    boolean this_present_bannedIps = true && this.isSetBannedIps();
    boolean that_present_bannedIps = true && that.isSetBannedIps();
    if (this_present_bannedIps || that_present_bannedIps) {
      if (!(this_present_bannedIps && that_present_bannedIps))
        return false;
      if (!this.bannedIps.equals(that.bannedIps))
        return false;
    }

    boolean this_present_worlds = true && this.isSetWorlds();
    boolean that_present_worlds = true && that.isSetWorlds();
    if (this_present_worlds || that_present_worlds) {
      if (!(this_present_worlds && that_present_worlds))
        return false;
      if (!this.worlds.equals(that.worlds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Server other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Server typedOther = (Server)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfflinePlayers()).compareTo(typedOther.isSetOfflinePlayers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfflinePlayers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offlinePlayers, typedOther.offlinePlayers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlinePlayers()).compareTo(typedOther.isSetOnlinePlayers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlinePlayers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlinePlayers, typedOther.onlinePlayers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBukkitVersion()).compareTo(typedOther.isSetBukkitVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBukkitVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bukkitVersion, typedOther.bukkitVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxPlayers()).compareTo(typedOther.isSetMaxPlayers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxPlayers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxPlayers, typedOther.maxPlayers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(typedOther.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, typedOther.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowFlight()).compareTo(typedOther.isSetAllowFlight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowFlight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowFlight, typedOther.allowFlight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowNether()).compareTo(typedOther.isSetAllowNether());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowNether()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowNether, typedOther.allowNether);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowEnd()).compareTo(typedOther.isSetAllowEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowEnd, typedOther.allowEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWhitelist()).compareTo(typedOther.isSetWhitelist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhitelist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whitelist, typedOther.whitelist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBannedPlayers()).compareTo(typedOther.isSetBannedPlayers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBannedPlayers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bannedPlayers, typedOther.bannedPlayers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBannedIps()).compareTo(typedOther.isSetBannedIps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBannedIps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bannedIps, typedOther.bannedIps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorlds()).compareTo(typedOther.isSetWorlds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorlds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worlds, typedOther.worlds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Server(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offlinePlayers:");
    if (this.offlinePlayers == null) {
      sb.append("null");
    } else {
      sb.append(this.offlinePlayers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("onlinePlayers:");
    if (this.onlinePlayers == null) {
      sb.append("null");
    } else {
      sb.append(this.onlinePlayers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bukkitVersion:");
    if (this.bukkitVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.bukkitVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxPlayers:");
    sb.append(this.maxPlayers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowFlight:");
    sb.append(this.allowFlight);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowNether:");
    sb.append(this.allowNether);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowEnd:");
    sb.append(this.allowEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("whitelist:");
    if (this.whitelist == null) {
      sb.append("null");
    } else {
      sb.append(this.whitelist);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bannedPlayers:");
    if (this.bannedPlayers == null) {
      sb.append("null");
    } else {
      sb.append(this.bannedPlayers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bannedIps:");
    if (this.bannedIps == null) {
      sb.append("null");
    } else {
      sb.append(this.bannedIps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("worlds:");
    if (this.worlds == null) {
      sb.append("null");
    } else {
      sb.append(this.worlds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServerStandardSchemeFactory implements SchemeFactory {
    public ServerStandardScheme getScheme() {
      return new ServerStandardScheme();
    }
  }

  private static class ServerStandardScheme extends StandardScheme<Server> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Server struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OFFLINE_PLAYERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                struct.offlinePlayers = new ArrayList<OfflinePlayer>(_list34.size);
                for (int _i35 = 0; _i35 < _list34.size; ++_i35)
                {
                  OfflinePlayer _elem36; // required
                  _elem36 = new OfflinePlayer();
                  _elem36.read(iprot);
                  struct.offlinePlayers.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setOfflinePlayersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ONLINE_PLAYERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
                struct.onlinePlayers = new ArrayList<Player>(_list37.size);
                for (int _i38 = 0; _i38 < _list37.size; ++_i38)
                {
                  Player _elem39; // required
                  _elem39 = new Player();
                  _elem39.read(iprot);
                  struct.onlinePlayers.add(_elem39);
                }
                iprot.readListEnd();
              }
              struct.setOnlinePlayersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BUKKIT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bukkitVersion = iprot.readString();
              struct.setBukkitVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_PLAYERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxPlayers = iprot.readI32();
              struct.setMaxPlayersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ALLOW_FLIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allowFlight = iprot.readBool();
              struct.setAllowFlightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ALLOW_NETHER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allowNether = iprot.readBool();
              struct.setAllowNetherIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ALLOW_END
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allowEnd = iprot.readBool();
              struct.setAllowEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // WHITELIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.whitelist = new ArrayList<OfflinePlayer>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  OfflinePlayer _elem42; // required
                  _elem42 = new OfflinePlayer();
                  _elem42.read(iprot);
                  struct.whitelist.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setWhitelistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BANNED_PLAYERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.bannedPlayers = new ArrayList<OfflinePlayer>(_list43.size);
                for (int _i44 = 0; _i44 < _list43.size; ++_i44)
                {
                  OfflinePlayer _elem45; // required
                  _elem45 = new OfflinePlayer();
                  _elem45.read(iprot);
                  struct.bannedPlayers.add(_elem45);
                }
                iprot.readListEnd();
              }
              struct.setBannedPlayersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BANNED_IPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                struct.bannedIps = new ArrayList<String>(_list46.size);
                for (int _i47 = 0; _i47 < _list46.size; ++_i47)
                {
                  String _elem48; // required
                  _elem48 = iprot.readString();
                  struct.bannedIps.add(_elem48);
                }
                iprot.readListEnd();
              }
              struct.setBannedIpsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WORLDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list49 = iprot.readListBegin();
                struct.worlds = new ArrayList<World>(_list49.size);
                for (int _i50 = 0; _i50 < _list49.size; ++_i50)
                {
                  World _elem51; // required
                  _elem51 = new World();
                  _elem51.read(iprot);
                  struct.worlds.add(_elem51);
                }
                iprot.readListEnd();
              }
              struct.setWorldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Server struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.offlinePlayers != null) {
        oprot.writeFieldBegin(OFFLINE_PLAYERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.offlinePlayers.size()));
          for (OfflinePlayer _iter52 : struct.offlinePlayers)
          {
            _iter52.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.onlinePlayers != null) {
        oprot.writeFieldBegin(ONLINE_PLAYERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.onlinePlayers.size()));
          for (Player _iter53 : struct.onlinePlayers)
          {
            _iter53.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.bukkitVersion != null) {
        oprot.writeFieldBegin(BUKKIT_VERSION_FIELD_DESC);
        oprot.writeString(struct.bukkitVersion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_PLAYERS_FIELD_DESC);
      oprot.writeI32(struct.maxPlayers);
      oprot.writeFieldEnd();
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALLOW_FLIGHT_FIELD_DESC);
      oprot.writeBool(struct.allowFlight);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALLOW_NETHER_FIELD_DESC);
      oprot.writeBool(struct.allowNether);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALLOW_END_FIELD_DESC);
      oprot.writeBool(struct.allowEnd);
      oprot.writeFieldEnd();
      if (struct.whitelist != null) {
        oprot.writeFieldBegin(WHITELIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.whitelist.size()));
          for (OfflinePlayer _iter54 : struct.whitelist)
          {
            _iter54.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.bannedPlayers != null) {
        oprot.writeFieldBegin(BANNED_PLAYERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.bannedPlayers.size()));
          for (OfflinePlayer _iter55 : struct.bannedPlayers)
          {
            _iter55.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.bannedIps != null) {
        oprot.writeFieldBegin(BANNED_IPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.bannedIps.size()));
          for (String _iter56 : struct.bannedIps)
          {
            oprot.writeString(_iter56);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.worlds != null) {
        oprot.writeFieldBegin(WORLDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.worlds.size()));
          for (World _iter57 : struct.worlds)
          {
            _iter57.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServerTupleSchemeFactory implements SchemeFactory {
    public ServerTupleScheme getScheme() {
      return new ServerTupleScheme();
    }
  }

  private static class ServerTupleScheme extends TupleScheme<Server> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Server struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetOfflinePlayers()) {
        optionals.set(1);
      }
      if (struct.isSetOnlinePlayers()) {
        optionals.set(2);
      }
      if (struct.isSetVersion()) {
        optionals.set(3);
      }
      if (struct.isSetBukkitVersion()) {
        optionals.set(4);
      }
      if (struct.isSetMaxPlayers()) {
        optionals.set(5);
      }
      if (struct.isSetIp()) {
        optionals.set(6);
      }
      if (struct.isSetPort()) {
        optionals.set(7);
      }
      if (struct.isSetAllowFlight()) {
        optionals.set(8);
      }
      if (struct.isSetAllowNether()) {
        optionals.set(9);
      }
      if (struct.isSetAllowEnd()) {
        optionals.set(10);
      }
      if (struct.isSetWhitelist()) {
        optionals.set(11);
      }
      if (struct.isSetBannedPlayers()) {
        optionals.set(12);
      }
      if (struct.isSetBannedIps()) {
        optionals.set(13);
      }
      if (struct.isSetWorlds()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetOfflinePlayers()) {
        {
          oprot.writeI32(struct.offlinePlayers.size());
          for (OfflinePlayer _iter58 : struct.offlinePlayers)
          {
            _iter58.write(oprot);
          }
        }
      }
      if (struct.isSetOnlinePlayers()) {
        {
          oprot.writeI32(struct.onlinePlayers.size());
          for (Player _iter59 : struct.onlinePlayers)
          {
            _iter59.write(oprot);
          }
        }
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetBukkitVersion()) {
        oprot.writeString(struct.bukkitVersion);
      }
      if (struct.isSetMaxPlayers()) {
        oprot.writeI32(struct.maxPlayers);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetAllowFlight()) {
        oprot.writeBool(struct.allowFlight);
      }
      if (struct.isSetAllowNether()) {
        oprot.writeBool(struct.allowNether);
      }
      if (struct.isSetAllowEnd()) {
        oprot.writeBool(struct.allowEnd);
      }
      if (struct.isSetWhitelist()) {
        {
          oprot.writeI32(struct.whitelist.size());
          for (OfflinePlayer _iter60 : struct.whitelist)
          {
            _iter60.write(oprot);
          }
        }
      }
      if (struct.isSetBannedPlayers()) {
        {
          oprot.writeI32(struct.bannedPlayers.size());
          for (OfflinePlayer _iter61 : struct.bannedPlayers)
          {
            _iter61.write(oprot);
          }
        }
      }
      if (struct.isSetBannedIps()) {
        {
          oprot.writeI32(struct.bannedIps.size());
          for (String _iter62 : struct.bannedIps)
          {
            oprot.writeString(_iter62);
          }
        }
      }
      if (struct.isSetWorlds()) {
        {
          oprot.writeI32(struct.worlds.size());
          for (World _iter63 : struct.worlds)
          {
            _iter63.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Server struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list64 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.offlinePlayers = new ArrayList<OfflinePlayer>(_list64.size);
          for (int _i65 = 0; _i65 < _list64.size; ++_i65)
          {
            OfflinePlayer _elem66; // required
            _elem66 = new OfflinePlayer();
            _elem66.read(iprot);
            struct.offlinePlayers.add(_elem66);
          }
        }
        struct.setOfflinePlayersIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list67 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.onlinePlayers = new ArrayList<Player>(_list67.size);
          for (int _i68 = 0; _i68 < _list67.size; ++_i68)
          {
            Player _elem69; // required
            _elem69 = new Player();
            _elem69.read(iprot);
            struct.onlinePlayers.add(_elem69);
          }
        }
        struct.setOnlinePlayersIsSet(true);
      }
      if (incoming.get(3)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bukkitVersion = iprot.readString();
        struct.setBukkitVersionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.maxPlayers = iprot.readI32();
        struct.setMaxPlayersIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(7)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(8)) {
        struct.allowFlight = iprot.readBool();
        struct.setAllowFlightIsSet(true);
      }
      if (incoming.get(9)) {
        struct.allowNether = iprot.readBool();
        struct.setAllowNetherIsSet(true);
      }
      if (incoming.get(10)) {
        struct.allowEnd = iprot.readBool();
        struct.setAllowEndIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list70 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.whitelist = new ArrayList<OfflinePlayer>(_list70.size);
          for (int _i71 = 0; _i71 < _list70.size; ++_i71)
          {
            OfflinePlayer _elem72; // required
            _elem72 = new OfflinePlayer();
            _elem72.read(iprot);
            struct.whitelist.add(_elem72);
          }
        }
        struct.setWhitelistIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.bannedPlayers = new ArrayList<OfflinePlayer>(_list73.size);
          for (int _i74 = 0; _i74 < _list73.size; ++_i74)
          {
            OfflinePlayer _elem75; // required
            _elem75 = new OfflinePlayer();
            _elem75.read(iprot);
            struct.bannedPlayers.add(_elem75);
          }
        }
        struct.setBannedPlayersIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list76 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.bannedIps = new ArrayList<String>(_list76.size);
          for (int _i77 = 0; _i77 < _list76.size; ++_i77)
          {
            String _elem78; // required
            _elem78 = iprot.readString();
            struct.bannedIps.add(_elem78);
          }
        }
        struct.setBannedIpsIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.worlds = new ArrayList<World>(_list79.size);
          for (int _i80 = 0; _i80 < _list79.size; ++_i80)
          {
            World _elem81; // required
            _elem81 = new World();
            _elem81.read(iprot);
            struct.worlds.add(_elem81);
          }
        }
        struct.setWorldsIsSet(true);
      }
    }
  }

}

