/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.phybros.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

/**
 * A stack of items
 */
public class ItemStack implements org.apache.thrift.TBase<ItemStack, ItemStack._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ItemStack");

  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("typeId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DURABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("durability", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ENCHANTMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("enchantments", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField LORE_FIELD_DESC = new org.apache.thrift.protocol.TField("lore", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ItemStackStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ItemStackTupleSchemeFactory());
  }

  /**
   * How many of this item are currently in the stack
   */
  public int amount; // required
  /**
   * The type ID of the item
   */
  public int typeId; // required
  /**
   * The durability of the item
   */
  public int durability; // required
  /**
   * The current enchantments in effect on this item
   */
  public Map<Enchantment,Integer> enchantments; // required
  /**
   * The lore associated with this item
   * @since 1.5
   */
  public List<String> lore; // required
  /**
   * The display name of the item
   * @since 1.5
   */
  public String displayName; // required
  /**
   * The data value associated with this item
   * @since 1.5
   */
  public int data; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * How many of this item are currently in the stack
     */
    AMOUNT((short)1, "amount"),
    /**
     * The type ID of the item
     */
    TYPE_ID((short)2, "typeId"),
    /**
     * The durability of the item
     */
    DURABILITY((short)3, "durability"),
    /**
     * The current enchantments in effect on this item
     */
    ENCHANTMENTS((short)4, "enchantments"),
    /**
     * The lore associated with this item
     * @since 1.5
     */
    LORE((short)5, "lore"),
    /**
     * The display name of the item
     * @since 1.5
     */
    DISPLAY_NAME((short)6, "displayName"),
    /**
     * The data value associated with this item
     * @since 1.5
     */
    DATA((short)7, "data");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AMOUNT
          return AMOUNT;
        case 2: // TYPE_ID
          return TYPE_ID;
        case 3: // DURABILITY
          return DURABILITY;
        case 4: // ENCHANTMENTS
          return ENCHANTMENTS;
        case 5: // LORE
          return LORE;
        case 6: // DISPLAY_NAME
          return DISPLAY_NAME;
        case 7: // DATA
          return DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AMOUNT_ISSET_ID = 0;
  private static final int __TYPEID_ISSET_ID = 1;
  private static final int __DURABILITY_ISSET_ID = 2;
  private static final int __DATA_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("typeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DURABILITY, new org.apache.thrift.meta_data.FieldMetaData("durability", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENCHANTMENTS, new org.apache.thrift.meta_data.FieldMetaData("enchantments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Enchantment.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LORE, new org.apache.thrift.meta_data.FieldMetaData("lore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ItemStack.class, metaDataMap);
  }

  public ItemStack() {
  }

  public ItemStack(
    int amount,
    int typeId,
    int durability,
    Map<Enchantment,Integer> enchantments,
    List<String> lore,
    String displayName,
    int data)
  {
    this();
    this.amount = amount;
    setAmountIsSet(true);
    this.typeId = typeId;
    setTypeIdIsSet(true);
    this.durability = durability;
    setDurabilityIsSet(true);
    this.enchantments = enchantments;
    this.lore = lore;
    this.displayName = displayName;
    this.data = data;
    setDataIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ItemStack(ItemStack other) {
    __isset_bitfield = other.__isset_bitfield;
    this.amount = other.amount;
    this.typeId = other.typeId;
    this.durability = other.durability;
    if (other.isSetEnchantments()) {
      Map<Enchantment,Integer> __this__enchantments = new HashMap<Enchantment,Integer>();
      for (Map.Entry<Enchantment, Integer> other_element : other.enchantments.entrySet()) {

        Enchantment other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Enchantment __this__enchantments_copy_key = other_element_key;

        Integer __this__enchantments_copy_value = other_element_value;

        __this__enchantments.put(__this__enchantments_copy_key, __this__enchantments_copy_value);
      }
      this.enchantments = __this__enchantments;
    }
    if (other.isSetLore()) {
      List<String> __this__lore = new ArrayList<String>();
      for (String other_element : other.lore) {
        __this__lore.add(other_element);
      }
      this.lore = __this__lore;
    }
    if (other.isSetDisplayName()) {
      this.displayName = other.displayName;
    }
    this.data = other.data;
  }

  public ItemStack deepCopy() {
    return new ItemStack(this);
  }

  @Override
  public void clear() {
    setAmountIsSet(false);
    this.amount = 0;
    setTypeIdIsSet(false);
    this.typeId = 0;
    setDurabilityIsSet(false);
    this.durability = 0;
    this.enchantments = null;
    this.lore = null;
    this.displayName = null;
    setDataIsSet(false);
    this.data = 0;
  }

  /**
   * How many of this item are currently in the stack
   */
  public int getAmount() {
    return this.amount;
  }

  /**
   * How many of this item are currently in the stack
   */
  public ItemStack setAmount(int amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  /**
   * The type ID of the item
   */
  public int getTypeId() {
    return this.typeId;
  }

  /**
   * The type ID of the item
   */
  public ItemStack setTypeId(int typeId) {
    this.typeId = typeId;
    setTypeIdIsSet(true);
    return this;
  }

  public void unsetTypeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPEID_ISSET_ID);
  }

  /** Returns true if field typeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeId() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPEID_ISSET_ID);
  }

  public void setTypeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPEID_ISSET_ID, value);
  }

  /**
   * The durability of the item
   */
  public int getDurability() {
    return this.durability;
  }

  /**
   * The durability of the item
   */
  public ItemStack setDurability(int durability) {
    this.durability = durability;
    setDurabilityIsSet(true);
    return this;
  }

  public void unsetDurability() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURABILITY_ISSET_ID);
  }

  /** Returns true if field durability is set (has been assigned a value) and false otherwise */
  public boolean isSetDurability() {
    return EncodingUtils.testBit(__isset_bitfield, __DURABILITY_ISSET_ID);
  }

  public void setDurabilityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURABILITY_ISSET_ID, value);
  }

  public int getEnchantmentsSize() {
    return (this.enchantments == null) ? 0 : this.enchantments.size();
  }

  public void putToEnchantments(Enchantment key, int val) {
    if (this.enchantments == null) {
      this.enchantments = new HashMap<Enchantment,Integer>();
    }
    this.enchantments.put(key, val);
  }

  /**
   * The current enchantments in effect on this item
   */
  public Map<Enchantment,Integer> getEnchantments() {
    return this.enchantments;
  }

  /**
   * The current enchantments in effect on this item
   */
  public ItemStack setEnchantments(Map<Enchantment,Integer> enchantments) {
    this.enchantments = enchantments;
    return this;
  }

  public void unsetEnchantments() {
    this.enchantments = null;
  }

  /** Returns true if field enchantments is set (has been assigned a value) and false otherwise */
  public boolean isSetEnchantments() {
    return this.enchantments != null;
  }

  public void setEnchantmentsIsSet(boolean value) {
    if (!value) {
      this.enchantments = null;
    }
  }

  public int getLoreSize() {
    return (this.lore == null) ? 0 : this.lore.size();
  }

  public java.util.Iterator<String> getLoreIterator() {
    return (this.lore == null) ? null : this.lore.iterator();
  }

  public void addToLore(String elem) {
    if (this.lore == null) {
      this.lore = new ArrayList<String>();
    }
    this.lore.add(elem);
  }

  /**
   * The lore associated with this item
   * @since 1.5
   */
  public List<String> getLore() {
    return this.lore;
  }

  /**
   * The lore associated with this item
   * @since 1.5
   */
  public ItemStack setLore(List<String> lore) {
    this.lore = lore;
    return this;
  }

  public void unsetLore() {
    this.lore = null;
  }

  /** Returns true if field lore is set (has been assigned a value) and false otherwise */
  public boolean isSetLore() {
    return this.lore != null;
  }

  public void setLoreIsSet(boolean value) {
    if (!value) {
      this.lore = null;
    }
  }

  /**
   * The display name of the item
   * @since 1.5
   */
  public String getDisplayName() {
    return this.displayName;
  }

  /**
   * The display name of the item
   * @since 1.5
   */
  public ItemStack setDisplayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  public void unsetDisplayName() {
    this.displayName = null;
  }

  /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayName() {
    return this.displayName != null;
  }

  public void setDisplayNameIsSet(boolean value) {
    if (!value) {
      this.displayName = null;
    }
  }

  /**
   * The data value associated with this item
   * @since 1.5
   */
  public int getData() {
    return this.data;
  }

  /**
   * The data value associated with this item
   * @since 1.5
   */
  public ItemStack setData(int data) {
    this.data = data;
    setDataIsSet(true);
    return this;
  }

  public void unsetData() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATA_ISSET_ID);
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return EncodingUtils.testBit(__isset_bitfield, __DATA_ISSET_ID);
  }

  public void setDataIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATA_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Integer)value);
      }
      break;

    case TYPE_ID:
      if (value == null) {
        unsetTypeId();
      } else {
        setTypeId((Integer)value);
      }
      break;

    case DURABILITY:
      if (value == null) {
        unsetDurability();
      } else {
        setDurability((Integer)value);
      }
      break;

    case ENCHANTMENTS:
      if (value == null) {
        unsetEnchantments();
      } else {
        setEnchantments((Map<Enchantment,Integer>)value);
      }
      break;

    case LORE:
      if (value == null) {
        unsetLore();
      } else {
        setLore((List<String>)value);
      }
      break;

    case DISPLAY_NAME:
      if (value == null) {
        unsetDisplayName();
      } else {
        setDisplayName((String)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AMOUNT:
      return Integer.valueOf(getAmount());

    case TYPE_ID:
      return Integer.valueOf(getTypeId());

    case DURABILITY:
      return Integer.valueOf(getDurability());

    case ENCHANTMENTS:
      return getEnchantments();

    case LORE:
      return getLore();

    case DISPLAY_NAME:
      return getDisplayName();

    case DATA:
      return Integer.valueOf(getData());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AMOUNT:
      return isSetAmount();
    case TYPE_ID:
      return isSetTypeId();
    case DURABILITY:
      return isSetDurability();
    case ENCHANTMENTS:
      return isSetEnchantments();
    case LORE:
      return isSetLore();
    case DISPLAY_NAME:
      return isSetDisplayName();
    case DATA:
      return isSetData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ItemStack)
      return this.equals((ItemStack)that);
    return false;
  }

  public boolean equals(ItemStack that) {
    if (that == null)
      return false;

    boolean this_present_amount = true;
    boolean that_present_amount = true;
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_typeId = true;
    boolean that_present_typeId = true;
    if (this_present_typeId || that_present_typeId) {
      if (!(this_present_typeId && that_present_typeId))
        return false;
      if (this.typeId != that.typeId)
        return false;
    }

    boolean this_present_durability = true;
    boolean that_present_durability = true;
    if (this_present_durability || that_present_durability) {
      if (!(this_present_durability && that_present_durability))
        return false;
      if (this.durability != that.durability)
        return false;
    }

    boolean this_present_enchantments = true && this.isSetEnchantments();
    boolean that_present_enchantments = true && that.isSetEnchantments();
    if (this_present_enchantments || that_present_enchantments) {
      if (!(this_present_enchantments && that_present_enchantments))
        return false;
      if (!this.enchantments.equals(that.enchantments))
        return false;
    }

    boolean this_present_lore = true && this.isSetLore();
    boolean that_present_lore = true && that.isSetLore();
    if (this_present_lore || that_present_lore) {
      if (!(this_present_lore && that_present_lore))
        return false;
      if (!this.lore.equals(that.lore))
        return false;
    }

    boolean this_present_displayName = true && this.isSetDisplayName();
    boolean that_present_displayName = true && that.isSetDisplayName();
    if (this_present_displayName || that_present_displayName) {
      if (!(this_present_displayName && that_present_displayName))
        return false;
      if (!this.displayName.equals(that.displayName))
        return false;
    }

    boolean this_present_data = true;
    boolean that_present_data = true;
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (this.data != that.data)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ItemStack other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ItemStack typedOther = (ItemStack)other;

    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(typedOther.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, typedOther.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypeId()).compareTo(typedOther.isSetTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeId, typedOther.typeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDurability()).compareTo(typedOther.isSetDurability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDurability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durability, typedOther.durability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnchantments()).compareTo(typedOther.isSetEnchantments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnchantments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enchantments, typedOther.enchantments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLore()).compareTo(typedOther.isSetLore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lore, typedOther.lore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayName()).compareTo(typedOther.isSetDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayName, typedOther.displayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ItemStack(");
    boolean first = true;

    sb.append("amount:");
    sb.append(this.amount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("typeId:");
    sb.append(this.typeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("durability:");
    sb.append(this.durability);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enchantments:");
    if (this.enchantments == null) {
      sb.append("null");
    } else {
      sb.append(this.enchantments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lore:");
    if (this.lore == null) {
      sb.append("null");
    } else {
      sb.append(this.lore);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayName:");
    if (this.displayName == null) {
      sb.append("null");
    } else {
      sb.append(this.displayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    sb.append(this.data);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ItemStackStandardSchemeFactory implements SchemeFactory {
    public ItemStackStandardScheme getScheme() {
      return new ItemStackStandardScheme();
    }
  }

  private static class ItemStackStandardScheme extends StandardScheme<ItemStack> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ItemStack struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.amount = iprot.readI32();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.typeId = iprot.readI32();
              struct.setTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DURABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.durability = iprot.readI32();
              struct.setDurabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENCHANTMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.enchantments = new HashMap<Enchantment,Integer>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  Enchantment _key2; // required
                  int _val3; // required
                  _key2 = Enchantment.findByValue(iprot.readI32());
                  _val3 = iprot.readI32();
                  struct.enchantments.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setEnchantmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LORE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.lore = new ArrayList<String>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  String _elem6; // required
                  _elem6 = iprot.readString();
                  struct.lore.add(_elem6);
                }
                iprot.readListEnd();
              }
              struct.setLoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayName = iprot.readString();
              struct.setDisplayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.data = iprot.readI32();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ItemStack struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
      oprot.writeI32(struct.amount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_ID_FIELD_DESC);
      oprot.writeI32(struct.typeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DURABILITY_FIELD_DESC);
      oprot.writeI32(struct.durability);
      oprot.writeFieldEnd();
      if (struct.enchantments != null) {
        oprot.writeFieldBegin(ENCHANTMENTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.enchantments.size()));
          for (Map.Entry<Enchantment, Integer> _iter7 : struct.enchantments.entrySet())
          {
            oprot.writeI32(_iter7.getKey().getValue());
            oprot.writeI32(_iter7.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.lore != null) {
        oprot.writeFieldBegin(LORE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.lore.size()));
          for (String _iter8 : struct.lore)
          {
            oprot.writeString(_iter8);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.displayName != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(struct.displayName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATA_FIELD_DESC);
      oprot.writeI32(struct.data);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ItemStackTupleSchemeFactory implements SchemeFactory {
    public ItemStackTupleScheme getScheme() {
      return new ItemStackTupleScheme();
    }
  }

  private static class ItemStackTupleScheme extends TupleScheme<ItemStack> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ItemStack struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAmount()) {
        optionals.set(0);
      }
      if (struct.isSetTypeId()) {
        optionals.set(1);
      }
      if (struct.isSetDurability()) {
        optionals.set(2);
      }
      if (struct.isSetEnchantments()) {
        optionals.set(3);
      }
      if (struct.isSetLore()) {
        optionals.set(4);
      }
      if (struct.isSetDisplayName()) {
        optionals.set(5);
      }
      if (struct.isSetData()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetAmount()) {
        oprot.writeI32(struct.amount);
      }
      if (struct.isSetTypeId()) {
        oprot.writeI32(struct.typeId);
      }
      if (struct.isSetDurability()) {
        oprot.writeI32(struct.durability);
      }
      if (struct.isSetEnchantments()) {
        {
          oprot.writeI32(struct.enchantments.size());
          for (Map.Entry<Enchantment, Integer> _iter9 : struct.enchantments.entrySet())
          {
            oprot.writeI32(_iter9.getKey().getValue());
            oprot.writeI32(_iter9.getValue());
          }
        }
      }
      if (struct.isSetLore()) {
        {
          oprot.writeI32(struct.lore.size());
          for (String _iter10 : struct.lore)
          {
            oprot.writeString(_iter10);
          }
        }
      }
      if (struct.isSetDisplayName()) {
        oprot.writeString(struct.displayName);
      }
      if (struct.isSetData()) {
        oprot.writeI32(struct.data);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ItemStack struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.amount = iprot.readI32();
        struct.setAmountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.typeId = iprot.readI32();
        struct.setTypeIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.durability = iprot.readI32();
        struct.setDurabilityIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.enchantments = new HashMap<Enchantment,Integer>(2*_map11.size);
          for (int _i12 = 0; _i12 < _map11.size; ++_i12)
          {
            Enchantment _key13; // required
            int _val14; // required
            _key13 = Enchantment.findByValue(iprot.readI32());
            _val14 = iprot.readI32();
            struct.enchantments.put(_key13, _val14);
          }
        }
        struct.setEnchantmentsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.lore = new ArrayList<String>(_list15.size);
          for (int _i16 = 0; _i16 < _list15.size; ++_i16)
          {
            String _elem17; // required
            _elem17 = iprot.readString();
            struct.lore.add(_elem17);
          }
        }
        struct.setLoreIsSet(true);
      }
      if (incoming.get(5)) {
        struct.displayName = iprot.readString();
        struct.setDisplayNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.data = iprot.readI32();
        struct.setDataIsSet(true);
      }
    }
  }

}

