/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.phybros.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Player implements org.apache.thrift.TBase<Player, Player._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Player");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GAMEMODE_FIELD_DESC = new org.apache.thrift.protocol.TField("gamemode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField IS_SLEEPING_FIELD_DESC = new org.apache.thrift.protocol.TField("isSleeping", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField IS_SNEAKING_FIELD_DESC = new org.apache.thrift.protocol.TField("isSneaking", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IS_SPRINTING_FIELD_DESC = new org.apache.thrift.protocol.TField("isSprinting", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField IS_IN_VEHICLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isInVehicle", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField XP_TO_NEXT_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("xpToNextLevel", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField IS_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("isOp", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField FOOD_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("foodLevel", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField HEALTH_FIELD_DESC = new org.apache.thrift.protocol.TField("health", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField EXHAUSTION_FIELD_DESC = new org.apache.thrift.protocol.TField("exhaustion", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField FIRST_PLAYED_FIELD_DESC = new org.apache.thrift.protocol.TField("firstPlayed", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField LAST_PLAYED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPlayed", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField IS_BANNED_FIELD_DESC = new org.apache.thrift.protocol.TField("isBanned", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField IS_WHITELISTED_FIELD_DESC = new org.apache.thrift.protocol.TField("isWhitelisted", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField INVENTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("inventory", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField LEVEL_PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("levelProgress", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PlayerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PlayerTupleSchemeFactory());
  }

  public String name; // required
  /**
   * 
   * @see GameMode
   */
  public GameMode gamemode; // required
  public boolean isSleeping; // required
  public boolean isSneaking; // required
  public boolean isSprinting; // required
  public boolean isInVehicle; // required
  public long xpToNextLevel; // required
  public int level; // required
  public String ip; // required
  public boolean isOp; // required
  public int foodLevel; // required
  public int health; // required
  public double exhaustion; // required
  public long firstPlayed; // required
  public long lastPlayed; // required
  public boolean isBanned; // required
  public boolean isWhitelisted; // required
  public PlayerInventory inventory; // required
  public double levelProgress; // required
  public int port; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    /**
     * 
     * @see GameMode
     */
    GAMEMODE((short)2, "gamemode"),
    IS_SLEEPING((short)3, "isSleeping"),
    IS_SNEAKING((short)4, "isSneaking"),
    IS_SPRINTING((short)5, "isSprinting"),
    IS_IN_VEHICLE((short)6, "isInVehicle"),
    XP_TO_NEXT_LEVEL((short)7, "xpToNextLevel"),
    LEVEL((short)8, "level"),
    IP((short)9, "ip"),
    IS_OP((short)10, "isOp"),
    FOOD_LEVEL((short)11, "foodLevel"),
    HEALTH((short)12, "health"),
    EXHAUSTION((short)13, "exhaustion"),
    FIRST_PLAYED((short)14, "firstPlayed"),
    LAST_PLAYED((short)15, "lastPlayed"),
    IS_BANNED((short)16, "isBanned"),
    IS_WHITELISTED((short)17, "isWhitelisted"),
    INVENTORY((short)18, "inventory"),
    LEVEL_PROGRESS((short)19, "levelProgress"),
    PORT((short)20, "port");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // GAMEMODE
          return GAMEMODE;
        case 3: // IS_SLEEPING
          return IS_SLEEPING;
        case 4: // IS_SNEAKING
          return IS_SNEAKING;
        case 5: // IS_SPRINTING
          return IS_SPRINTING;
        case 6: // IS_IN_VEHICLE
          return IS_IN_VEHICLE;
        case 7: // XP_TO_NEXT_LEVEL
          return XP_TO_NEXT_LEVEL;
        case 8: // LEVEL
          return LEVEL;
        case 9: // IP
          return IP;
        case 10: // IS_OP
          return IS_OP;
        case 11: // FOOD_LEVEL
          return FOOD_LEVEL;
        case 12: // HEALTH
          return HEALTH;
        case 13: // EXHAUSTION
          return EXHAUSTION;
        case 14: // FIRST_PLAYED
          return FIRST_PLAYED;
        case 15: // LAST_PLAYED
          return LAST_PLAYED;
        case 16: // IS_BANNED
          return IS_BANNED;
        case 17: // IS_WHITELISTED
          return IS_WHITELISTED;
        case 18: // INVENTORY
          return INVENTORY;
        case 19: // LEVEL_PROGRESS
          return LEVEL_PROGRESS;
        case 20: // PORT
          return PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISSLEEPING_ISSET_ID = 0;
  private static final int __ISSNEAKING_ISSET_ID = 1;
  private static final int __ISSPRINTING_ISSET_ID = 2;
  private static final int __ISINVEHICLE_ISSET_ID = 3;
  private static final int __XPTONEXTLEVEL_ISSET_ID = 4;
  private static final int __LEVEL_ISSET_ID = 5;
  private static final int __ISOP_ISSET_ID = 6;
  private static final int __FOODLEVEL_ISSET_ID = 7;
  private static final int __HEALTH_ISSET_ID = 8;
  private static final int __EXHAUSTION_ISSET_ID = 9;
  private static final int __FIRSTPLAYED_ISSET_ID = 10;
  private static final int __LASTPLAYED_ISSET_ID = 11;
  private static final int __ISBANNED_ISSET_ID = 12;
  private static final int __ISWHITELISTED_ISSET_ID = 13;
  private static final int __LEVELPROGRESS_ISSET_ID = 14;
  private static final int __PORT_ISSET_ID = 15;
  private BitSet __isset_bit_vector = new BitSet(16);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAMEMODE, new org.apache.thrift.meta_data.FieldMetaData("gamemode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GameMode.class)));
    tmpMap.put(_Fields.IS_SLEEPING, new org.apache.thrift.meta_data.FieldMetaData("isSleeping", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_SNEAKING, new org.apache.thrift.meta_data.FieldMetaData("isSneaking", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_SPRINTING, new org.apache.thrift.meta_data.FieldMetaData("isSprinting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_IN_VEHICLE, new org.apache.thrift.meta_data.FieldMetaData("isInVehicle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.XP_TO_NEXT_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("xpToNextLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_OP, new org.apache.thrift.meta_data.FieldMetaData("isOp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FOOD_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("foodLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEALTH, new org.apache.thrift.meta_data.FieldMetaData("health", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXHAUSTION, new org.apache.thrift.meta_data.FieldMetaData("exhaustion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FIRST_PLAYED, new org.apache.thrift.meta_data.FieldMetaData("firstPlayed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_PLAYED, new org.apache.thrift.meta_data.FieldMetaData("lastPlayed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_BANNED, new org.apache.thrift.meta_data.FieldMetaData("isBanned", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_WHITELISTED, new org.apache.thrift.meta_data.FieldMetaData("isWhitelisted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INVENTORY, new org.apache.thrift.meta_data.FieldMetaData("inventory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayerInventory.class)));
    tmpMap.put(_Fields.LEVEL_PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("levelProgress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Player.class, metaDataMap);
  }

  public Player() {
  }

  public Player(
    String name,
    GameMode gamemode,
    boolean isSleeping,
    boolean isSneaking,
    boolean isSprinting,
    boolean isInVehicle,
    long xpToNextLevel,
    int level,
    String ip,
    boolean isOp,
    int foodLevel,
    int health,
    double exhaustion,
    long firstPlayed,
    long lastPlayed,
    boolean isBanned,
    boolean isWhitelisted,
    PlayerInventory inventory,
    double levelProgress,
    int port)
  {
    this();
    this.name = name;
    this.gamemode = gamemode;
    this.isSleeping = isSleeping;
    setIsSleepingIsSet(true);
    this.isSneaking = isSneaking;
    setIsSneakingIsSet(true);
    this.isSprinting = isSprinting;
    setIsSprintingIsSet(true);
    this.isInVehicle = isInVehicle;
    setIsInVehicleIsSet(true);
    this.xpToNextLevel = xpToNextLevel;
    setXpToNextLevelIsSet(true);
    this.level = level;
    setLevelIsSet(true);
    this.ip = ip;
    this.isOp = isOp;
    setIsOpIsSet(true);
    this.foodLevel = foodLevel;
    setFoodLevelIsSet(true);
    this.health = health;
    setHealthIsSet(true);
    this.exhaustion = exhaustion;
    setExhaustionIsSet(true);
    this.firstPlayed = firstPlayed;
    setFirstPlayedIsSet(true);
    this.lastPlayed = lastPlayed;
    setLastPlayedIsSet(true);
    this.isBanned = isBanned;
    setIsBannedIsSet(true);
    this.isWhitelisted = isWhitelisted;
    setIsWhitelistedIsSet(true);
    this.inventory = inventory;
    this.levelProgress = levelProgress;
    setLevelProgressIsSet(true);
    this.port = port;
    setPortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Player(Player other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetGamemode()) {
      this.gamemode = other.gamemode;
    }
    this.isSleeping = other.isSleeping;
    this.isSneaking = other.isSneaking;
    this.isSprinting = other.isSprinting;
    this.isInVehicle = other.isInVehicle;
    this.xpToNextLevel = other.xpToNextLevel;
    this.level = other.level;
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    this.isOp = other.isOp;
    this.foodLevel = other.foodLevel;
    this.health = other.health;
    this.exhaustion = other.exhaustion;
    this.firstPlayed = other.firstPlayed;
    this.lastPlayed = other.lastPlayed;
    this.isBanned = other.isBanned;
    this.isWhitelisted = other.isWhitelisted;
    if (other.isSetInventory()) {
      this.inventory = new PlayerInventory(other.inventory);
    }
    this.levelProgress = other.levelProgress;
    this.port = other.port;
  }

  public Player deepCopy() {
    return new Player(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.gamemode = null;
    setIsSleepingIsSet(false);
    this.isSleeping = false;
    setIsSneakingIsSet(false);
    this.isSneaking = false;
    setIsSprintingIsSet(false);
    this.isSprinting = false;
    setIsInVehicleIsSet(false);
    this.isInVehicle = false;
    setXpToNextLevelIsSet(false);
    this.xpToNextLevel = 0;
    setLevelIsSet(false);
    this.level = 0;
    this.ip = null;
    setIsOpIsSet(false);
    this.isOp = false;
    setFoodLevelIsSet(false);
    this.foodLevel = 0;
    setHealthIsSet(false);
    this.health = 0;
    setExhaustionIsSet(false);
    this.exhaustion = 0.0;
    setFirstPlayedIsSet(false);
    this.firstPlayed = 0;
    setLastPlayedIsSet(false);
    this.lastPlayed = 0;
    setIsBannedIsSet(false);
    this.isBanned = false;
    setIsWhitelistedIsSet(false);
    this.isWhitelisted = false;
    this.inventory = null;
    setLevelProgressIsSet(false);
    this.levelProgress = 0.0;
    setPortIsSet(false);
    this.port = 0;
  }

  public String getName() {
    return this.name;
  }

  public Player setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see GameMode
   */
  public GameMode getGamemode() {
    return this.gamemode;
  }

  /**
   * 
   * @see GameMode
   */
  public Player setGamemode(GameMode gamemode) {
    this.gamemode = gamemode;
    return this;
  }

  public void unsetGamemode() {
    this.gamemode = null;
  }

  /** Returns true if field gamemode is set (has been assigned a value) and false otherwise */
  public boolean isSetGamemode() {
    return this.gamemode != null;
  }

  public void setGamemodeIsSet(boolean value) {
    if (!value) {
      this.gamemode = null;
    }
  }

  public boolean isIsSleeping() {
    return this.isSleeping;
  }

  public Player setIsSleeping(boolean isSleeping) {
    this.isSleeping = isSleeping;
    setIsSleepingIsSet(true);
    return this;
  }

  public void unsetIsSleeping() {
    __isset_bit_vector.clear(__ISSLEEPING_ISSET_ID);
  }

  /** Returns true if field isSleeping is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSleeping() {
    return __isset_bit_vector.get(__ISSLEEPING_ISSET_ID);
  }

  public void setIsSleepingIsSet(boolean value) {
    __isset_bit_vector.set(__ISSLEEPING_ISSET_ID, value);
  }

  public boolean isIsSneaking() {
    return this.isSneaking;
  }

  public Player setIsSneaking(boolean isSneaking) {
    this.isSneaking = isSneaking;
    setIsSneakingIsSet(true);
    return this;
  }

  public void unsetIsSneaking() {
    __isset_bit_vector.clear(__ISSNEAKING_ISSET_ID);
  }

  /** Returns true if field isSneaking is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSneaking() {
    return __isset_bit_vector.get(__ISSNEAKING_ISSET_ID);
  }

  public void setIsSneakingIsSet(boolean value) {
    __isset_bit_vector.set(__ISSNEAKING_ISSET_ID, value);
  }

  public boolean isIsSprinting() {
    return this.isSprinting;
  }

  public Player setIsSprinting(boolean isSprinting) {
    this.isSprinting = isSprinting;
    setIsSprintingIsSet(true);
    return this;
  }

  public void unsetIsSprinting() {
    __isset_bit_vector.clear(__ISSPRINTING_ISSET_ID);
  }

  /** Returns true if field isSprinting is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSprinting() {
    return __isset_bit_vector.get(__ISSPRINTING_ISSET_ID);
  }

  public void setIsSprintingIsSet(boolean value) {
    __isset_bit_vector.set(__ISSPRINTING_ISSET_ID, value);
  }

  public boolean isIsInVehicle() {
    return this.isInVehicle;
  }

  public Player setIsInVehicle(boolean isInVehicle) {
    this.isInVehicle = isInVehicle;
    setIsInVehicleIsSet(true);
    return this;
  }

  public void unsetIsInVehicle() {
    __isset_bit_vector.clear(__ISINVEHICLE_ISSET_ID);
  }

  /** Returns true if field isInVehicle is set (has been assigned a value) and false otherwise */
  public boolean isSetIsInVehicle() {
    return __isset_bit_vector.get(__ISINVEHICLE_ISSET_ID);
  }

  public void setIsInVehicleIsSet(boolean value) {
    __isset_bit_vector.set(__ISINVEHICLE_ISSET_ID, value);
  }

  public long getXpToNextLevel() {
    return this.xpToNextLevel;
  }

  public Player setXpToNextLevel(long xpToNextLevel) {
    this.xpToNextLevel = xpToNextLevel;
    setXpToNextLevelIsSet(true);
    return this;
  }

  public void unsetXpToNextLevel() {
    __isset_bit_vector.clear(__XPTONEXTLEVEL_ISSET_ID);
  }

  /** Returns true if field xpToNextLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetXpToNextLevel() {
    return __isset_bit_vector.get(__XPTONEXTLEVEL_ISSET_ID);
  }

  public void setXpToNextLevelIsSet(boolean value) {
    __isset_bit_vector.set(__XPTONEXTLEVEL_ISSET_ID, value);
  }

  public int getLevel() {
    return this.level;
  }

  public Player setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bit_vector.clear(__LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return __isset_bit_vector.get(__LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bit_vector.set(__LEVEL_ISSET_ID, value);
  }

  public String getIp() {
    return this.ip;
  }

  public Player setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public boolean isIsOp() {
    return this.isOp;
  }

  public Player setIsOp(boolean isOp) {
    this.isOp = isOp;
    setIsOpIsSet(true);
    return this;
  }

  public void unsetIsOp() {
    __isset_bit_vector.clear(__ISOP_ISSET_ID);
  }

  /** Returns true if field isOp is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOp() {
    return __isset_bit_vector.get(__ISOP_ISSET_ID);
  }

  public void setIsOpIsSet(boolean value) {
    __isset_bit_vector.set(__ISOP_ISSET_ID, value);
  }

  public int getFoodLevel() {
    return this.foodLevel;
  }

  public Player setFoodLevel(int foodLevel) {
    this.foodLevel = foodLevel;
    setFoodLevelIsSet(true);
    return this;
  }

  public void unsetFoodLevel() {
    __isset_bit_vector.clear(__FOODLEVEL_ISSET_ID);
  }

  /** Returns true if field foodLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetFoodLevel() {
    return __isset_bit_vector.get(__FOODLEVEL_ISSET_ID);
  }

  public void setFoodLevelIsSet(boolean value) {
    __isset_bit_vector.set(__FOODLEVEL_ISSET_ID, value);
  }

  public int getHealth() {
    return this.health;
  }

  public Player setHealth(int health) {
    this.health = health;
    setHealthIsSet(true);
    return this;
  }

  public void unsetHealth() {
    __isset_bit_vector.clear(__HEALTH_ISSET_ID);
  }

  /** Returns true if field health is set (has been assigned a value) and false otherwise */
  public boolean isSetHealth() {
    return __isset_bit_vector.get(__HEALTH_ISSET_ID);
  }

  public void setHealthIsSet(boolean value) {
    __isset_bit_vector.set(__HEALTH_ISSET_ID, value);
  }

  public double getExhaustion() {
    return this.exhaustion;
  }

  public Player setExhaustion(double exhaustion) {
    this.exhaustion = exhaustion;
    setExhaustionIsSet(true);
    return this;
  }

  public void unsetExhaustion() {
    __isset_bit_vector.clear(__EXHAUSTION_ISSET_ID);
  }

  /** Returns true if field exhaustion is set (has been assigned a value) and false otherwise */
  public boolean isSetExhaustion() {
    return __isset_bit_vector.get(__EXHAUSTION_ISSET_ID);
  }

  public void setExhaustionIsSet(boolean value) {
    __isset_bit_vector.set(__EXHAUSTION_ISSET_ID, value);
  }

  public long getFirstPlayed() {
    return this.firstPlayed;
  }

  public Player setFirstPlayed(long firstPlayed) {
    this.firstPlayed = firstPlayed;
    setFirstPlayedIsSet(true);
    return this;
  }

  public void unsetFirstPlayed() {
    __isset_bit_vector.clear(__FIRSTPLAYED_ISSET_ID);
  }

  /** Returns true if field firstPlayed is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstPlayed() {
    return __isset_bit_vector.get(__FIRSTPLAYED_ISSET_ID);
  }

  public void setFirstPlayedIsSet(boolean value) {
    __isset_bit_vector.set(__FIRSTPLAYED_ISSET_ID, value);
  }

  public long getLastPlayed() {
    return this.lastPlayed;
  }

  public Player setLastPlayed(long lastPlayed) {
    this.lastPlayed = lastPlayed;
    setLastPlayedIsSet(true);
    return this;
  }

  public void unsetLastPlayed() {
    __isset_bit_vector.clear(__LASTPLAYED_ISSET_ID);
  }

  /** Returns true if field lastPlayed is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPlayed() {
    return __isset_bit_vector.get(__LASTPLAYED_ISSET_ID);
  }

  public void setLastPlayedIsSet(boolean value) {
    __isset_bit_vector.set(__LASTPLAYED_ISSET_ID, value);
  }

  public boolean isIsBanned() {
    return this.isBanned;
  }

  public Player setIsBanned(boolean isBanned) {
    this.isBanned = isBanned;
    setIsBannedIsSet(true);
    return this;
  }

  public void unsetIsBanned() {
    __isset_bit_vector.clear(__ISBANNED_ISSET_ID);
  }

  /** Returns true if field isBanned is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBanned() {
    return __isset_bit_vector.get(__ISBANNED_ISSET_ID);
  }

  public void setIsBannedIsSet(boolean value) {
    __isset_bit_vector.set(__ISBANNED_ISSET_ID, value);
  }

  public boolean isIsWhitelisted() {
    return this.isWhitelisted;
  }

  public Player setIsWhitelisted(boolean isWhitelisted) {
    this.isWhitelisted = isWhitelisted;
    setIsWhitelistedIsSet(true);
    return this;
  }

  public void unsetIsWhitelisted() {
    __isset_bit_vector.clear(__ISWHITELISTED_ISSET_ID);
  }

  /** Returns true if field isWhitelisted is set (has been assigned a value) and false otherwise */
  public boolean isSetIsWhitelisted() {
    return __isset_bit_vector.get(__ISWHITELISTED_ISSET_ID);
  }

  public void setIsWhitelistedIsSet(boolean value) {
    __isset_bit_vector.set(__ISWHITELISTED_ISSET_ID, value);
  }

  public PlayerInventory getInventory() {
    return this.inventory;
  }

  public Player setInventory(PlayerInventory inventory) {
    this.inventory = inventory;
    return this;
  }

  public void unsetInventory() {
    this.inventory = null;
  }

  /** Returns true if field inventory is set (has been assigned a value) and false otherwise */
  public boolean isSetInventory() {
    return this.inventory != null;
  }

  public void setInventoryIsSet(boolean value) {
    if (!value) {
      this.inventory = null;
    }
  }

  public double getLevelProgress() {
    return this.levelProgress;
  }

  public Player setLevelProgress(double levelProgress) {
    this.levelProgress = levelProgress;
    setLevelProgressIsSet(true);
    return this;
  }

  public void unsetLevelProgress() {
    __isset_bit_vector.clear(__LEVELPROGRESS_ISSET_ID);
  }

  /** Returns true if field levelProgress is set (has been assigned a value) and false otherwise */
  public boolean isSetLevelProgress() {
    return __isset_bit_vector.get(__LEVELPROGRESS_ISSET_ID);
  }

  public void setLevelProgressIsSet(boolean value) {
    __isset_bit_vector.set(__LEVELPROGRESS_ISSET_ID, value);
  }

  public int getPort() {
    return this.port;
  }

  public Player setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bit_vector.clear(__PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return __isset_bit_vector.get(__PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bit_vector.set(__PORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case GAMEMODE:
      if (value == null) {
        unsetGamemode();
      } else {
        setGamemode((GameMode)value);
      }
      break;

    case IS_SLEEPING:
      if (value == null) {
        unsetIsSleeping();
      } else {
        setIsSleeping((Boolean)value);
      }
      break;

    case IS_SNEAKING:
      if (value == null) {
        unsetIsSneaking();
      } else {
        setIsSneaking((Boolean)value);
      }
      break;

    case IS_SPRINTING:
      if (value == null) {
        unsetIsSprinting();
      } else {
        setIsSprinting((Boolean)value);
      }
      break;

    case IS_IN_VEHICLE:
      if (value == null) {
        unsetIsInVehicle();
      } else {
        setIsInVehicle((Boolean)value);
      }
      break;

    case XP_TO_NEXT_LEVEL:
      if (value == null) {
        unsetXpToNextLevel();
      } else {
        setXpToNextLevel((Long)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case IS_OP:
      if (value == null) {
        unsetIsOp();
      } else {
        setIsOp((Boolean)value);
      }
      break;

    case FOOD_LEVEL:
      if (value == null) {
        unsetFoodLevel();
      } else {
        setFoodLevel((Integer)value);
      }
      break;

    case HEALTH:
      if (value == null) {
        unsetHealth();
      } else {
        setHealth((Integer)value);
      }
      break;

    case EXHAUSTION:
      if (value == null) {
        unsetExhaustion();
      } else {
        setExhaustion((Double)value);
      }
      break;

    case FIRST_PLAYED:
      if (value == null) {
        unsetFirstPlayed();
      } else {
        setFirstPlayed((Long)value);
      }
      break;

    case LAST_PLAYED:
      if (value == null) {
        unsetLastPlayed();
      } else {
        setLastPlayed((Long)value);
      }
      break;

    case IS_BANNED:
      if (value == null) {
        unsetIsBanned();
      } else {
        setIsBanned((Boolean)value);
      }
      break;

    case IS_WHITELISTED:
      if (value == null) {
        unsetIsWhitelisted();
      } else {
        setIsWhitelisted((Boolean)value);
      }
      break;

    case INVENTORY:
      if (value == null) {
        unsetInventory();
      } else {
        setInventory((PlayerInventory)value);
      }
      break;

    case LEVEL_PROGRESS:
      if (value == null) {
        unsetLevelProgress();
      } else {
        setLevelProgress((Double)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case GAMEMODE:
      return getGamemode();

    case IS_SLEEPING:
      return Boolean.valueOf(isIsSleeping());

    case IS_SNEAKING:
      return Boolean.valueOf(isIsSneaking());

    case IS_SPRINTING:
      return Boolean.valueOf(isIsSprinting());

    case IS_IN_VEHICLE:
      return Boolean.valueOf(isIsInVehicle());

    case XP_TO_NEXT_LEVEL:
      return Long.valueOf(getXpToNextLevel());

    case LEVEL:
      return Integer.valueOf(getLevel());

    case IP:
      return getIp();

    case IS_OP:
      return Boolean.valueOf(isIsOp());

    case FOOD_LEVEL:
      return Integer.valueOf(getFoodLevel());

    case HEALTH:
      return Integer.valueOf(getHealth());

    case EXHAUSTION:
      return Double.valueOf(getExhaustion());

    case FIRST_PLAYED:
      return Long.valueOf(getFirstPlayed());

    case LAST_PLAYED:
      return Long.valueOf(getLastPlayed());

    case IS_BANNED:
      return Boolean.valueOf(isIsBanned());

    case IS_WHITELISTED:
      return Boolean.valueOf(isIsWhitelisted());

    case INVENTORY:
      return getInventory();

    case LEVEL_PROGRESS:
      return Double.valueOf(getLevelProgress());

    case PORT:
      return Integer.valueOf(getPort());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case GAMEMODE:
      return isSetGamemode();
    case IS_SLEEPING:
      return isSetIsSleeping();
    case IS_SNEAKING:
      return isSetIsSneaking();
    case IS_SPRINTING:
      return isSetIsSprinting();
    case IS_IN_VEHICLE:
      return isSetIsInVehicle();
    case XP_TO_NEXT_LEVEL:
      return isSetXpToNextLevel();
    case LEVEL:
      return isSetLevel();
    case IP:
      return isSetIp();
    case IS_OP:
      return isSetIsOp();
    case FOOD_LEVEL:
      return isSetFoodLevel();
    case HEALTH:
      return isSetHealth();
    case EXHAUSTION:
      return isSetExhaustion();
    case FIRST_PLAYED:
      return isSetFirstPlayed();
    case LAST_PLAYED:
      return isSetLastPlayed();
    case IS_BANNED:
      return isSetIsBanned();
    case IS_WHITELISTED:
      return isSetIsWhitelisted();
    case INVENTORY:
      return isSetInventory();
    case LEVEL_PROGRESS:
      return isSetLevelProgress();
    case PORT:
      return isSetPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Player)
      return this.equals((Player)that);
    return false;
  }

  public boolean equals(Player that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_gamemode = true && this.isSetGamemode();
    boolean that_present_gamemode = true && that.isSetGamemode();
    if (this_present_gamemode || that_present_gamemode) {
      if (!(this_present_gamemode && that_present_gamemode))
        return false;
      if (!this.gamemode.equals(that.gamemode))
        return false;
    }

    boolean this_present_isSleeping = true;
    boolean that_present_isSleeping = true;
    if (this_present_isSleeping || that_present_isSleeping) {
      if (!(this_present_isSleeping && that_present_isSleeping))
        return false;
      if (this.isSleeping != that.isSleeping)
        return false;
    }

    boolean this_present_isSneaking = true;
    boolean that_present_isSneaking = true;
    if (this_present_isSneaking || that_present_isSneaking) {
      if (!(this_present_isSneaking && that_present_isSneaking))
        return false;
      if (this.isSneaking != that.isSneaking)
        return false;
    }

    boolean this_present_isSprinting = true;
    boolean that_present_isSprinting = true;
    if (this_present_isSprinting || that_present_isSprinting) {
      if (!(this_present_isSprinting && that_present_isSprinting))
        return false;
      if (this.isSprinting != that.isSprinting)
        return false;
    }

    boolean this_present_isInVehicle = true;
    boolean that_present_isInVehicle = true;
    if (this_present_isInVehicle || that_present_isInVehicle) {
      if (!(this_present_isInVehicle && that_present_isInVehicle))
        return false;
      if (this.isInVehicle != that.isInVehicle)
        return false;
    }

    boolean this_present_xpToNextLevel = true;
    boolean that_present_xpToNextLevel = true;
    if (this_present_xpToNextLevel || that_present_xpToNextLevel) {
      if (!(this_present_xpToNextLevel && that_present_xpToNextLevel))
        return false;
      if (this.xpToNextLevel != that.xpToNextLevel)
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_isOp = true;
    boolean that_present_isOp = true;
    if (this_present_isOp || that_present_isOp) {
      if (!(this_present_isOp && that_present_isOp))
        return false;
      if (this.isOp != that.isOp)
        return false;
    }

    boolean this_present_foodLevel = true;
    boolean that_present_foodLevel = true;
    if (this_present_foodLevel || that_present_foodLevel) {
      if (!(this_present_foodLevel && that_present_foodLevel))
        return false;
      if (this.foodLevel != that.foodLevel)
        return false;
    }

    boolean this_present_health = true;
    boolean that_present_health = true;
    if (this_present_health || that_present_health) {
      if (!(this_present_health && that_present_health))
        return false;
      if (this.health != that.health)
        return false;
    }

    boolean this_present_exhaustion = true;
    boolean that_present_exhaustion = true;
    if (this_present_exhaustion || that_present_exhaustion) {
      if (!(this_present_exhaustion && that_present_exhaustion))
        return false;
      if (this.exhaustion != that.exhaustion)
        return false;
    }

    boolean this_present_firstPlayed = true;
    boolean that_present_firstPlayed = true;
    if (this_present_firstPlayed || that_present_firstPlayed) {
      if (!(this_present_firstPlayed && that_present_firstPlayed))
        return false;
      if (this.firstPlayed != that.firstPlayed)
        return false;
    }

    boolean this_present_lastPlayed = true;
    boolean that_present_lastPlayed = true;
    if (this_present_lastPlayed || that_present_lastPlayed) {
      if (!(this_present_lastPlayed && that_present_lastPlayed))
        return false;
      if (this.lastPlayed != that.lastPlayed)
        return false;
    }

    boolean this_present_isBanned = true;
    boolean that_present_isBanned = true;
    if (this_present_isBanned || that_present_isBanned) {
      if (!(this_present_isBanned && that_present_isBanned))
        return false;
      if (this.isBanned != that.isBanned)
        return false;
    }

    boolean this_present_isWhitelisted = true;
    boolean that_present_isWhitelisted = true;
    if (this_present_isWhitelisted || that_present_isWhitelisted) {
      if (!(this_present_isWhitelisted && that_present_isWhitelisted))
        return false;
      if (this.isWhitelisted != that.isWhitelisted)
        return false;
    }

    boolean this_present_inventory = true && this.isSetInventory();
    boolean that_present_inventory = true && that.isSetInventory();
    if (this_present_inventory || that_present_inventory) {
      if (!(this_present_inventory && that_present_inventory))
        return false;
      if (!this.inventory.equals(that.inventory))
        return false;
    }

    boolean this_present_levelProgress = true;
    boolean that_present_levelProgress = true;
    if (this_present_levelProgress || that_present_levelProgress) {
      if (!(this_present_levelProgress && that_present_levelProgress))
        return false;
      if (this.levelProgress != that.levelProgress)
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Player other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Player typedOther = (Player)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGamemode()).compareTo(typedOther.isSetGamemode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGamemode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gamemode, typedOther.gamemode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSleeping()).compareTo(typedOther.isSetIsSleeping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSleeping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSleeping, typedOther.isSleeping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSneaking()).compareTo(typedOther.isSetIsSneaking());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSneaking()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSneaking, typedOther.isSneaking);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSprinting()).compareTo(typedOther.isSetIsSprinting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSprinting()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSprinting, typedOther.isSprinting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsInVehicle()).compareTo(typedOther.isSetIsInVehicle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsInVehicle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isInVehicle, typedOther.isInVehicle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXpToNextLevel()).compareTo(typedOther.isSetXpToNextLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXpToNextLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xpToNextLevel, typedOther.xpToNextLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOp()).compareTo(typedOther.isSetIsOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOp, typedOther.isOp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFoodLevel()).compareTo(typedOther.isSetFoodLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoodLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foodLevel, typedOther.foodLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHealth()).compareTo(typedOther.isSetHealth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHealth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.health, typedOther.health);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhaustion()).compareTo(typedOther.isSetExhaustion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhaustion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exhaustion, typedOther.exhaustion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstPlayed()).compareTo(typedOther.isSetFirstPlayed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstPlayed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstPlayed, typedOther.firstPlayed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPlayed()).compareTo(typedOther.isSetLastPlayed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPlayed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPlayed, typedOther.lastPlayed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBanned()).compareTo(typedOther.isSetIsBanned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBanned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBanned, typedOther.isBanned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsWhitelisted()).compareTo(typedOther.isSetIsWhitelisted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsWhitelisted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isWhitelisted, typedOther.isWhitelisted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInventory()).compareTo(typedOther.isSetInventory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInventory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inventory, typedOther.inventory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevelProgress()).compareTo(typedOther.isSetLevelProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevelProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.levelProgress, typedOther.levelProgress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(typedOther.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, typedOther.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Player(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gamemode:");
    if (this.gamemode == null) {
      sb.append("null");
    } else {
      sb.append(this.gamemode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSleeping:");
    sb.append(this.isSleeping);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSneaking:");
    sb.append(this.isSneaking);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSprinting:");
    sb.append(this.isSprinting);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isInVehicle:");
    sb.append(this.isInVehicle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("xpToNextLevel:");
    sb.append(this.xpToNextLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isOp:");
    sb.append(this.isOp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foodLevel:");
    sb.append(this.foodLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("health:");
    sb.append(this.health);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exhaustion:");
    sb.append(this.exhaustion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstPlayed:");
    sb.append(this.firstPlayed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastPlayed:");
    sb.append(this.lastPlayed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isBanned:");
    sb.append(this.isBanned);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isWhitelisted:");
    sb.append(this.isWhitelisted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inventory:");
    if (this.inventory == null) {
      sb.append("null");
    } else {
      sb.append(this.inventory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("levelProgress:");
    sb.append(this.levelProgress);
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlayerStandardSchemeFactory implements SchemeFactory {
    public PlayerStandardScheme getScheme() {
      return new PlayerStandardScheme();
    }
  }

  private static class PlayerStandardScheme extends StandardScheme<Player> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Player struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GAMEMODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gamemode = GameMode.findByValue(iprot.readI32());
              struct.setGamemodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_SLEEPING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSleeping = iprot.readBool();
              struct.setIsSleepingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_SNEAKING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSneaking = iprot.readBool();
              struct.setIsSneakingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_SPRINTING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSprinting = iprot.readBool();
              struct.setIsSprintingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_IN_VEHICLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isInVehicle = iprot.readBool();
              struct.setIsInVehicleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // XP_TO_NEXT_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.xpToNextLevel = iprot.readI64();
              struct.setXpToNextLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOp = iprot.readBool();
              struct.setIsOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FOOD_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foodLevel = iprot.readI32();
              struct.setFoodLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HEALTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.health = iprot.readI32();
              struct.setHealthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EXHAUSTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exhaustion = iprot.readDouble();
              struct.setExhaustionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FIRST_PLAYED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.firstPlayed = iprot.readI64();
              struct.setFirstPlayedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LAST_PLAYED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastPlayed = iprot.readI64();
              struct.setLastPlayedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // IS_BANNED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isBanned = iprot.readBool();
              struct.setIsBannedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IS_WHITELISTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isWhitelisted = iprot.readBool();
              struct.setIsWhitelistedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // INVENTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.inventory = new PlayerInventory();
              struct.inventory.read(iprot);
              struct.setInventoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LEVEL_PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.levelProgress = iprot.readDouble();
              struct.setLevelProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Player struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.gamemode != null) {
        oprot.writeFieldBegin(GAMEMODE_FIELD_DESC);
        oprot.writeI32(struct.gamemode.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_SLEEPING_FIELD_DESC);
      oprot.writeBool(struct.isSleeping);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SNEAKING_FIELD_DESC);
      oprot.writeBool(struct.isSneaking);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SPRINTING_FIELD_DESC);
      oprot.writeBool(struct.isSprinting);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_IN_VEHICLE_FIELD_DESC);
      oprot.writeBool(struct.isInVehicle);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(XP_TO_NEXT_LEVEL_FIELD_DESC);
      oprot.writeI64(struct.xpToNextLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(struct.level);
      oprot.writeFieldEnd();
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_OP_FIELD_DESC);
      oprot.writeBool(struct.isOp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FOOD_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.foodLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEALTH_FIELD_DESC);
      oprot.writeI32(struct.health);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXHAUSTION_FIELD_DESC);
      oprot.writeDouble(struct.exhaustion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIRST_PLAYED_FIELD_DESC);
      oprot.writeI64(struct.firstPlayed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_PLAYED_FIELD_DESC);
      oprot.writeI64(struct.lastPlayed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_BANNED_FIELD_DESC);
      oprot.writeBool(struct.isBanned);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_WHITELISTED_FIELD_DESC);
      oprot.writeBool(struct.isWhitelisted);
      oprot.writeFieldEnd();
      if (struct.inventory != null) {
        oprot.writeFieldBegin(INVENTORY_FIELD_DESC);
        struct.inventory.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEVEL_PROGRESS_FIELD_DESC);
      oprot.writeDouble(struct.levelProgress);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlayerTupleSchemeFactory implements SchemeFactory {
    public PlayerTupleScheme getScheme() {
      return new PlayerTupleScheme();
    }
  }

  private static class PlayerTupleScheme extends TupleScheme<Player> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Player struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetGamemode()) {
        optionals.set(1);
      }
      if (struct.isSetIsSleeping()) {
        optionals.set(2);
      }
      if (struct.isSetIsSneaking()) {
        optionals.set(3);
      }
      if (struct.isSetIsSprinting()) {
        optionals.set(4);
      }
      if (struct.isSetIsInVehicle()) {
        optionals.set(5);
      }
      if (struct.isSetXpToNextLevel()) {
        optionals.set(6);
      }
      if (struct.isSetLevel()) {
        optionals.set(7);
      }
      if (struct.isSetIp()) {
        optionals.set(8);
      }
      if (struct.isSetIsOp()) {
        optionals.set(9);
      }
      if (struct.isSetFoodLevel()) {
        optionals.set(10);
      }
      if (struct.isSetHealth()) {
        optionals.set(11);
      }
      if (struct.isSetExhaustion()) {
        optionals.set(12);
      }
      if (struct.isSetFirstPlayed()) {
        optionals.set(13);
      }
      if (struct.isSetLastPlayed()) {
        optionals.set(14);
      }
      if (struct.isSetIsBanned()) {
        optionals.set(15);
      }
      if (struct.isSetIsWhitelisted()) {
        optionals.set(16);
      }
      if (struct.isSetInventory()) {
        optionals.set(17);
      }
      if (struct.isSetLevelProgress()) {
        optionals.set(18);
      }
      if (struct.isSetPort()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetGamemode()) {
        oprot.writeI32(struct.gamemode.getValue());
      }
      if (struct.isSetIsSleeping()) {
        oprot.writeBool(struct.isSleeping);
      }
      if (struct.isSetIsSneaking()) {
        oprot.writeBool(struct.isSneaking);
      }
      if (struct.isSetIsSprinting()) {
        oprot.writeBool(struct.isSprinting);
      }
      if (struct.isSetIsInVehicle()) {
        oprot.writeBool(struct.isInVehicle);
      }
      if (struct.isSetXpToNextLevel()) {
        oprot.writeI64(struct.xpToNextLevel);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetIsOp()) {
        oprot.writeBool(struct.isOp);
      }
      if (struct.isSetFoodLevel()) {
        oprot.writeI32(struct.foodLevel);
      }
      if (struct.isSetHealth()) {
        oprot.writeI32(struct.health);
      }
      if (struct.isSetExhaustion()) {
        oprot.writeDouble(struct.exhaustion);
      }
      if (struct.isSetFirstPlayed()) {
        oprot.writeI64(struct.firstPlayed);
      }
      if (struct.isSetLastPlayed()) {
        oprot.writeI64(struct.lastPlayed);
      }
      if (struct.isSetIsBanned()) {
        oprot.writeBool(struct.isBanned);
      }
      if (struct.isSetIsWhitelisted()) {
        oprot.writeBool(struct.isWhitelisted);
      }
      if (struct.isSetInventory()) {
        struct.inventory.write(oprot);
      }
      if (struct.isSetLevelProgress()) {
        oprot.writeDouble(struct.levelProgress);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Player struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gamemode = GameMode.findByValue(iprot.readI32());
        struct.setGamemodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isSleeping = iprot.readBool();
        struct.setIsSleepingIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isSneaking = iprot.readBool();
        struct.setIsSneakingIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isSprinting = iprot.readBool();
        struct.setIsSprintingIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isInVehicle = iprot.readBool();
        struct.setIsInVehicleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.xpToNextLevel = iprot.readI64();
        struct.setXpToNextLevelIsSet(true);
      }
      if (incoming.get(7)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isOp = iprot.readBool();
        struct.setIsOpIsSet(true);
      }
      if (incoming.get(10)) {
        struct.foodLevel = iprot.readI32();
        struct.setFoodLevelIsSet(true);
      }
      if (incoming.get(11)) {
        struct.health = iprot.readI32();
        struct.setHealthIsSet(true);
      }
      if (incoming.get(12)) {
        struct.exhaustion = iprot.readDouble();
        struct.setExhaustionIsSet(true);
      }
      if (incoming.get(13)) {
        struct.firstPlayed = iprot.readI64();
        struct.setFirstPlayedIsSet(true);
      }
      if (incoming.get(14)) {
        struct.lastPlayed = iprot.readI64();
        struct.setLastPlayedIsSet(true);
      }
      if (incoming.get(15)) {
        struct.isBanned = iprot.readBool();
        struct.setIsBannedIsSet(true);
      }
      if (incoming.get(16)) {
        struct.isWhitelisted = iprot.readBool();
        struct.setIsWhitelistedIsSet(true);
      }
      if (incoming.get(17)) {
        struct.inventory = new PlayerInventory();
        struct.inventory.read(iprot);
        struct.setInventoryIsSet(true);
      }
      if (incoming.get(18)) {
        struct.levelProgress = iprot.readDouble();
        struct.setLevelProgressIsSet(true);
      }
      if (incoming.get(19)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
    }
  }

}

