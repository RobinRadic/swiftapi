/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.phybros.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Represents an offline player (or one that has never joined this server)
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-7-31")
public class OfflinePlayer implements org.apache.thrift.TBase<OfflinePlayer, OfflinePlayer._Fields>, java.io.Serializable, Cloneable, Comparable<OfflinePlayer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OfflinePlayer");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FIRST_PLAYED_FIELD_DESC = new org.apache.thrift.protocol.TField("firstPlayed", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_PLAYED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPlayed", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField IS_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("isOp", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IS_BANNED_FIELD_DESC = new org.apache.thrift.protocol.TField("isBanned", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField IS_WHITELISTED_FIELD_DESC = new org.apache.thrift.protocol.TField("isWhitelisted", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField PLAYER_FIELD_DESC = new org.apache.thrift.protocol.TField("player", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField HAS_PLAYED_BEFORE_FIELD_DESC = new org.apache.thrift.protocol.TField("hasPlayedBefore", org.apache.thrift.protocol.TType.BOOL, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OfflinePlayerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OfflinePlayerTupleSchemeFactory());
  }

  /**
   * The player's name
   */
  public String name; // required
  /**
   * The time/date the the player first joined (UNIX-timestamp style). 0 if never.
   */
  public long firstPlayed; // required
  /**
   * The time/date the the player last joined (UNIX-timestamp style) 0 if never.
   */
  public long lastPlayed; // required
  /**
   * If the player is currently opped
   */
  public boolean isOp; // required
  /**
   * If the player is currently banned from the server
   */
  public boolean isBanned; // required
  /**
   * If the player is currently on the server's whitelist
   */
  public boolean isWhitelisted; // required
  /**
   * If the player is online, more information is held in this Player object
   */
  public Player player; // required
  /**
   * If the player has joined the server at least once before now
   */
  public boolean hasPlayedBefore; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The player's name
     */
    NAME((short)1, "name"),
    /**
     * The time/date the the player first joined (UNIX-timestamp style). 0 if never.
     */
    FIRST_PLAYED((short)2, "firstPlayed"),
    /**
     * The time/date the the player last joined (UNIX-timestamp style) 0 if never.
     */
    LAST_PLAYED((short)3, "lastPlayed"),
    /**
     * If the player is currently opped
     */
    IS_OP((short)4, "isOp"),
    /**
     * If the player is currently banned from the server
     */
    IS_BANNED((short)5, "isBanned"),
    /**
     * If the player is currently on the server's whitelist
     */
    IS_WHITELISTED((short)6, "isWhitelisted"),
    /**
     * If the player is online, more information is held in this Player object
     */
    PLAYER((short)7, "player"),
    /**
     * If the player has joined the server at least once before now
     */
    HAS_PLAYED_BEFORE((short)8, "hasPlayedBefore");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // FIRST_PLAYED
          return FIRST_PLAYED;
        case 3: // LAST_PLAYED
          return LAST_PLAYED;
        case 4: // IS_OP
          return IS_OP;
        case 5: // IS_BANNED
          return IS_BANNED;
        case 6: // IS_WHITELISTED
          return IS_WHITELISTED;
        case 7: // PLAYER
          return PLAYER;
        case 8: // HAS_PLAYED_BEFORE
          return HAS_PLAYED_BEFORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIRSTPLAYED_ISSET_ID = 0;
  private static final int __LASTPLAYED_ISSET_ID = 1;
  private static final int __ISOP_ISSET_ID = 2;
  private static final int __ISBANNED_ISSET_ID = 3;
  private static final int __ISWHITELISTED_ISSET_ID = 4;
  private static final int __HASPLAYEDBEFORE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIRST_PLAYED, new org.apache.thrift.meta_data.FieldMetaData("firstPlayed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_PLAYED, new org.apache.thrift.meta_data.FieldMetaData("lastPlayed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_OP, new org.apache.thrift.meta_data.FieldMetaData("isOp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_BANNED, new org.apache.thrift.meta_data.FieldMetaData("isBanned", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_WHITELISTED, new org.apache.thrift.meta_data.FieldMetaData("isWhitelisted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PLAYER, new org.apache.thrift.meta_data.FieldMetaData("player", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Player.class)));
    tmpMap.put(_Fields.HAS_PLAYED_BEFORE, new org.apache.thrift.meta_data.FieldMetaData("hasPlayedBefore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OfflinePlayer.class, metaDataMap);
  }

  public OfflinePlayer() {
  }

  public OfflinePlayer(
    String name,
    long firstPlayed,
    long lastPlayed,
    boolean isOp,
    boolean isBanned,
    boolean isWhitelisted,
    Player player,
    boolean hasPlayedBefore)
  {
    this();
    this.name = name;
    this.firstPlayed = firstPlayed;
    setFirstPlayedIsSet(true);
    this.lastPlayed = lastPlayed;
    setLastPlayedIsSet(true);
    this.isOp = isOp;
    setIsOpIsSet(true);
    this.isBanned = isBanned;
    setIsBannedIsSet(true);
    this.isWhitelisted = isWhitelisted;
    setIsWhitelistedIsSet(true);
    this.player = player;
    this.hasPlayedBefore = hasPlayedBefore;
    setHasPlayedBeforeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OfflinePlayer(OfflinePlayer other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.firstPlayed = other.firstPlayed;
    this.lastPlayed = other.lastPlayed;
    this.isOp = other.isOp;
    this.isBanned = other.isBanned;
    this.isWhitelisted = other.isWhitelisted;
    if (other.isSetPlayer()) {
      this.player = new Player(other.player);
    }
    this.hasPlayedBefore = other.hasPlayedBefore;
  }

  public OfflinePlayer deepCopy() {
    return new OfflinePlayer(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setFirstPlayedIsSet(false);
    this.firstPlayed = 0;
    setLastPlayedIsSet(false);
    this.lastPlayed = 0;
    setIsOpIsSet(false);
    this.isOp = false;
    setIsBannedIsSet(false);
    this.isBanned = false;
    setIsWhitelistedIsSet(false);
    this.isWhitelisted = false;
    this.player = null;
    setHasPlayedBeforeIsSet(false);
    this.hasPlayedBefore = false;
  }

  /**
   * The player's name
   */
  public String getName() {
    return this.name;
  }

  /**
   * The player's name
   */
  public OfflinePlayer setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * The time/date the the player first joined (UNIX-timestamp style). 0 if never.
   */
  public long getFirstPlayed() {
    return this.firstPlayed;
  }

  /**
   * The time/date the the player first joined (UNIX-timestamp style). 0 if never.
   */
  public OfflinePlayer setFirstPlayed(long firstPlayed) {
    this.firstPlayed = firstPlayed;
    setFirstPlayedIsSet(true);
    return this;
  }

  public void unsetFirstPlayed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTPLAYED_ISSET_ID);
  }

  /** Returns true if field firstPlayed is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstPlayed() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTPLAYED_ISSET_ID);
  }

  public void setFirstPlayedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTPLAYED_ISSET_ID, value);
  }

  /**
   * The time/date the the player last joined (UNIX-timestamp style) 0 if never.
   */
  public long getLastPlayed() {
    return this.lastPlayed;
  }

  /**
   * The time/date the the player last joined (UNIX-timestamp style) 0 if never.
   */
  public OfflinePlayer setLastPlayed(long lastPlayed) {
    this.lastPlayed = lastPlayed;
    setLastPlayedIsSet(true);
    return this;
  }

  public void unsetLastPlayed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPLAYED_ISSET_ID);
  }

  /** Returns true if field lastPlayed is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPlayed() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPLAYED_ISSET_ID);
  }

  public void setLastPlayedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPLAYED_ISSET_ID, value);
  }

  /**
   * If the player is currently opped
   */
  public boolean isIsOp() {
    return this.isOp;
  }

  /**
   * If the player is currently opped
   */
  public OfflinePlayer setIsOp(boolean isOp) {
    this.isOp = isOp;
    setIsOpIsSet(true);
    return this;
  }

  public void unsetIsOp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISOP_ISSET_ID);
  }

  /** Returns true if field isOp is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOp() {
    return EncodingUtils.testBit(__isset_bitfield, __ISOP_ISSET_ID);
  }

  public void setIsOpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISOP_ISSET_ID, value);
  }

  /**
   * If the player is currently banned from the server
   */
  public boolean isIsBanned() {
    return this.isBanned;
  }

  /**
   * If the player is currently banned from the server
   */
  public OfflinePlayer setIsBanned(boolean isBanned) {
    this.isBanned = isBanned;
    setIsBannedIsSet(true);
    return this;
  }

  public void unsetIsBanned() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBANNED_ISSET_ID);
  }

  /** Returns true if field isBanned is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBanned() {
    return EncodingUtils.testBit(__isset_bitfield, __ISBANNED_ISSET_ID);
  }

  public void setIsBannedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBANNED_ISSET_ID, value);
  }

  /**
   * If the player is currently on the server's whitelist
   */
  public boolean isIsWhitelisted() {
    return this.isWhitelisted;
  }

  /**
   * If the player is currently on the server's whitelist
   */
  public OfflinePlayer setIsWhitelisted(boolean isWhitelisted) {
    this.isWhitelisted = isWhitelisted;
    setIsWhitelistedIsSet(true);
    return this;
  }

  public void unsetIsWhitelisted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISWHITELISTED_ISSET_ID);
  }

  /** Returns true if field isWhitelisted is set (has been assigned a value) and false otherwise */
  public boolean isSetIsWhitelisted() {
    return EncodingUtils.testBit(__isset_bitfield, __ISWHITELISTED_ISSET_ID);
  }

  public void setIsWhitelistedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISWHITELISTED_ISSET_ID, value);
  }

  /**
   * If the player is online, more information is held in this Player object
   */
  public Player getPlayer() {
    return this.player;
  }

  /**
   * If the player is online, more information is held in this Player object
   */
  public OfflinePlayer setPlayer(Player player) {
    this.player = player;
    return this;
  }

  public void unsetPlayer() {
    this.player = null;
  }

  /** Returns true if field player is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayer() {
    return this.player != null;
  }

  public void setPlayerIsSet(boolean value) {
    if (!value) {
      this.player = null;
    }
  }

  /**
   * If the player has joined the server at least once before now
   */
  public boolean isHasPlayedBefore() {
    return this.hasPlayedBefore;
  }

  /**
   * If the player has joined the server at least once before now
   */
  public OfflinePlayer setHasPlayedBefore(boolean hasPlayedBefore) {
    this.hasPlayedBefore = hasPlayedBefore;
    setHasPlayedBeforeIsSet(true);
    return this;
  }

  public void unsetHasPlayedBefore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASPLAYEDBEFORE_ISSET_ID);
  }

  /** Returns true if field hasPlayedBefore is set (has been assigned a value) and false otherwise */
  public boolean isSetHasPlayedBefore() {
    return EncodingUtils.testBit(__isset_bitfield, __HASPLAYEDBEFORE_ISSET_ID);
  }

  public void setHasPlayedBeforeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASPLAYEDBEFORE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case FIRST_PLAYED:
      if (value == null) {
        unsetFirstPlayed();
      } else {
        setFirstPlayed((Long)value);
      }
      break;

    case LAST_PLAYED:
      if (value == null) {
        unsetLastPlayed();
      } else {
        setLastPlayed((Long)value);
      }
      break;

    case IS_OP:
      if (value == null) {
        unsetIsOp();
      } else {
        setIsOp((Boolean)value);
      }
      break;

    case IS_BANNED:
      if (value == null) {
        unsetIsBanned();
      } else {
        setIsBanned((Boolean)value);
      }
      break;

    case IS_WHITELISTED:
      if (value == null) {
        unsetIsWhitelisted();
      } else {
        setIsWhitelisted((Boolean)value);
      }
      break;

    case PLAYER:
      if (value == null) {
        unsetPlayer();
      } else {
        setPlayer((Player)value);
      }
      break;

    case HAS_PLAYED_BEFORE:
      if (value == null) {
        unsetHasPlayedBefore();
      } else {
        setHasPlayedBefore((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case FIRST_PLAYED:
      return Long.valueOf(getFirstPlayed());

    case LAST_PLAYED:
      return Long.valueOf(getLastPlayed());

    case IS_OP:
      return Boolean.valueOf(isIsOp());

    case IS_BANNED:
      return Boolean.valueOf(isIsBanned());

    case IS_WHITELISTED:
      return Boolean.valueOf(isIsWhitelisted());

    case PLAYER:
      return getPlayer();

    case HAS_PLAYED_BEFORE:
      return Boolean.valueOf(isHasPlayedBefore());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case FIRST_PLAYED:
      return isSetFirstPlayed();
    case LAST_PLAYED:
      return isSetLastPlayed();
    case IS_OP:
      return isSetIsOp();
    case IS_BANNED:
      return isSetIsBanned();
    case IS_WHITELISTED:
      return isSetIsWhitelisted();
    case PLAYER:
      return isSetPlayer();
    case HAS_PLAYED_BEFORE:
      return isSetHasPlayedBefore();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OfflinePlayer)
      return this.equals((OfflinePlayer)that);
    return false;
  }

  public boolean equals(OfflinePlayer that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_firstPlayed = true;
    boolean that_present_firstPlayed = true;
    if (this_present_firstPlayed || that_present_firstPlayed) {
      if (!(this_present_firstPlayed && that_present_firstPlayed))
        return false;
      if (this.firstPlayed != that.firstPlayed)
        return false;
    }

    boolean this_present_lastPlayed = true;
    boolean that_present_lastPlayed = true;
    if (this_present_lastPlayed || that_present_lastPlayed) {
      if (!(this_present_lastPlayed && that_present_lastPlayed))
        return false;
      if (this.lastPlayed != that.lastPlayed)
        return false;
    }

    boolean this_present_isOp = true;
    boolean that_present_isOp = true;
    if (this_present_isOp || that_present_isOp) {
      if (!(this_present_isOp && that_present_isOp))
        return false;
      if (this.isOp != that.isOp)
        return false;
    }

    boolean this_present_isBanned = true;
    boolean that_present_isBanned = true;
    if (this_present_isBanned || that_present_isBanned) {
      if (!(this_present_isBanned && that_present_isBanned))
        return false;
      if (this.isBanned != that.isBanned)
        return false;
    }

    boolean this_present_isWhitelisted = true;
    boolean that_present_isWhitelisted = true;
    if (this_present_isWhitelisted || that_present_isWhitelisted) {
      if (!(this_present_isWhitelisted && that_present_isWhitelisted))
        return false;
      if (this.isWhitelisted != that.isWhitelisted)
        return false;
    }

    boolean this_present_player = true && this.isSetPlayer();
    boolean that_present_player = true && that.isSetPlayer();
    if (this_present_player || that_present_player) {
      if (!(this_present_player && that_present_player))
        return false;
      if (!this.player.equals(that.player))
        return false;
    }

    boolean this_present_hasPlayedBefore = true;
    boolean that_present_hasPlayedBefore = true;
    if (this_present_hasPlayedBefore || that_present_hasPlayedBefore) {
      if (!(this_present_hasPlayedBefore && that_present_hasPlayedBefore))
        return false;
      if (this.hasPlayedBefore != that.hasPlayedBefore)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_firstPlayed = true;
    list.add(present_firstPlayed);
    if (present_firstPlayed)
      list.add(firstPlayed);

    boolean present_lastPlayed = true;
    list.add(present_lastPlayed);
    if (present_lastPlayed)
      list.add(lastPlayed);

    boolean present_isOp = true;
    list.add(present_isOp);
    if (present_isOp)
      list.add(isOp);

    boolean present_isBanned = true;
    list.add(present_isBanned);
    if (present_isBanned)
      list.add(isBanned);

    boolean present_isWhitelisted = true;
    list.add(present_isWhitelisted);
    if (present_isWhitelisted)
      list.add(isWhitelisted);

    boolean present_player = true && (isSetPlayer());
    list.add(present_player);
    if (present_player)
      list.add(player);

    boolean present_hasPlayedBefore = true;
    list.add(present_hasPlayedBefore);
    if (present_hasPlayedBefore)
      list.add(hasPlayedBefore);

    return list.hashCode();
  }

  @Override
  public int compareTo(OfflinePlayer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstPlayed()).compareTo(other.isSetFirstPlayed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstPlayed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstPlayed, other.firstPlayed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPlayed()).compareTo(other.isSetLastPlayed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPlayed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPlayed, other.lastPlayed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOp()).compareTo(other.isSetIsOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOp, other.isOp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBanned()).compareTo(other.isSetIsBanned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBanned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBanned, other.isBanned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsWhitelisted()).compareTo(other.isSetIsWhitelisted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsWhitelisted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isWhitelisted, other.isWhitelisted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayer()).compareTo(other.isSetPlayer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.player, other.player);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasPlayedBefore()).compareTo(other.isSetHasPlayedBefore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasPlayedBefore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasPlayedBefore, other.hasPlayedBefore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OfflinePlayer(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstPlayed:");
    sb.append(this.firstPlayed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastPlayed:");
    sb.append(this.lastPlayed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isOp:");
    sb.append(this.isOp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isBanned:");
    sb.append(this.isBanned);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isWhitelisted:");
    sb.append(this.isWhitelisted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("player:");
    if (this.player == null) {
      sb.append("null");
    } else {
      sb.append(this.player);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasPlayedBefore:");
    sb.append(this.hasPlayedBefore);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (player != null) {
      player.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OfflinePlayerStandardSchemeFactory implements SchemeFactory {
    public OfflinePlayerStandardScheme getScheme() {
      return new OfflinePlayerStandardScheme();
    }
  }

  private static class OfflinePlayerStandardScheme extends StandardScheme<OfflinePlayer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OfflinePlayer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIRST_PLAYED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.firstPlayed = iprot.readI64();
              struct.setFirstPlayedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_PLAYED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastPlayed = iprot.readI64();
              struct.setLastPlayedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOp = iprot.readBool();
              struct.setIsOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_BANNED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isBanned = iprot.readBool();
              struct.setIsBannedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_WHITELISTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isWhitelisted = iprot.readBool();
              struct.setIsWhitelistedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PLAYER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.player = new Player();
              struct.player.read(iprot);
              struct.setPlayerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HAS_PLAYED_BEFORE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasPlayedBefore = iprot.readBool();
              struct.setHasPlayedBeforeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OfflinePlayer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FIRST_PLAYED_FIELD_DESC);
      oprot.writeI64(struct.firstPlayed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_PLAYED_FIELD_DESC);
      oprot.writeI64(struct.lastPlayed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_OP_FIELD_DESC);
      oprot.writeBool(struct.isOp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_BANNED_FIELD_DESC);
      oprot.writeBool(struct.isBanned);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_WHITELISTED_FIELD_DESC);
      oprot.writeBool(struct.isWhitelisted);
      oprot.writeFieldEnd();
      if (struct.player != null) {
        oprot.writeFieldBegin(PLAYER_FIELD_DESC);
        struct.player.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HAS_PLAYED_BEFORE_FIELD_DESC);
      oprot.writeBool(struct.hasPlayedBefore);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OfflinePlayerTupleSchemeFactory implements SchemeFactory {
    public OfflinePlayerTupleScheme getScheme() {
      return new OfflinePlayerTupleScheme();
    }
  }

  private static class OfflinePlayerTupleScheme extends TupleScheme<OfflinePlayer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OfflinePlayer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetFirstPlayed()) {
        optionals.set(1);
      }
      if (struct.isSetLastPlayed()) {
        optionals.set(2);
      }
      if (struct.isSetIsOp()) {
        optionals.set(3);
      }
      if (struct.isSetIsBanned()) {
        optionals.set(4);
      }
      if (struct.isSetIsWhitelisted()) {
        optionals.set(5);
      }
      if (struct.isSetPlayer()) {
        optionals.set(6);
      }
      if (struct.isSetHasPlayedBefore()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetFirstPlayed()) {
        oprot.writeI64(struct.firstPlayed);
      }
      if (struct.isSetLastPlayed()) {
        oprot.writeI64(struct.lastPlayed);
      }
      if (struct.isSetIsOp()) {
        oprot.writeBool(struct.isOp);
      }
      if (struct.isSetIsBanned()) {
        oprot.writeBool(struct.isBanned);
      }
      if (struct.isSetIsWhitelisted()) {
        oprot.writeBool(struct.isWhitelisted);
      }
      if (struct.isSetPlayer()) {
        struct.player.write(oprot);
      }
      if (struct.isSetHasPlayedBefore()) {
        oprot.writeBool(struct.hasPlayedBefore);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OfflinePlayer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.firstPlayed = iprot.readI64();
        struct.setFirstPlayedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastPlayed = iprot.readI64();
        struct.setLastPlayedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isOp = iprot.readBool();
        struct.setIsOpIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isBanned = iprot.readBool();
        struct.setIsBannedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isWhitelisted = iprot.readBool();
        struct.setIsWhitelistedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.player = new Player();
        struct.player.read(iprot);
        struct.setPlayerIsSet(true);
      }
      if (incoming.get(7)) {
        struct.hasPlayedBefore = iprot.readBool();
        struct.setHasPlayedBeforeIsSet(true);
      }
    }
  }

}

