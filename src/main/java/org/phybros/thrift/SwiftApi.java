/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.phybros.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SwiftApi {

  public interface Iface {

    /**
     * Add an item to a player's inventory
     * 
     * @since 1.5
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param playerName
     *            The name of the player
     * 
     * @param item
     *            The item to add, in the form of an ItemStack
     * 
     * @return boolean true on success, false on failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the player was not found
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param playerName
     * @param item
     */
    public boolean addItemToInventory(String authString, String playerName, ItemStack item) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Add a Player to the server's whitelist. The player can be offline, or
     * be a player that has never played on this server before. If the player is
     * already on the whitelist, this method does nothing.
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the player to add to the whitelist
     * 
     * @return boolean true on success, false on failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the player was not found
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param name
     */
    public boolean addToWhitelist(String authString, String name) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Broadcasts a message to all players on the server
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param message
     *            The message to send
     * 
     * @return boolean true on success false on serious failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param message
     */
    public boolean announce(String authString, String message) throws EAuthException, org.apache.thrift.TException;

    /**
     * Permanently ban a player from the server by name. The player can be
     * offline, or have never played on this server before
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the player to ban
     * 
     * @return boolean true on success false on failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the player was not found
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param name
     */
    public boolean ban(String authString, String name) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Permanently ban a specific IP from connecting to this server
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param ip
     *            The IP address to ban
     * 
     * @return boolean true on success false on failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param ip
     */
    public boolean banIp(String authString, String ip) throws EAuthException, org.apache.thrift.TException;

    /**
     * Takes "op" (operator) privileges away from a player. If the player is
     * already deopped, then this method does nothing
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The player to deop
     * 
     * @param notifyPlayer
     *            Whether or not to tell the player that they were deopped
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the Player was not found
     * 
     * @return String the current bukkit version
     * 
     * 
     * @param authString
     * @param name
     * @param notifyPlayer
     */
    public boolean deOp(String authString, String name, boolean notifyPlayer) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Gets the IP addresses currently banned from joining this server
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return List<String> The banned IPs
     * 
     * 
     * @param authString
     */
    public List<String> getBannedIps(String authString) throws EAuthException, org.apache.thrift.TException;

    /**
     * Gets the players currently banned from this server
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return List<OfflinePlayer> The banned players
     * 
     * 
     * @param authString
     */
    public List<OfflinePlayer> getBannedPlayers(String authString) throws EAuthException, org.apache.thrift.TException;

    /**
     * Get the current bukkit version
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return String the current bukkit version
     * 
     * 
     * @param authString
     */
    public String getBukkitVersion(String authString) throws EAuthException, org.apache.thrift.TException;

    /**
     * Get the last 500 console messages or console messages since a given timestamp (up to 500)
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param since
     *            A unix timestamp (with milliseconds). This will limit the results
     * 		  to console lines that were out output after the given time
     * 
     * @return boolean true on success false on serious failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param since
     */
    public List<ConsoleLine> getConsoleMessages(String authString, long since) throws EAuthException, org.apache.thrift.TException;

    /**
     * Gets the contents of a file.
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param fileName
     *            The file to get. The fileName is relative to the server
     *            root. This method cannot get the contents of any file
     *            outside the server root.
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the file could not be read or does not exist
     * 
     * @return string the contents of the file
     * 
     * 
     * @param authString
     * @param fileName
     */
    public String getFileContents(String authString, String fileName) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Get an offline player. This method will always return an
     * OfflinePlayer object, even if the requested player has never played
     * before.
     * 
     * The "hasPlayedBefore" property can be checked to determine if the
     * requested player has ever played on this particular server before
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The player to get
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the player could not be found
     * 
     * @return OfflinePlayer the requested player.
     * 
     * 
     * @param authString
     * @param name
     */
    public OfflinePlayer getOfflinePlayer(String authString, String name) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Gets a list of all players who have ever played on this server
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return List<OfflinePlayer> A list of all players who have ever
     *         played on this server
     * 
     * 
     * @param authString
     */
    public List<OfflinePlayer> getOfflinePlayers(String authString) throws EAuthException, org.apache.thrift.TException;

    /**
     * Gets a list of all players who are Opped on this server
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return List<OfflinePlayer> A list of all players who are opped
     *         on this server
     * 
     * 
     * @param authString
     */
    public List<OfflinePlayer> getOps(String authString) throws EAuthException, org.apache.thrift.TException;

    /**
     * Get a player by name. Throws an EDataException if the player is
     * offline, or doesn't exist
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the player to try and get
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the player is not online, or does not exist
     * 
     * @return Player The requested player. If the player could not be
     *         found, and EDataException is thrown
     * @see org.phybros.thrift.SwiftApi.Iface#getPlugins(java.lang.String)
     * 
     * @param authString
     * @param name
     */
    public Player getPlayer(String authString, String name) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Get all online Players
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return List<Player> A list of all currently online players
     * 
     * @param authString
     */
    public List<Player> getPlayers(String authString) throws EAuthException, org.apache.thrift.TException;

    /**
     * Get a loaded server plugin by name
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the plugin to try and get
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EDataException
     *             If the requested plugin was not found
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return Plugin The plugin
     * 
     * 
     * @param authString
     * @param name
     */
    public Plugin getPlugin(String authString, String name) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * This method returns a list of all the currently loaded plugins on the
     * server.
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return List<Plugin> A list of the plugins on the server
     * 
     * 
     * @param authString
     */
    public List<Plugin> getPlugins(String authString) throws EAuthException, org.apache.thrift.TException;

    /**
     * Get the current server. This object contains a large amount of information
     * about the server including player and plugin information, as well as configuration
     * information.
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     * 		  If something thrifty went wrong
     * 
     * @throws EAuthException
     * 		  If the method call was not correctly authenticated
     * 
     * @return Server An object containing server information
     * 
     * 
     * @param authString
     */
    public Server getServer(String authString) throws EAuthException, org.apache.thrift.TException;

    /**
     * Get the current server version
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return String the version of the server
     * 
     * 
     * @param authString
     */
    public String getServerVersion(String authString) throws EAuthException, org.apache.thrift.TException;

    /**
     * Gets all whitelisted players
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return List<OfflinePlayer> The players on the server's whitelist
     * 
     * 
     * @param authString
     */
    public List<OfflinePlayer> getWhitelist(String authString) throws EAuthException, org.apache.thrift.TException;

    /**
     * Gets a specific world by name
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param worldName
     *            The name of the World to get
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the requested world could not be found
     * 
     * @return World The requested world
     * 
     * 
     * @param authString
     * @param worldName
     */
    public World getWorld(String authString, String worldName) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Gets all the worlds on the server
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return List<World> the worlds on the server
     * 
     * 
     * @param authString
     */
    public List<World> getWorlds(String authString) throws EAuthException, org.apache.thrift.TException;

    /**
     * This method will download and install (copy/unzip) a plugin from a given URL
     * onto the server.
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param downloadUrl
     *            The URL of the file to be downloaded
     * 
     * @param md5
     *            The md5 hash of the file that is being downloaded
     * 
     * @return boolean true on success false on failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If something went wrong during the file download, or the
     *             computed hash does not match the provided hash or the
     *             requested plugin could not be found.
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param downloadUrl
     * @param md5
     */
    public boolean installPlugin(String authString, String downloadUrl, String md5) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Kick a currently online Player from the server with a specific custom
     * message
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the player to kick
     * 
     * @param message
     *            The message to send to the player after they have been
     *            kicked
     * 
     * @return boolean true on success false on failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the player is not currently online
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param name
     * @param message
     */
    public boolean kick(String authString, String name, String message) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Makes a player "op" (operator). If the player is already op, then
     * this method does nothing
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the player to op
     *            
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the Player was not found
     * 
     * @return String the current bukkit version
     * 
     * 
     * @param authString
     * @param name
     * @param notifyPlayer
     */
    public boolean op(String authString, String name, boolean notifyPlayer) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Just a keepalive method to test authentication in clients
     * 
     * @param authString
     *            The authentication hash
     * 
     * @return boolean true on success false on serious failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     */
    public boolean ping(String authString) throws EAuthException, org.apache.thrift.TException;

    /**
     * Reloads the server. This call does not send a response (for obvious reasons)
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param authString
     */
    public void reloadServer(String authString) throws org.apache.thrift.TException;

    /**
     * Removes an item from a player's inventory
     * 
     * @since 1.5
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param playerName
     *            The name of the player
     * 
     * @param itemIndex
     *            The 0-based index of the item being removed
     * 
     * @return boolean true on success, false on failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the player was not found
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param playerName
     * @param itemIndex
     */
    public boolean removeInventoryItem(String authString, String playerName, int itemIndex) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Remove a Player from the server's whitelist. The player can be offline, or
     * be a player that has never played on this server before. If the player is not
     * already on the whitelist, this method does nothing.
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the player to remove from the whitelist
     * 
     * @return boolean true on success, false on failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the player was not found
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param name
     */
    public boolean removeFromWhitelist(String authString, String name) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * This method will replace a given plugin's .jar file with a new
     * version downloaded from the internet. The old .jar file will be moved
     * to a folder inside the SwiftApi Plugin's data folder called
     * "oldPlugins/" under the name
     * <PluginName>_<Version>-<Timestamp>.jar.old
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param pluginName
     *            The name of the plugin to replace
     * 
     * @param downloadUrl
     *            The URL of the file to be downloaded
     * 
     * @param md5
     *            The md5 hash of the file that is being downloaded
     * 
     * @return boolean true on success false on failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If something went wrong during the file download, or the
     *             computed hash does not match the provided hash or the
     *             requested plugin could not be found.
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param pluginName
     * @param downloadUrl
     * @param md5
     */
    public boolean replacePlugin(String authString, String pluginName, String downloadUrl, String md5) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Executes a command as if you were to type it directly into the console
     * (no need for leading forward-slash "/").
     * 
     * @param authString
     *            The authentication hash
     * 
     * @return boolean true on success false on serious failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param command
     */
    public void runConsoleCommand(String authString, String command) throws org.apache.thrift.TException;

    /**
     * Saves the specified world to disk
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param worldName
     *            The name of the world to save
     * 
     * @return boolean true on success false on serious failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the specified world could not be found
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param worldName
     */
    public boolean saveWorld(String authString, String worldName) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Sets the contents of a file.
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param fileName
     *            The file to set. The fileName is relative to /plugins. This
     * 		  method cannot set the contents of any file outside /plugins.
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the file could not be opened or does not exist
     * 
     * @return bool true on success, else false
     * 
     * 
     * @param authString
     * @param fileName
     * @param fileContents
     */
    public boolean setFileContents(String authString, String fileName, String fileContents) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Sets the gamemode of a player
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the player
     * 
     * @param mode
     *            The GameMode to set the player to
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the Player was not found
     * 
     * @return String the current bukkit version
     * 
     * 
     * @param authString
     * @param name
     * @param mode
     */
    public boolean setGameMode(String authString, String name, GameMode mode) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Set's the isPVP property on the specified world
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param worldName
     *            The name of the world to set the pvp flag for
     * 
     * @param isPvp
     *            The value to set the isPVP property to
     * 
     * @return boolean true on success false on serious failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the specified world could not be found
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param worldName
     * @param isPvp
     */
    public boolean setPvp(String authString, String worldName, boolean isPvp) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Set's the hasStorm property on the specified world (i.e. makes it rain)
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param worldName
     *            The name of the world to set the storm for
     * 
     * @param hasStorm
     *            The value to set the storm property to
     * 
     * @return boolean true on success false on serious failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the specified world could not be found
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param worldName
     * @param hasStorm
     */
    public boolean setStorm(String authString, String worldName, boolean hasStorm) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Set's the isThundering property on the specified world
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param worldName
     *            The name of the world to set the storm for
     * 
     * @param isThundering
     *            The value to set the isThundering property to
     * 
     * @return boolean true on success false on serious failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the specified world could not be found
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param worldName
     * @param isThundering
     */
    public boolean setThundering(String authString, String worldName, boolean isThundering) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Sets the time on the specified world or all worlds if a
     * blank world name is specified.
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param worldName
     *            The name of the world to set the time for. If a blank
     * 		  world name is specified, the time is set for all worlds.
     * 
     * @param time
     *            The value to set the world time
     * 
     * @return boolean true on success false on serious failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the specified world could not be found
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param worldName
     * @param time
     */
    public boolean setWorldTime(String authString, String worldName, long time) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Un ban a specific player
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the player to unban
     * 
     * @return boolean true on success false on failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the player was not found
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param name
     */
    public boolean unBan(String authString, String name) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Un ban a specific IP from connecting to this server
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param ip
     *            The IP to unban
     * 
     * @return boolean true on success false on failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param ip
     */
    public boolean unBanIp(String authString, String ip) throws EAuthException, EDataException, org.apache.thrift.TException;

    /**
     * Replaces an item in the player's inventory with the supplied one
     * 
     * @since 1.5
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param playerName
     *            The name of the player
     * 
     * @param item
     *            The item that will replace the item specified by itemIndex, in the form of an ItemStack
     * 
     * @param itemIndex
     *            The 0-based index of which item to replace in the inventory
     * 
     * @return boolean true on success, false on failure
     * 
     * @throws EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws EDataException
     *             If the player was not found
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param playerName
     * @param item
     * @param itemIndex
     */
    public boolean updateInventoryItem(String authString, String playerName, ItemStack item, int itemIndex) throws EAuthException, EDataException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addItemToInventory(String authString, String playerName, ItemStack item, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addToWhitelist(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void announce(String authString, String message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ban(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void banIp(String authString, String ip, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deOp(String authString, String name, boolean notifyPlayer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBannedIps(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBannedPlayers(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBukkitVersion(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getConsoleMessages(String authString, long since, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFileContents(String authString, String fileName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOfflinePlayer(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOfflinePlayers(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOps(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPlayer(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPlayers(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPlugin(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPlugins(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getServer(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getServerVersion(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWhitelist(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWorld(String authString, String worldName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWorlds(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void installPlugin(String authString, String downloadUrl, String md5, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void kick(String authString, String name, String message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void op(String authString, String name, boolean notifyPlayer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ping(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reloadServer(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeInventoryItem(String authString, String playerName, int itemIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeFromWhitelist(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void replacePlugin(String authString, String pluginName, String downloadUrl, String md5, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void runConsoleCommand(String authString, String command, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveWorld(String authString, String worldName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setFileContents(String authString, String fileName, String fileContents, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setGameMode(String authString, String name, GameMode mode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setPvp(String authString, String worldName, boolean isPvp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setStorm(String authString, String worldName, boolean hasStorm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setThundering(String authString, String worldName, boolean isThundering, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setWorldTime(String authString, String worldName, long time, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unBan(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unBanIp(String authString, String ip, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateInventoryItem(String authString, String playerName, ItemStack item, int itemIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean addItemToInventory(String authString, String playerName, ItemStack item) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_addItemToInventory(authString, playerName, item);
      return recv_addItemToInventory();
    }

    public void send_addItemToInventory(String authString, String playerName, ItemStack item) throws org.apache.thrift.TException
    {
      addItemToInventory_args args = new addItemToInventory_args();
      args.setAuthString(authString);
      args.setPlayerName(playerName);
      args.setItem(item);
      sendBase("addItemToInventory", args);
    }

    public boolean recv_addItemToInventory() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      addItemToInventory_result result = new addItemToInventory_result();
      receiveBase(result, "addItemToInventory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addItemToInventory failed: unknown result");
    }

    public boolean addToWhitelist(String authString, String name) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_addToWhitelist(authString, name);
      return recv_addToWhitelist();
    }

    public void send_addToWhitelist(String authString, String name) throws org.apache.thrift.TException
    {
      addToWhitelist_args args = new addToWhitelist_args();
      args.setAuthString(authString);
      args.setName(name);
      sendBase("addToWhitelist", args);
    }

    public boolean recv_addToWhitelist() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      addToWhitelist_result result = new addToWhitelist_result();
      receiveBase(result, "addToWhitelist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addToWhitelist failed: unknown result");
    }

    public boolean announce(String authString, String message) throws EAuthException, org.apache.thrift.TException
    {
      send_announce(authString, message);
      return recv_announce();
    }

    public void send_announce(String authString, String message) throws org.apache.thrift.TException
    {
      announce_args args = new announce_args();
      args.setAuthString(authString);
      args.setMessage(message);
      sendBase("announce", args);
    }

    public boolean recv_announce() throws EAuthException, org.apache.thrift.TException
    {
      announce_result result = new announce_result();
      receiveBase(result, "announce");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "announce failed: unknown result");
    }

    public boolean ban(String authString, String name) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_ban(authString, name);
      return recv_ban();
    }

    public void send_ban(String authString, String name) throws org.apache.thrift.TException
    {
      ban_args args = new ban_args();
      args.setAuthString(authString);
      args.setName(name);
      sendBase("ban", args);
    }

    public boolean recv_ban() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      ban_result result = new ban_result();
      receiveBase(result, "ban");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ban failed: unknown result");
    }

    public boolean banIp(String authString, String ip) throws EAuthException, org.apache.thrift.TException
    {
      send_banIp(authString, ip);
      return recv_banIp();
    }

    public void send_banIp(String authString, String ip) throws org.apache.thrift.TException
    {
      banIp_args args = new banIp_args();
      args.setAuthString(authString);
      args.setIp(ip);
      sendBase("banIp", args);
    }

    public boolean recv_banIp() throws EAuthException, org.apache.thrift.TException
    {
      banIp_result result = new banIp_result();
      receiveBase(result, "banIp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "banIp failed: unknown result");
    }

    public boolean deOp(String authString, String name, boolean notifyPlayer) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_deOp(authString, name, notifyPlayer);
      return recv_deOp();
    }

    public void send_deOp(String authString, String name, boolean notifyPlayer) throws org.apache.thrift.TException
    {
      deOp_args args = new deOp_args();
      args.setAuthString(authString);
      args.setName(name);
      args.setNotifyPlayer(notifyPlayer);
      sendBase("deOp", args);
    }

    public boolean recv_deOp() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      deOp_result result = new deOp_result();
      receiveBase(result, "deOp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deOp failed: unknown result");
    }

    public List<String> getBannedIps(String authString) throws EAuthException, org.apache.thrift.TException
    {
      send_getBannedIps(authString);
      return recv_getBannedIps();
    }

    public void send_getBannedIps(String authString) throws org.apache.thrift.TException
    {
      getBannedIps_args args = new getBannedIps_args();
      args.setAuthString(authString);
      sendBase("getBannedIps", args);
    }

    public List<String> recv_getBannedIps() throws EAuthException, org.apache.thrift.TException
    {
      getBannedIps_result result = new getBannedIps_result();
      receiveBase(result, "getBannedIps");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBannedIps failed: unknown result");
    }

    public List<OfflinePlayer> getBannedPlayers(String authString) throws EAuthException, org.apache.thrift.TException
    {
      send_getBannedPlayers(authString);
      return recv_getBannedPlayers();
    }

    public void send_getBannedPlayers(String authString) throws org.apache.thrift.TException
    {
      getBannedPlayers_args args = new getBannedPlayers_args();
      args.setAuthString(authString);
      sendBase("getBannedPlayers", args);
    }

    public List<OfflinePlayer> recv_getBannedPlayers() throws EAuthException, org.apache.thrift.TException
    {
      getBannedPlayers_result result = new getBannedPlayers_result();
      receiveBase(result, "getBannedPlayers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBannedPlayers failed: unknown result");
    }

    public String getBukkitVersion(String authString) throws EAuthException, org.apache.thrift.TException
    {
      send_getBukkitVersion(authString);
      return recv_getBukkitVersion();
    }

    public void send_getBukkitVersion(String authString) throws org.apache.thrift.TException
    {
      getBukkitVersion_args args = new getBukkitVersion_args();
      args.setAuthString(authString);
      sendBase("getBukkitVersion", args);
    }

    public String recv_getBukkitVersion() throws EAuthException, org.apache.thrift.TException
    {
      getBukkitVersion_result result = new getBukkitVersion_result();
      receiveBase(result, "getBukkitVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBukkitVersion failed: unknown result");
    }

    public List<ConsoleLine> getConsoleMessages(String authString, long since) throws EAuthException, org.apache.thrift.TException
    {
      send_getConsoleMessages(authString, since);
      return recv_getConsoleMessages();
    }

    public void send_getConsoleMessages(String authString, long since) throws org.apache.thrift.TException
    {
      getConsoleMessages_args args = new getConsoleMessages_args();
      args.setAuthString(authString);
      args.setSince(since);
      sendBase("getConsoleMessages", args);
    }

    public List<ConsoleLine> recv_getConsoleMessages() throws EAuthException, org.apache.thrift.TException
    {
      getConsoleMessages_result result = new getConsoleMessages_result();
      receiveBase(result, "getConsoleMessages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getConsoleMessages failed: unknown result");
    }

    public String getFileContents(String authString, String fileName) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_getFileContents(authString, fileName);
      return recv_getFileContents();
    }

    public void send_getFileContents(String authString, String fileName) throws org.apache.thrift.TException
    {
      getFileContents_args args = new getFileContents_args();
      args.setAuthString(authString);
      args.setFileName(fileName);
      sendBase("getFileContents", args);
    }

    public String recv_getFileContents() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      getFileContents_result result = new getFileContents_result();
      receiveBase(result, "getFileContents");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFileContents failed: unknown result");
    }

    public OfflinePlayer getOfflinePlayer(String authString, String name) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_getOfflinePlayer(authString, name);
      return recv_getOfflinePlayer();
    }

    public void send_getOfflinePlayer(String authString, String name) throws org.apache.thrift.TException
    {
      getOfflinePlayer_args args = new getOfflinePlayer_args();
      args.setAuthString(authString);
      args.setName(name);
      sendBase("getOfflinePlayer", args);
    }

    public OfflinePlayer recv_getOfflinePlayer() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      getOfflinePlayer_result result = new getOfflinePlayer_result();
      receiveBase(result, "getOfflinePlayer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOfflinePlayer failed: unknown result");
    }

    public List<OfflinePlayer> getOfflinePlayers(String authString) throws EAuthException, org.apache.thrift.TException
    {
      send_getOfflinePlayers(authString);
      return recv_getOfflinePlayers();
    }

    public void send_getOfflinePlayers(String authString) throws org.apache.thrift.TException
    {
      getOfflinePlayers_args args = new getOfflinePlayers_args();
      args.setAuthString(authString);
      sendBase("getOfflinePlayers", args);
    }

    public List<OfflinePlayer> recv_getOfflinePlayers() throws EAuthException, org.apache.thrift.TException
    {
      getOfflinePlayers_result result = new getOfflinePlayers_result();
      receiveBase(result, "getOfflinePlayers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOfflinePlayers failed: unknown result");
    }

    public List<OfflinePlayer> getOps(String authString) throws EAuthException, org.apache.thrift.TException
    {
      send_getOps(authString);
      return recv_getOps();
    }

    public void send_getOps(String authString) throws org.apache.thrift.TException
    {
      getOps_args args = new getOps_args();
      args.setAuthString(authString);
      sendBase("getOps", args);
    }

    public List<OfflinePlayer> recv_getOps() throws EAuthException, org.apache.thrift.TException
    {
      getOps_result result = new getOps_result();
      receiveBase(result, "getOps");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOps failed: unknown result");
    }

    public Player getPlayer(String authString, String name) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_getPlayer(authString, name);
      return recv_getPlayer();
    }

    public void send_getPlayer(String authString, String name) throws org.apache.thrift.TException
    {
      getPlayer_args args = new getPlayer_args();
      args.setAuthString(authString);
      args.setName(name);
      sendBase("getPlayer", args);
    }

    public Player recv_getPlayer() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      getPlayer_result result = new getPlayer_result();
      receiveBase(result, "getPlayer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPlayer failed: unknown result");
    }

    public List<Player> getPlayers(String authString) throws EAuthException, org.apache.thrift.TException
    {
      send_getPlayers(authString);
      return recv_getPlayers();
    }

    public void send_getPlayers(String authString) throws org.apache.thrift.TException
    {
      getPlayers_args args = new getPlayers_args();
      args.setAuthString(authString);
      sendBase("getPlayers", args);
    }

    public List<Player> recv_getPlayers() throws EAuthException, org.apache.thrift.TException
    {
      getPlayers_result result = new getPlayers_result();
      receiveBase(result, "getPlayers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPlayers failed: unknown result");
    }

    public Plugin getPlugin(String authString, String name) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_getPlugin(authString, name);
      return recv_getPlugin();
    }

    public void send_getPlugin(String authString, String name) throws org.apache.thrift.TException
    {
      getPlugin_args args = new getPlugin_args();
      args.setAuthString(authString);
      args.setName(name);
      sendBase("getPlugin", args);
    }

    public Plugin recv_getPlugin() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      getPlugin_result result = new getPlugin_result();
      receiveBase(result, "getPlugin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPlugin failed: unknown result");
    }

    public List<Plugin> getPlugins(String authString) throws EAuthException, org.apache.thrift.TException
    {
      send_getPlugins(authString);
      return recv_getPlugins();
    }

    public void send_getPlugins(String authString) throws org.apache.thrift.TException
    {
      getPlugins_args args = new getPlugins_args();
      args.setAuthString(authString);
      sendBase("getPlugins", args);
    }

    public List<Plugin> recv_getPlugins() throws EAuthException, org.apache.thrift.TException
    {
      getPlugins_result result = new getPlugins_result();
      receiveBase(result, "getPlugins");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPlugins failed: unknown result");
    }

    public Server getServer(String authString) throws EAuthException, org.apache.thrift.TException
    {
      send_getServer(authString);
      return recv_getServer();
    }

    public void send_getServer(String authString) throws org.apache.thrift.TException
    {
      getServer_args args = new getServer_args();
      args.setAuthString(authString);
      sendBase("getServer", args);
    }

    public Server recv_getServer() throws EAuthException, org.apache.thrift.TException
    {
      getServer_result result = new getServer_result();
      receiveBase(result, "getServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getServer failed: unknown result");
    }

    public String getServerVersion(String authString) throws EAuthException, org.apache.thrift.TException
    {
      send_getServerVersion(authString);
      return recv_getServerVersion();
    }

    public void send_getServerVersion(String authString) throws org.apache.thrift.TException
    {
      getServerVersion_args args = new getServerVersion_args();
      args.setAuthString(authString);
      sendBase("getServerVersion", args);
    }

    public String recv_getServerVersion() throws EAuthException, org.apache.thrift.TException
    {
      getServerVersion_result result = new getServerVersion_result();
      receiveBase(result, "getServerVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getServerVersion failed: unknown result");
    }

    public List<OfflinePlayer> getWhitelist(String authString) throws EAuthException, org.apache.thrift.TException
    {
      send_getWhitelist(authString);
      return recv_getWhitelist();
    }

    public void send_getWhitelist(String authString) throws org.apache.thrift.TException
    {
      getWhitelist_args args = new getWhitelist_args();
      args.setAuthString(authString);
      sendBase("getWhitelist", args);
    }

    public List<OfflinePlayer> recv_getWhitelist() throws EAuthException, org.apache.thrift.TException
    {
      getWhitelist_result result = new getWhitelist_result();
      receiveBase(result, "getWhitelist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWhitelist failed: unknown result");
    }

    public World getWorld(String authString, String worldName) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_getWorld(authString, worldName);
      return recv_getWorld();
    }

    public void send_getWorld(String authString, String worldName) throws org.apache.thrift.TException
    {
      getWorld_args args = new getWorld_args();
      args.setAuthString(authString);
      args.setWorldName(worldName);
      sendBase("getWorld", args);
    }

    public World recv_getWorld() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      getWorld_result result = new getWorld_result();
      receiveBase(result, "getWorld");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWorld failed: unknown result");
    }

    public List<World> getWorlds(String authString) throws EAuthException, org.apache.thrift.TException
    {
      send_getWorlds(authString);
      return recv_getWorlds();
    }

    public void send_getWorlds(String authString) throws org.apache.thrift.TException
    {
      getWorlds_args args = new getWorlds_args();
      args.setAuthString(authString);
      sendBase("getWorlds", args);
    }

    public List<World> recv_getWorlds() throws EAuthException, org.apache.thrift.TException
    {
      getWorlds_result result = new getWorlds_result();
      receiveBase(result, "getWorlds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWorlds failed: unknown result");
    }

    public boolean installPlugin(String authString, String downloadUrl, String md5) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_installPlugin(authString, downloadUrl, md5);
      return recv_installPlugin();
    }

    public void send_installPlugin(String authString, String downloadUrl, String md5) throws org.apache.thrift.TException
    {
      installPlugin_args args = new installPlugin_args();
      args.setAuthString(authString);
      args.setDownloadUrl(downloadUrl);
      args.setMd5(md5);
      sendBase("installPlugin", args);
    }

    public boolean recv_installPlugin() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      installPlugin_result result = new installPlugin_result();
      receiveBase(result, "installPlugin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "installPlugin failed: unknown result");
    }

    public boolean kick(String authString, String name, String message) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_kick(authString, name, message);
      return recv_kick();
    }

    public void send_kick(String authString, String name, String message) throws org.apache.thrift.TException
    {
      kick_args args = new kick_args();
      args.setAuthString(authString);
      args.setName(name);
      args.setMessage(message);
      sendBase("kick", args);
    }

    public boolean recv_kick() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      kick_result result = new kick_result();
      receiveBase(result, "kick");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "kick failed: unknown result");
    }

    public boolean op(String authString, String name, boolean notifyPlayer) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_op(authString, name, notifyPlayer);
      return recv_op();
    }

    public void send_op(String authString, String name, boolean notifyPlayer) throws org.apache.thrift.TException
    {
      op_args args = new op_args();
      args.setAuthString(authString);
      args.setName(name);
      args.setNotifyPlayer(notifyPlayer);
      sendBase("op", args);
    }

    public boolean recv_op() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      op_result result = new op_result();
      receiveBase(result, "op");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "op failed: unknown result");
    }

    public boolean ping(String authString) throws EAuthException, org.apache.thrift.TException
    {
      send_ping(authString);
      return recv_ping();
    }

    public void send_ping(String authString) throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      args.setAuthString(authString);
      sendBase("ping", args);
    }

    public boolean recv_ping() throws EAuthException, org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public void reloadServer(String authString) throws org.apache.thrift.TException
    {
      send_reloadServer(authString);
    }

    public void send_reloadServer(String authString) throws org.apache.thrift.TException
    {
      reloadServer_args args = new reloadServer_args();
      args.setAuthString(authString);
      sendBase("reloadServer", args);
    }

    public boolean removeInventoryItem(String authString, String playerName, int itemIndex) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_removeInventoryItem(authString, playerName, itemIndex);
      return recv_removeInventoryItem();
    }

    public void send_removeInventoryItem(String authString, String playerName, int itemIndex) throws org.apache.thrift.TException
    {
      removeInventoryItem_args args = new removeInventoryItem_args();
      args.setAuthString(authString);
      args.setPlayerName(playerName);
      args.setItemIndex(itemIndex);
      sendBase("removeInventoryItem", args);
    }

    public boolean recv_removeInventoryItem() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      removeInventoryItem_result result = new removeInventoryItem_result();
      receiveBase(result, "removeInventoryItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeInventoryItem failed: unknown result");
    }

    public boolean removeFromWhitelist(String authString, String name) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_removeFromWhitelist(authString, name);
      return recv_removeFromWhitelist();
    }

    public void send_removeFromWhitelist(String authString, String name) throws org.apache.thrift.TException
    {
      removeFromWhitelist_args args = new removeFromWhitelist_args();
      args.setAuthString(authString);
      args.setName(name);
      sendBase("removeFromWhitelist", args);
    }

    public boolean recv_removeFromWhitelist() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      removeFromWhitelist_result result = new removeFromWhitelist_result();
      receiveBase(result, "removeFromWhitelist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeFromWhitelist failed: unknown result");
    }

    public boolean replacePlugin(String authString, String pluginName, String downloadUrl, String md5) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_replacePlugin(authString, pluginName, downloadUrl, md5);
      return recv_replacePlugin();
    }

    public void send_replacePlugin(String authString, String pluginName, String downloadUrl, String md5) throws org.apache.thrift.TException
    {
      replacePlugin_args args = new replacePlugin_args();
      args.setAuthString(authString);
      args.setPluginName(pluginName);
      args.setDownloadUrl(downloadUrl);
      args.setMd5(md5);
      sendBase("replacePlugin", args);
    }

    public boolean recv_replacePlugin() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      replacePlugin_result result = new replacePlugin_result();
      receiveBase(result, "replacePlugin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "replacePlugin failed: unknown result");
    }

    public void runConsoleCommand(String authString, String command) throws org.apache.thrift.TException
    {
      send_runConsoleCommand(authString, command);
    }

    public void send_runConsoleCommand(String authString, String command) throws org.apache.thrift.TException
    {
      runConsoleCommand_args args = new runConsoleCommand_args();
      args.setAuthString(authString);
      args.setCommand(command);
      sendBase("runConsoleCommand", args);
    }

    public boolean saveWorld(String authString, String worldName) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_saveWorld(authString, worldName);
      return recv_saveWorld();
    }

    public void send_saveWorld(String authString, String worldName) throws org.apache.thrift.TException
    {
      saveWorld_args args = new saveWorld_args();
      args.setAuthString(authString);
      args.setWorldName(worldName);
      sendBase("saveWorld", args);
    }

    public boolean recv_saveWorld() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      saveWorld_result result = new saveWorld_result();
      receiveBase(result, "saveWorld");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveWorld failed: unknown result");
    }

    public boolean setFileContents(String authString, String fileName, String fileContents) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_setFileContents(authString, fileName, fileContents);
      return recv_setFileContents();
    }

    public void send_setFileContents(String authString, String fileName, String fileContents) throws org.apache.thrift.TException
    {
      setFileContents_args args = new setFileContents_args();
      args.setAuthString(authString);
      args.setFileName(fileName);
      args.setFileContents(fileContents);
      sendBase("setFileContents", args);
    }

    public boolean recv_setFileContents() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      setFileContents_result result = new setFileContents_result();
      receiveBase(result, "setFileContents");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setFileContents failed: unknown result");
    }

    public boolean setGameMode(String authString, String name, GameMode mode) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_setGameMode(authString, name, mode);
      return recv_setGameMode();
    }

    public void send_setGameMode(String authString, String name, GameMode mode) throws org.apache.thrift.TException
    {
      setGameMode_args args = new setGameMode_args();
      args.setAuthString(authString);
      args.setName(name);
      args.setMode(mode);
      sendBase("setGameMode", args);
    }

    public boolean recv_setGameMode() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      setGameMode_result result = new setGameMode_result();
      receiveBase(result, "setGameMode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setGameMode failed: unknown result");
    }

    public boolean setPvp(String authString, String worldName, boolean isPvp) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_setPvp(authString, worldName, isPvp);
      return recv_setPvp();
    }

    public void send_setPvp(String authString, String worldName, boolean isPvp) throws org.apache.thrift.TException
    {
      setPvp_args args = new setPvp_args();
      args.setAuthString(authString);
      args.setWorldName(worldName);
      args.setIsPvp(isPvp);
      sendBase("setPvp", args);
    }

    public boolean recv_setPvp() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      setPvp_result result = new setPvp_result();
      receiveBase(result, "setPvp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setPvp failed: unknown result");
    }

    public boolean setStorm(String authString, String worldName, boolean hasStorm) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_setStorm(authString, worldName, hasStorm);
      return recv_setStorm();
    }

    public void send_setStorm(String authString, String worldName, boolean hasStorm) throws org.apache.thrift.TException
    {
      setStorm_args args = new setStorm_args();
      args.setAuthString(authString);
      args.setWorldName(worldName);
      args.setHasStorm(hasStorm);
      sendBase("setStorm", args);
    }

    public boolean recv_setStorm() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      setStorm_result result = new setStorm_result();
      receiveBase(result, "setStorm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setStorm failed: unknown result");
    }

    public boolean setThundering(String authString, String worldName, boolean isThundering) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_setThundering(authString, worldName, isThundering);
      return recv_setThundering();
    }

    public void send_setThundering(String authString, String worldName, boolean isThundering) throws org.apache.thrift.TException
    {
      setThundering_args args = new setThundering_args();
      args.setAuthString(authString);
      args.setWorldName(worldName);
      args.setIsThundering(isThundering);
      sendBase("setThundering", args);
    }

    public boolean recv_setThundering() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      setThundering_result result = new setThundering_result();
      receiveBase(result, "setThundering");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setThundering failed: unknown result");
    }

    public boolean setWorldTime(String authString, String worldName, long time) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_setWorldTime(authString, worldName, time);
      return recv_setWorldTime();
    }

    public void send_setWorldTime(String authString, String worldName, long time) throws org.apache.thrift.TException
    {
      setWorldTime_args args = new setWorldTime_args();
      args.setAuthString(authString);
      args.setWorldName(worldName);
      args.setTime(time);
      sendBase("setWorldTime", args);
    }

    public boolean recv_setWorldTime() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      setWorldTime_result result = new setWorldTime_result();
      receiveBase(result, "setWorldTime");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setWorldTime failed: unknown result");
    }

    public boolean unBan(String authString, String name) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_unBan(authString, name);
      return recv_unBan();
    }

    public void send_unBan(String authString, String name) throws org.apache.thrift.TException
    {
      unBan_args args = new unBan_args();
      args.setAuthString(authString);
      args.setName(name);
      sendBase("unBan", args);
    }

    public boolean recv_unBan() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      unBan_result result = new unBan_result();
      receiveBase(result, "unBan");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unBan failed: unknown result");
    }

    public boolean unBanIp(String authString, String ip) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_unBanIp(authString, ip);
      return recv_unBanIp();
    }

    public void send_unBanIp(String authString, String ip) throws org.apache.thrift.TException
    {
      unBanIp_args args = new unBanIp_args();
      args.setAuthString(authString);
      args.setIp(ip);
      sendBase("unBanIp", args);
    }

    public boolean recv_unBanIp() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      unBanIp_result result = new unBanIp_result();
      receiveBase(result, "unBanIp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unBanIp failed: unknown result");
    }

    public boolean updateInventoryItem(String authString, String playerName, ItemStack item, int itemIndex) throws EAuthException, EDataException, org.apache.thrift.TException
    {
      send_updateInventoryItem(authString, playerName, item, itemIndex);
      return recv_updateInventoryItem();
    }

    public void send_updateInventoryItem(String authString, String playerName, ItemStack item, int itemIndex) throws org.apache.thrift.TException
    {
      updateInventoryItem_args args = new updateInventoryItem_args();
      args.setAuthString(authString);
      args.setPlayerName(playerName);
      args.setItem(item);
      args.setItemIndex(itemIndex);
      sendBase("updateInventoryItem", args);
    }

    public boolean recv_updateInventoryItem() throws EAuthException, EDataException, org.apache.thrift.TException
    {
      updateInventoryItem_result result = new updateInventoryItem_result();
      receiveBase(result, "updateInventoryItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateInventoryItem failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addItemToInventory(String authString, String playerName, ItemStack item, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addItemToInventory_call method_call = new addItemToInventory_call(authString, playerName, item, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addItemToInventory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String playerName;
      private ItemStack item;
      public addItemToInventory_call(String authString, String playerName, ItemStack item, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.playerName = playerName;
        this.item = item;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addItemToInventory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addItemToInventory_args args = new addItemToInventory_args();
        args.setAuthString(authString);
        args.setPlayerName(playerName);
        args.setItem(item);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addItemToInventory();
      }
    }

    public void addToWhitelist(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addToWhitelist_call method_call = new addToWhitelist_call(authString, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addToWhitelist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      public addToWhitelist_call(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addToWhitelist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addToWhitelist_args args = new addToWhitelist_args();
        args.setAuthString(authString);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addToWhitelist();
      }
    }

    public void announce(String authString, String message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      announce_call method_call = new announce_call(authString, message, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class announce_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String message;
      public announce_call(String authString, String message, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.message = message;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("announce", org.apache.thrift.protocol.TMessageType.CALL, 0));
        announce_args args = new announce_args();
        args.setAuthString(authString);
        args.setMessage(message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_announce();
      }
    }

    public void ban(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ban_call method_call = new ban_call(authString, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ban_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      public ban_call(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ban", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ban_args args = new ban_args();
        args.setAuthString(authString);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ban();
      }
    }

    public void banIp(String authString, String ip, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      banIp_call method_call = new banIp_call(authString, ip, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class banIp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String ip;
      public banIp_call(String authString, String ip, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.ip = ip;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("banIp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        banIp_args args = new banIp_args();
        args.setAuthString(authString);
        args.setIp(ip);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_banIp();
      }
    }

    public void deOp(String authString, String name, boolean notifyPlayer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deOp_call method_call = new deOp_call(authString, name, notifyPlayer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deOp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      private boolean notifyPlayer;
      public deOp_call(String authString, String name, boolean notifyPlayer, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
        this.notifyPlayer = notifyPlayer;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deOp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deOp_args args = new deOp_args();
        args.setAuthString(authString);
        args.setName(name);
        args.setNotifyPlayer(notifyPlayer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deOp();
      }
    }

    public void getBannedIps(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBannedIps_call method_call = new getBannedIps_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBannedIps_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getBannedIps_call(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBannedIps", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBannedIps_args args = new getBannedIps_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBannedIps();
      }
    }

    public void getBannedPlayers(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBannedPlayers_call method_call = new getBannedPlayers_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBannedPlayers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getBannedPlayers_call(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBannedPlayers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBannedPlayers_args args = new getBannedPlayers_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<OfflinePlayer> getResult() throws EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBannedPlayers();
      }
    }

    public void getBukkitVersion(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBukkitVersion_call method_call = new getBukkitVersion_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBukkitVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getBukkitVersion_call(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBukkitVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBukkitVersion_args args = new getBukkitVersion_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBukkitVersion();
      }
    }

    public void getConsoleMessages(String authString, long since, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getConsoleMessages_call method_call = new getConsoleMessages_call(authString, since, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getConsoleMessages_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private long since;
      public getConsoleMessages_call(String authString, long since, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.since = since;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getConsoleMessages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getConsoleMessages_args args = new getConsoleMessages_args();
        args.setAuthString(authString);
        args.setSince(since);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ConsoleLine> getResult() throws EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getConsoleMessages();
      }
    }

    public void getFileContents(String authString, String fileName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFileContents_call method_call = new getFileContents_call(authString, fileName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFileContents_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String fileName;
      public getFileContents_call(String authString, String fileName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.fileName = fileName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFileContents", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFileContents_args args = new getFileContents_args();
        args.setAuthString(authString);
        args.setFileName(fileName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFileContents();
      }
    }

    public void getOfflinePlayer(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOfflinePlayer_call method_call = new getOfflinePlayer_call(authString, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOfflinePlayer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      public getOfflinePlayer_call(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOfflinePlayer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOfflinePlayer_args args = new getOfflinePlayer_args();
        args.setAuthString(authString);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OfflinePlayer getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOfflinePlayer();
      }
    }

    public void getOfflinePlayers(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOfflinePlayers_call method_call = new getOfflinePlayers_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOfflinePlayers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getOfflinePlayers_call(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOfflinePlayers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOfflinePlayers_args args = new getOfflinePlayers_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<OfflinePlayer> getResult() throws EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOfflinePlayers();
      }
    }

    public void getOps(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOps_call method_call = new getOps_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOps_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getOps_call(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOps", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOps_args args = new getOps_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<OfflinePlayer> getResult() throws EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOps();
      }
    }

    public void getPlayer(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPlayer_call method_call = new getPlayer_call(authString, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPlayer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      public getPlayer_call(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPlayer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPlayer_args args = new getPlayer_args();
        args.setAuthString(authString);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Player getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPlayer();
      }
    }

    public void getPlayers(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPlayers_call method_call = new getPlayers_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPlayers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getPlayers_call(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPlayers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPlayers_args args = new getPlayers_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Player> getResult() throws EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPlayers();
      }
    }

    public void getPlugin(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPlugin_call method_call = new getPlugin_call(authString, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPlugin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      public getPlugin_call(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPlugin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPlugin_args args = new getPlugin_args();
        args.setAuthString(authString);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Plugin getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPlugin();
      }
    }

    public void getPlugins(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPlugins_call method_call = new getPlugins_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPlugins_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getPlugins_call(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPlugins", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPlugins_args args = new getPlugins_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Plugin> getResult() throws EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPlugins();
      }
    }

    public void getServer(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getServer_call method_call = new getServer_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getServer_call(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getServer_args args = new getServer_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Server getResult() throws EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getServer();
      }
    }

    public void getServerVersion(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getServerVersion_call method_call = new getServerVersion_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getServerVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getServerVersion_call(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getServerVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getServerVersion_args args = new getServerVersion_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getServerVersion();
      }
    }

    public void getWhitelist(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWhitelist_call method_call = new getWhitelist_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWhitelist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getWhitelist_call(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWhitelist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWhitelist_args args = new getWhitelist_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<OfflinePlayer> getResult() throws EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWhitelist();
      }
    }

    public void getWorld(String authString, String worldName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWorld_call method_call = new getWorld_call(authString, worldName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWorld_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String worldName;
      public getWorld_call(String authString, String worldName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.worldName = worldName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWorld", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWorld_args args = new getWorld_args();
        args.setAuthString(authString);
        args.setWorldName(worldName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public World getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWorld();
      }
    }

    public void getWorlds(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWorlds_call method_call = new getWorlds_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWorlds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getWorlds_call(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWorlds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWorlds_args args = new getWorlds_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<World> getResult() throws EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWorlds();
      }
    }

    public void installPlugin(String authString, String downloadUrl, String md5, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      installPlugin_call method_call = new installPlugin_call(authString, downloadUrl, md5, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class installPlugin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String downloadUrl;
      private String md5;
      public installPlugin_call(String authString, String downloadUrl, String md5, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.downloadUrl = downloadUrl;
        this.md5 = md5;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("installPlugin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        installPlugin_args args = new installPlugin_args();
        args.setAuthString(authString);
        args.setDownloadUrl(downloadUrl);
        args.setMd5(md5);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_installPlugin();
      }
    }

    public void kick(String authString, String name, String message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      kick_call method_call = new kick_call(authString, name, message, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class kick_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      private String message;
      public kick_call(String authString, String name, String message, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
        this.message = message;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("kick", org.apache.thrift.protocol.TMessageType.CALL, 0));
        kick_args args = new kick_args();
        args.setAuthString(authString);
        args.setName(name);
        args.setMessage(message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_kick();
      }
    }

    public void op(String authString, String name, boolean notifyPlayer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      op_call method_call = new op_call(authString, name, notifyPlayer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class op_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      private boolean notifyPlayer;
      public op_call(String authString, String name, boolean notifyPlayer, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
        this.notifyPlayer = notifyPlayer;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("op", org.apache.thrift.protocol.TMessageType.CALL, 0));
        op_args args = new op_args();
        args.setAuthString(authString);
        args.setName(name);
        args.setNotifyPlayer(notifyPlayer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_op();
      }
    }

    public void ping(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public ping_call(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void reloadServer(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reloadServer_call method_call = new reloadServer_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reloadServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public reloadServer_call(String authString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reloadServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reloadServer_args args = new reloadServer_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void removeInventoryItem(String authString, String playerName, int itemIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeInventoryItem_call method_call = new removeInventoryItem_call(authString, playerName, itemIndex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeInventoryItem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String playerName;
      private int itemIndex;
      public removeInventoryItem_call(String authString, String playerName, int itemIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.playerName = playerName;
        this.itemIndex = itemIndex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeInventoryItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeInventoryItem_args args = new removeInventoryItem_args();
        args.setAuthString(authString);
        args.setPlayerName(playerName);
        args.setItemIndex(itemIndex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeInventoryItem();
      }
    }

    public void removeFromWhitelist(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeFromWhitelist_call method_call = new removeFromWhitelist_call(authString, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeFromWhitelist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      public removeFromWhitelist_call(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeFromWhitelist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeFromWhitelist_args args = new removeFromWhitelist_args();
        args.setAuthString(authString);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeFromWhitelist();
      }
    }

    public void replacePlugin(String authString, String pluginName, String downloadUrl, String md5, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      replacePlugin_call method_call = new replacePlugin_call(authString, pluginName, downloadUrl, md5, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class replacePlugin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String pluginName;
      private String downloadUrl;
      private String md5;
      public replacePlugin_call(String authString, String pluginName, String downloadUrl, String md5, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.pluginName = pluginName;
        this.downloadUrl = downloadUrl;
        this.md5 = md5;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("replacePlugin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        replacePlugin_args args = new replacePlugin_args();
        args.setAuthString(authString);
        args.setPluginName(pluginName);
        args.setDownloadUrl(downloadUrl);
        args.setMd5(md5);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_replacePlugin();
      }
    }

    public void runConsoleCommand(String authString, String command, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      runConsoleCommand_call method_call = new runConsoleCommand_call(authString, command, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class runConsoleCommand_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String command;
      public runConsoleCommand_call(String authString, String command, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.authString = authString;
        this.command = command;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("runConsoleCommand", org.apache.thrift.protocol.TMessageType.CALL, 0));
        runConsoleCommand_args args = new runConsoleCommand_args();
        args.setAuthString(authString);
        args.setCommand(command);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void saveWorld(String authString, String worldName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveWorld_call method_call = new saveWorld_call(authString, worldName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveWorld_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String worldName;
      public saveWorld_call(String authString, String worldName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.worldName = worldName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveWorld", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveWorld_args args = new saveWorld_args();
        args.setAuthString(authString);
        args.setWorldName(worldName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveWorld();
      }
    }

    public void setFileContents(String authString, String fileName, String fileContents, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setFileContents_call method_call = new setFileContents_call(authString, fileName, fileContents, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setFileContents_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String fileName;
      private String fileContents;
      public setFileContents_call(String authString, String fileName, String fileContents, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.fileName = fileName;
        this.fileContents = fileContents;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setFileContents", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setFileContents_args args = new setFileContents_args();
        args.setAuthString(authString);
        args.setFileName(fileName);
        args.setFileContents(fileContents);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setFileContents();
      }
    }

    public void setGameMode(String authString, String name, GameMode mode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setGameMode_call method_call = new setGameMode_call(authString, name, mode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setGameMode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      private GameMode mode;
      public setGameMode_call(String authString, String name, GameMode mode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
        this.mode = mode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setGameMode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setGameMode_args args = new setGameMode_args();
        args.setAuthString(authString);
        args.setName(name);
        args.setMode(mode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setGameMode();
      }
    }

    public void setPvp(String authString, String worldName, boolean isPvp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPvp_call method_call = new setPvp_call(authString, worldName, isPvp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPvp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String worldName;
      private boolean isPvp;
      public setPvp_call(String authString, String worldName, boolean isPvp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.worldName = worldName;
        this.isPvp = isPvp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPvp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPvp_args args = new setPvp_args();
        args.setAuthString(authString);
        args.setWorldName(worldName);
        args.setIsPvp(isPvp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setPvp();
      }
    }

    public void setStorm(String authString, String worldName, boolean hasStorm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setStorm_call method_call = new setStorm_call(authString, worldName, hasStorm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setStorm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String worldName;
      private boolean hasStorm;
      public setStorm_call(String authString, String worldName, boolean hasStorm, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.worldName = worldName;
        this.hasStorm = hasStorm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setStorm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setStorm_args args = new setStorm_args();
        args.setAuthString(authString);
        args.setWorldName(worldName);
        args.setHasStorm(hasStorm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setStorm();
      }
    }

    public void setThundering(String authString, String worldName, boolean isThundering, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setThundering_call method_call = new setThundering_call(authString, worldName, isThundering, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setThundering_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String worldName;
      private boolean isThundering;
      public setThundering_call(String authString, String worldName, boolean isThundering, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.worldName = worldName;
        this.isThundering = isThundering;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setThundering", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setThundering_args args = new setThundering_args();
        args.setAuthString(authString);
        args.setWorldName(worldName);
        args.setIsThundering(isThundering);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setThundering();
      }
    }

    public void setWorldTime(String authString, String worldName, long time, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setWorldTime_call method_call = new setWorldTime_call(authString, worldName, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setWorldTime_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String worldName;
      private long time;
      public setWorldTime_call(String authString, String worldName, long time, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.worldName = worldName;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setWorldTime", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setWorldTime_args args = new setWorldTime_args();
        args.setAuthString(authString);
        args.setWorldName(worldName);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setWorldTime();
      }
    }

    public void unBan(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unBan_call method_call = new unBan_call(authString, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unBan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      public unBan_call(String authString, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unBan", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unBan_args args = new unBan_args();
        args.setAuthString(authString);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unBan();
      }
    }

    public void unBanIp(String authString, String ip, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unBanIp_call method_call = new unBanIp_call(authString, ip, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unBanIp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String ip;
      public unBanIp_call(String authString, String ip, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.ip = ip;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unBanIp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unBanIp_args args = new unBanIp_args();
        args.setAuthString(authString);
        args.setIp(ip);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unBanIp();
      }
    }

    public void updateInventoryItem(String authString, String playerName, ItemStack item, int itemIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateInventoryItem_call method_call = new updateInventoryItem_call(authString, playerName, item, itemIndex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateInventoryItem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String playerName;
      private ItemStack item;
      private int itemIndex;
      public updateInventoryItem_call(String authString, String playerName, ItemStack item, int itemIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.playerName = playerName;
        this.item = item;
        this.itemIndex = itemIndex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateInventoryItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateInventoryItem_args args = new updateInventoryItem_args();
        args.setAuthString(authString);
        args.setPlayerName(playerName);
        args.setItem(item);
        args.setItemIndex(itemIndex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EAuthException, EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateInventoryItem();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addItemToInventory", new addItemToInventory());
      processMap.put("addToWhitelist", new addToWhitelist());
      processMap.put("announce", new announce());
      processMap.put("ban", new ban());
      processMap.put("banIp", new banIp());
      processMap.put("deOp", new deOp());
      processMap.put("getBannedIps", new getBannedIps());
      processMap.put("getBannedPlayers", new getBannedPlayers());
      processMap.put("getBukkitVersion", new getBukkitVersion());
      processMap.put("getConsoleMessages", new getConsoleMessages());
      processMap.put("getFileContents", new getFileContents());
      processMap.put("getOfflinePlayer", new getOfflinePlayer());
      processMap.put("getOfflinePlayers", new getOfflinePlayers());
      processMap.put("getOps", new getOps());
      processMap.put("getPlayer", new getPlayer());
      processMap.put("getPlayers", new getPlayers());
      processMap.put("getPlugin", new getPlugin());
      processMap.put("getPlugins", new getPlugins());
      processMap.put("getServer", new getServer());
      processMap.put("getServerVersion", new getServerVersion());
      processMap.put("getWhitelist", new getWhitelist());
      processMap.put("getWorld", new getWorld());
      processMap.put("getWorlds", new getWorlds());
      processMap.put("installPlugin", new installPlugin());
      processMap.put("kick", new kick());
      processMap.put("op", new op());
      processMap.put("ping", new ping());
      processMap.put("reloadServer", new reloadServer());
      processMap.put("removeInventoryItem", new removeInventoryItem());
      processMap.put("removeFromWhitelist", new removeFromWhitelist());
      processMap.put("replacePlugin", new replacePlugin());
      processMap.put("runConsoleCommand", new runConsoleCommand());
      processMap.put("saveWorld", new saveWorld());
      processMap.put("setFileContents", new setFileContents());
      processMap.put("setGameMode", new setGameMode());
      processMap.put("setPvp", new setPvp());
      processMap.put("setStorm", new setStorm());
      processMap.put("setThundering", new setThundering());
      processMap.put("setWorldTime", new setWorldTime());
      processMap.put("unBan", new unBan());
      processMap.put("unBanIp", new unBanIp());
      processMap.put("updateInventoryItem", new updateInventoryItem());
      return processMap;
    }

    public static class addItemToInventory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addItemToInventory_args> {
      public addItemToInventory() {
        super("addItemToInventory");
      }

      public addItemToInventory_args getEmptyArgsInstance() {
        return new addItemToInventory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addItemToInventory_result getResult(I iface, addItemToInventory_args args) throws org.apache.thrift.TException {
        addItemToInventory_result result = new addItemToInventory_result();
        try {
          result.success = iface.addItemToInventory(args.authString, args.playerName, args.item);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class addToWhitelist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addToWhitelist_args> {
      public addToWhitelist() {
        super("addToWhitelist");
      }

      public addToWhitelist_args getEmptyArgsInstance() {
        return new addToWhitelist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addToWhitelist_result getResult(I iface, addToWhitelist_args args) throws org.apache.thrift.TException {
        addToWhitelist_result result = new addToWhitelist_result();
        try {
          result.success = iface.addToWhitelist(args.authString, args.name);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class announce<I extends Iface> extends org.apache.thrift.ProcessFunction<I, announce_args> {
      public announce() {
        super("announce");
      }

      public announce_args getEmptyArgsInstance() {
        return new announce_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public announce_result getResult(I iface, announce_args args) throws org.apache.thrift.TException {
        announce_result result = new announce_result();
        try {
          result.success = iface.announce(args.authString, args.message);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    public static class ban<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ban_args> {
      public ban() {
        super("ban");
      }

      public ban_args getEmptyArgsInstance() {
        return new ban_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ban_result getResult(I iface, ban_args args) throws org.apache.thrift.TException {
        ban_result result = new ban_result();
        try {
          result.success = iface.ban(args.authString, args.name);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class banIp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, banIp_args> {
      public banIp() {
        super("banIp");
      }

      public banIp_args getEmptyArgsInstance() {
        return new banIp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public banIp_result getResult(I iface, banIp_args args) throws org.apache.thrift.TException {
        banIp_result result = new banIp_result();
        try {
          result.success = iface.banIp(args.authString, args.ip);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    public static class deOp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deOp_args> {
      public deOp() {
        super("deOp");
      }

      public deOp_args getEmptyArgsInstance() {
        return new deOp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deOp_result getResult(I iface, deOp_args args) throws org.apache.thrift.TException {
        deOp_result result = new deOp_result();
        try {
          result.success = iface.deOp(args.authString, args.name, args.notifyPlayer);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class getBannedIps<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBannedIps_args> {
      public getBannedIps() {
        super("getBannedIps");
      }

      public getBannedIps_args getEmptyArgsInstance() {
        return new getBannedIps_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBannedIps_result getResult(I iface, getBannedIps_args args) throws org.apache.thrift.TException {
        getBannedIps_result result = new getBannedIps_result();
        try {
          result.success = iface.getBannedIps(args.authString);
        } catch (EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    public static class getBannedPlayers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBannedPlayers_args> {
      public getBannedPlayers() {
        super("getBannedPlayers");
      }

      public getBannedPlayers_args getEmptyArgsInstance() {
        return new getBannedPlayers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBannedPlayers_result getResult(I iface, getBannedPlayers_args args) throws org.apache.thrift.TException {
        getBannedPlayers_result result = new getBannedPlayers_result();
        try {
          result.success = iface.getBannedPlayers(args.authString);
        } catch (EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    public static class getBukkitVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBukkitVersion_args> {
      public getBukkitVersion() {
        super("getBukkitVersion");
      }

      public getBukkitVersion_args getEmptyArgsInstance() {
        return new getBukkitVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBukkitVersion_result getResult(I iface, getBukkitVersion_args args) throws org.apache.thrift.TException {
        getBukkitVersion_result result = new getBukkitVersion_result();
        try {
          result.success = iface.getBukkitVersion(args.authString);
        } catch (EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    public static class getConsoleMessages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getConsoleMessages_args> {
      public getConsoleMessages() {
        super("getConsoleMessages");
      }

      public getConsoleMessages_args getEmptyArgsInstance() {
        return new getConsoleMessages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getConsoleMessages_result getResult(I iface, getConsoleMessages_args args) throws org.apache.thrift.TException {
        getConsoleMessages_result result = new getConsoleMessages_result();
        try {
          result.success = iface.getConsoleMessages(args.authString, args.since);
        } catch (EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    public static class getFileContents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFileContents_args> {
      public getFileContents() {
        super("getFileContents");
      }

      public getFileContents_args getEmptyArgsInstance() {
        return new getFileContents_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFileContents_result getResult(I iface, getFileContents_args args) throws org.apache.thrift.TException {
        getFileContents_result result = new getFileContents_result();
        try {
          result.success = iface.getFileContents(args.authString, args.fileName);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class getOfflinePlayer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOfflinePlayer_args> {
      public getOfflinePlayer() {
        super("getOfflinePlayer");
      }

      public getOfflinePlayer_args getEmptyArgsInstance() {
        return new getOfflinePlayer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOfflinePlayer_result getResult(I iface, getOfflinePlayer_args args) throws org.apache.thrift.TException {
        getOfflinePlayer_result result = new getOfflinePlayer_result();
        try {
          result.success = iface.getOfflinePlayer(args.authString, args.name);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class getOfflinePlayers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOfflinePlayers_args> {
      public getOfflinePlayers() {
        super("getOfflinePlayers");
      }

      public getOfflinePlayers_args getEmptyArgsInstance() {
        return new getOfflinePlayers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOfflinePlayers_result getResult(I iface, getOfflinePlayers_args args) throws org.apache.thrift.TException {
        getOfflinePlayers_result result = new getOfflinePlayers_result();
        try {
          result.success = iface.getOfflinePlayers(args.authString);
        } catch (EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    public static class getOps<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOps_args> {
      public getOps() {
        super("getOps");
      }

      public getOps_args getEmptyArgsInstance() {
        return new getOps_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOps_result getResult(I iface, getOps_args args) throws org.apache.thrift.TException {
        getOps_result result = new getOps_result();
        try {
          result.success = iface.getOps(args.authString);
        } catch (EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    public static class getPlayer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPlayer_args> {
      public getPlayer() {
        super("getPlayer");
      }

      public getPlayer_args getEmptyArgsInstance() {
        return new getPlayer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPlayer_result getResult(I iface, getPlayer_args args) throws org.apache.thrift.TException {
        getPlayer_result result = new getPlayer_result();
        try {
          result.success = iface.getPlayer(args.authString, args.name);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class getPlayers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPlayers_args> {
      public getPlayers() {
        super("getPlayers");
      }

      public getPlayers_args getEmptyArgsInstance() {
        return new getPlayers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPlayers_result getResult(I iface, getPlayers_args args) throws org.apache.thrift.TException {
        getPlayers_result result = new getPlayers_result();
        try {
          result.success = iface.getPlayers(args.authString);
        } catch (EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    public static class getPlugin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPlugin_args> {
      public getPlugin() {
        super("getPlugin");
      }

      public getPlugin_args getEmptyArgsInstance() {
        return new getPlugin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPlugin_result getResult(I iface, getPlugin_args args) throws org.apache.thrift.TException {
        getPlugin_result result = new getPlugin_result();
        try {
          result.success = iface.getPlugin(args.authString, args.name);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class getPlugins<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPlugins_args> {
      public getPlugins() {
        super("getPlugins");
      }

      public getPlugins_args getEmptyArgsInstance() {
        return new getPlugins_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPlugins_result getResult(I iface, getPlugins_args args) throws org.apache.thrift.TException {
        getPlugins_result result = new getPlugins_result();
        try {
          result.success = iface.getPlugins(args.authString);
        } catch (EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    public static class getServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getServer_args> {
      public getServer() {
        super("getServer");
      }

      public getServer_args getEmptyArgsInstance() {
        return new getServer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getServer_result getResult(I iface, getServer_args args) throws org.apache.thrift.TException {
        getServer_result result = new getServer_result();
        try {
          result.success = iface.getServer(args.authString);
        } catch (EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    public static class getServerVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getServerVersion_args> {
      public getServerVersion() {
        super("getServerVersion");
      }

      public getServerVersion_args getEmptyArgsInstance() {
        return new getServerVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getServerVersion_result getResult(I iface, getServerVersion_args args) throws org.apache.thrift.TException {
        getServerVersion_result result = new getServerVersion_result();
        try {
          result.success = iface.getServerVersion(args.authString);
        } catch (EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    public static class getWhitelist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWhitelist_args> {
      public getWhitelist() {
        super("getWhitelist");
      }

      public getWhitelist_args getEmptyArgsInstance() {
        return new getWhitelist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWhitelist_result getResult(I iface, getWhitelist_args args) throws org.apache.thrift.TException {
        getWhitelist_result result = new getWhitelist_result();
        try {
          result.success = iface.getWhitelist(args.authString);
        } catch (EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    public static class getWorld<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWorld_args> {
      public getWorld() {
        super("getWorld");
      }

      public getWorld_args getEmptyArgsInstance() {
        return new getWorld_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWorld_result getResult(I iface, getWorld_args args) throws org.apache.thrift.TException {
        getWorld_result result = new getWorld_result();
        try {
          result.success = iface.getWorld(args.authString, args.worldName);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class getWorlds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWorlds_args> {
      public getWorlds() {
        super("getWorlds");
      }

      public getWorlds_args getEmptyArgsInstance() {
        return new getWorlds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWorlds_result getResult(I iface, getWorlds_args args) throws org.apache.thrift.TException {
        getWorlds_result result = new getWorlds_result();
        try {
          result.success = iface.getWorlds(args.authString);
        } catch (EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    public static class installPlugin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, installPlugin_args> {
      public installPlugin() {
        super("installPlugin");
      }

      public installPlugin_args getEmptyArgsInstance() {
        return new installPlugin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public installPlugin_result getResult(I iface, installPlugin_args args) throws org.apache.thrift.TException {
        installPlugin_result result = new installPlugin_result();
        try {
          result.success = iface.installPlugin(args.authString, args.downloadUrl, args.md5);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class kick<I extends Iface> extends org.apache.thrift.ProcessFunction<I, kick_args> {
      public kick() {
        super("kick");
      }

      public kick_args getEmptyArgsInstance() {
        return new kick_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public kick_result getResult(I iface, kick_args args) throws org.apache.thrift.TException {
        kick_result result = new kick_result();
        try {
          result.success = iface.kick(args.authString, args.name, args.message);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class op<I extends Iface> extends org.apache.thrift.ProcessFunction<I, op_args> {
      public op() {
        super("op");
      }

      public op_args getEmptyArgsInstance() {
        return new op_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public op_result getResult(I iface, op_args args) throws org.apache.thrift.TException {
        op_result result = new op_result();
        try {
          result.success = iface.op(args.authString, args.name, args.notifyPlayer);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        try {
          result.success = iface.ping(args.authString);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    public static class reloadServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reloadServer_args> {
      public reloadServer() {
        super("reloadServer");
      }

      public reloadServer_args getEmptyArgsInstance() {
        return new reloadServer_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, reloadServer_args args) throws org.apache.thrift.TException {
        iface.reloadServer(args.authString);
        return null;
      }
    }

    public static class removeInventoryItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeInventoryItem_args> {
      public removeInventoryItem() {
        super("removeInventoryItem");
      }

      public removeInventoryItem_args getEmptyArgsInstance() {
        return new removeInventoryItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeInventoryItem_result getResult(I iface, removeInventoryItem_args args) throws org.apache.thrift.TException {
        removeInventoryItem_result result = new removeInventoryItem_result();
        try {
          result.success = iface.removeInventoryItem(args.authString, args.playerName, args.itemIndex);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class removeFromWhitelist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeFromWhitelist_args> {
      public removeFromWhitelist() {
        super("removeFromWhitelist");
      }

      public removeFromWhitelist_args getEmptyArgsInstance() {
        return new removeFromWhitelist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeFromWhitelist_result getResult(I iface, removeFromWhitelist_args args) throws org.apache.thrift.TException {
        removeFromWhitelist_result result = new removeFromWhitelist_result();
        try {
          result.success = iface.removeFromWhitelist(args.authString, args.name);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class replacePlugin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, replacePlugin_args> {
      public replacePlugin() {
        super("replacePlugin");
      }

      public replacePlugin_args getEmptyArgsInstance() {
        return new replacePlugin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public replacePlugin_result getResult(I iface, replacePlugin_args args) throws org.apache.thrift.TException {
        replacePlugin_result result = new replacePlugin_result();
        try {
          result.success = iface.replacePlugin(args.authString, args.pluginName, args.downloadUrl, args.md5);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class runConsoleCommand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, runConsoleCommand_args> {
      public runConsoleCommand() {
        super("runConsoleCommand");
      }

      public runConsoleCommand_args getEmptyArgsInstance() {
        return new runConsoleCommand_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, runConsoleCommand_args args) throws org.apache.thrift.TException {
        iface.runConsoleCommand(args.authString, args.command);
        return null;
      }
    }

    public static class saveWorld<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveWorld_args> {
      public saveWorld() {
        super("saveWorld");
      }

      public saveWorld_args getEmptyArgsInstance() {
        return new saveWorld_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveWorld_result getResult(I iface, saveWorld_args args) throws org.apache.thrift.TException {
        saveWorld_result result = new saveWorld_result();
        try {
          result.success = iface.saveWorld(args.authString, args.worldName);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class setFileContents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setFileContents_args> {
      public setFileContents() {
        super("setFileContents");
      }

      public setFileContents_args getEmptyArgsInstance() {
        return new setFileContents_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setFileContents_result getResult(I iface, setFileContents_args args) throws org.apache.thrift.TException {
        setFileContents_result result = new setFileContents_result();
        try {
          result.success = iface.setFileContents(args.authString, args.fileName, args.fileContents);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class setGameMode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setGameMode_args> {
      public setGameMode() {
        super("setGameMode");
      }

      public setGameMode_args getEmptyArgsInstance() {
        return new setGameMode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setGameMode_result getResult(I iface, setGameMode_args args) throws org.apache.thrift.TException {
        setGameMode_result result = new setGameMode_result();
        try {
          result.success = iface.setGameMode(args.authString, args.name, args.mode);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class setPvp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPvp_args> {
      public setPvp() {
        super("setPvp");
      }

      public setPvp_args getEmptyArgsInstance() {
        return new setPvp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setPvp_result getResult(I iface, setPvp_args args) throws org.apache.thrift.TException {
        setPvp_result result = new setPvp_result();
        try {
          result.success = iface.setPvp(args.authString, args.worldName, args.isPvp);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class setStorm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setStorm_args> {
      public setStorm() {
        super("setStorm");
      }

      public setStorm_args getEmptyArgsInstance() {
        return new setStorm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setStorm_result getResult(I iface, setStorm_args args) throws org.apache.thrift.TException {
        setStorm_result result = new setStorm_result();
        try {
          result.success = iface.setStorm(args.authString, args.worldName, args.hasStorm);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class setThundering<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setThundering_args> {
      public setThundering() {
        super("setThundering");
      }

      public setThundering_args getEmptyArgsInstance() {
        return new setThundering_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setThundering_result getResult(I iface, setThundering_args args) throws org.apache.thrift.TException {
        setThundering_result result = new setThundering_result();
        try {
          result.success = iface.setThundering(args.authString, args.worldName, args.isThundering);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class setWorldTime<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setWorldTime_args> {
      public setWorldTime() {
        super("setWorldTime");
      }

      public setWorldTime_args getEmptyArgsInstance() {
        return new setWorldTime_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setWorldTime_result getResult(I iface, setWorldTime_args args) throws org.apache.thrift.TException {
        setWorldTime_result result = new setWorldTime_result();
        try {
          result.success = iface.setWorldTime(args.authString, args.worldName, args.time);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class unBan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unBan_args> {
      public unBan() {
        super("unBan");
      }

      public unBan_args getEmptyArgsInstance() {
        return new unBan_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unBan_result getResult(I iface, unBan_args args) throws org.apache.thrift.TException {
        unBan_result result = new unBan_result();
        try {
          result.success = iface.unBan(args.authString, args.name);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class unBanIp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unBanIp_args> {
      public unBanIp() {
        super("unBanIp");
      }

      public unBanIp_args getEmptyArgsInstance() {
        return new unBanIp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unBanIp_result getResult(I iface, unBanIp_args args) throws org.apache.thrift.TException {
        unBanIp_result result = new unBanIp_result();
        try {
          result.success = iface.unBanIp(args.authString, args.ip);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    public static class updateInventoryItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateInventoryItem_args> {
      public updateInventoryItem() {
        super("updateInventoryItem");
      }

      public updateInventoryItem_args getEmptyArgsInstance() {
        return new updateInventoryItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateInventoryItem_result getResult(I iface, updateInventoryItem_args args) throws org.apache.thrift.TException {
        updateInventoryItem_result result = new updateInventoryItem_result();
        try {
          result.success = iface.updateInventoryItem(args.authString, args.playerName, args.item, args.itemIndex);
          result.setSuccessIsSet(true);
        } catch (EAuthException aex) {
          result.aex = aex;
        } catch (EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addItemToInventory", new addItemToInventory());
      processMap.put("addToWhitelist", new addToWhitelist());
      processMap.put("announce", new announce());
      processMap.put("ban", new ban());
      processMap.put("banIp", new banIp());
      processMap.put("deOp", new deOp());
      processMap.put("getBannedIps", new getBannedIps());
      processMap.put("getBannedPlayers", new getBannedPlayers());
      processMap.put("getBukkitVersion", new getBukkitVersion());
      processMap.put("getConsoleMessages", new getConsoleMessages());
      processMap.put("getFileContents", new getFileContents());
      processMap.put("getOfflinePlayer", new getOfflinePlayer());
      processMap.put("getOfflinePlayers", new getOfflinePlayers());
      processMap.put("getOps", new getOps());
      processMap.put("getPlayer", new getPlayer());
      processMap.put("getPlayers", new getPlayers());
      processMap.put("getPlugin", new getPlugin());
      processMap.put("getPlugins", new getPlugins());
      processMap.put("getServer", new getServer());
      processMap.put("getServerVersion", new getServerVersion());
      processMap.put("getWhitelist", new getWhitelist());
      processMap.put("getWorld", new getWorld());
      processMap.put("getWorlds", new getWorlds());
      processMap.put("installPlugin", new installPlugin());
      processMap.put("kick", new kick());
      processMap.put("op", new op());
      processMap.put("ping", new ping());
      processMap.put("reloadServer", new reloadServer());
      processMap.put("removeInventoryItem", new removeInventoryItem());
      processMap.put("removeFromWhitelist", new removeFromWhitelist());
      processMap.put("replacePlugin", new replacePlugin());
      processMap.put("runConsoleCommand", new runConsoleCommand());
      processMap.put("saveWorld", new saveWorld());
      processMap.put("setFileContents", new setFileContents());
      processMap.put("setGameMode", new setGameMode());
      processMap.put("setPvp", new setPvp());
      processMap.put("setStorm", new setStorm());
      processMap.put("setThundering", new setThundering());
      processMap.put("setWorldTime", new setWorldTime());
      processMap.put("unBan", new unBan());
      processMap.put("unBanIp", new unBanIp());
      processMap.put("updateInventoryItem", new updateInventoryItem());
      return processMap;
    }

    public static class addItemToInventory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addItemToInventory_args, Boolean> {
      public addItemToInventory() {
        super("addItemToInventory");
      }

      public addItemToInventory_args getEmptyArgsInstance() {
        return new addItemToInventory_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addItemToInventory_result result = new addItemToInventory_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addItemToInventory_result result = new addItemToInventory_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addItemToInventory_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addItemToInventory(args.authString, args.playerName, args.item,resultHandler);
      }
    }

    public static class addToWhitelist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addToWhitelist_args, Boolean> {
      public addToWhitelist() {
        super("addToWhitelist");
      }

      public addToWhitelist_args getEmptyArgsInstance() {
        return new addToWhitelist_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addToWhitelist_result result = new addToWhitelist_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addToWhitelist_result result = new addToWhitelist_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addToWhitelist_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addToWhitelist(args.authString, args.name,resultHandler);
      }
    }

    public static class announce<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, announce_args, Boolean> {
      public announce() {
        super("announce");
      }

      public announce_args getEmptyArgsInstance() {
        return new announce_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            announce_result result = new announce_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            announce_result result = new announce_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, announce_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.announce(args.authString, args.message,resultHandler);
      }
    }

    public static class ban<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ban_args, Boolean> {
      public ban() {
        super("ban");
      }

      public ban_args getEmptyArgsInstance() {
        return new ban_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            ban_result result = new ban_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ban_result result = new ban_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ban_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.ban(args.authString, args.name,resultHandler);
      }
    }

    public static class banIp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, banIp_args, Boolean> {
      public banIp() {
        super("banIp");
      }

      public banIp_args getEmptyArgsInstance() {
        return new banIp_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            banIp_result result = new banIp_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            banIp_result result = new banIp_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, banIp_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.banIp(args.authString, args.ip,resultHandler);
      }
    }

    public static class deOp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deOp_args, Boolean> {
      public deOp() {
        super("deOp");
      }

      public deOp_args getEmptyArgsInstance() {
        return new deOp_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deOp_result result = new deOp_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deOp_result result = new deOp_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deOp_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deOp(args.authString, args.name, args.notifyPlayer,resultHandler);
      }
    }

    public static class getBannedIps<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBannedIps_args, List<String>> {
      public getBannedIps() {
        super("getBannedIps");
      }

      public getBannedIps_args getEmptyArgsInstance() {
        return new getBannedIps_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getBannedIps_result result = new getBannedIps_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBannedIps_result result = new getBannedIps_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBannedIps_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getBannedIps(args.authString,resultHandler);
      }
    }

    public static class getBannedPlayers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBannedPlayers_args, List<OfflinePlayer>> {
      public getBannedPlayers() {
        super("getBannedPlayers");
      }

      public getBannedPlayers_args getEmptyArgsInstance() {
        return new getBannedPlayers_args();
      }

      public AsyncMethodCallback<List<OfflinePlayer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<OfflinePlayer>>() { 
          public void onComplete(List<OfflinePlayer> o) {
            getBannedPlayers_result result = new getBannedPlayers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBannedPlayers_result result = new getBannedPlayers_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBannedPlayers_args args, org.apache.thrift.async.AsyncMethodCallback<List<OfflinePlayer>> resultHandler) throws TException {
        iface.getBannedPlayers(args.authString,resultHandler);
      }
    }

    public static class getBukkitVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBukkitVersion_args, String> {
      public getBukkitVersion() {
        super("getBukkitVersion");
      }

      public getBukkitVersion_args getEmptyArgsInstance() {
        return new getBukkitVersion_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getBukkitVersion_result result = new getBukkitVersion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBukkitVersion_result result = new getBukkitVersion_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBukkitVersion_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getBukkitVersion(args.authString,resultHandler);
      }
    }

    public static class getConsoleMessages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getConsoleMessages_args, List<ConsoleLine>> {
      public getConsoleMessages() {
        super("getConsoleMessages");
      }

      public getConsoleMessages_args getEmptyArgsInstance() {
        return new getConsoleMessages_args();
      }

      public AsyncMethodCallback<List<ConsoleLine>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ConsoleLine>>() { 
          public void onComplete(List<ConsoleLine> o) {
            getConsoleMessages_result result = new getConsoleMessages_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getConsoleMessages_result result = new getConsoleMessages_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getConsoleMessages_args args, org.apache.thrift.async.AsyncMethodCallback<List<ConsoleLine>> resultHandler) throws TException {
        iface.getConsoleMessages(args.authString, args.since,resultHandler);
      }
    }

    public static class getFileContents<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFileContents_args, String> {
      public getFileContents() {
        super("getFileContents");
      }

      public getFileContents_args getEmptyArgsInstance() {
        return new getFileContents_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getFileContents_result result = new getFileContents_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFileContents_result result = new getFileContents_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFileContents_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getFileContents(args.authString, args.fileName,resultHandler);
      }
    }

    public static class getOfflinePlayer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOfflinePlayer_args, OfflinePlayer> {
      public getOfflinePlayer() {
        super("getOfflinePlayer");
      }

      public getOfflinePlayer_args getEmptyArgsInstance() {
        return new getOfflinePlayer_args();
      }

      public AsyncMethodCallback<OfflinePlayer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OfflinePlayer>() { 
          public void onComplete(OfflinePlayer o) {
            getOfflinePlayer_result result = new getOfflinePlayer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOfflinePlayer_result result = new getOfflinePlayer_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOfflinePlayer_args args, org.apache.thrift.async.AsyncMethodCallback<OfflinePlayer> resultHandler) throws TException {
        iface.getOfflinePlayer(args.authString, args.name,resultHandler);
      }
    }

    public static class getOfflinePlayers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOfflinePlayers_args, List<OfflinePlayer>> {
      public getOfflinePlayers() {
        super("getOfflinePlayers");
      }

      public getOfflinePlayers_args getEmptyArgsInstance() {
        return new getOfflinePlayers_args();
      }

      public AsyncMethodCallback<List<OfflinePlayer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<OfflinePlayer>>() { 
          public void onComplete(List<OfflinePlayer> o) {
            getOfflinePlayers_result result = new getOfflinePlayers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOfflinePlayers_result result = new getOfflinePlayers_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOfflinePlayers_args args, org.apache.thrift.async.AsyncMethodCallback<List<OfflinePlayer>> resultHandler) throws TException {
        iface.getOfflinePlayers(args.authString,resultHandler);
      }
    }

    public static class getOps<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOps_args, List<OfflinePlayer>> {
      public getOps() {
        super("getOps");
      }

      public getOps_args getEmptyArgsInstance() {
        return new getOps_args();
      }

      public AsyncMethodCallback<List<OfflinePlayer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<OfflinePlayer>>() { 
          public void onComplete(List<OfflinePlayer> o) {
            getOps_result result = new getOps_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOps_result result = new getOps_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOps_args args, org.apache.thrift.async.AsyncMethodCallback<List<OfflinePlayer>> resultHandler) throws TException {
        iface.getOps(args.authString,resultHandler);
      }
    }

    public static class getPlayer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPlayer_args, Player> {
      public getPlayer() {
        super("getPlayer");
      }

      public getPlayer_args getEmptyArgsInstance() {
        return new getPlayer_args();
      }

      public AsyncMethodCallback<Player> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Player>() { 
          public void onComplete(Player o) {
            getPlayer_result result = new getPlayer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPlayer_result result = new getPlayer_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPlayer_args args, org.apache.thrift.async.AsyncMethodCallback<Player> resultHandler) throws TException {
        iface.getPlayer(args.authString, args.name,resultHandler);
      }
    }

    public static class getPlayers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPlayers_args, List<Player>> {
      public getPlayers() {
        super("getPlayers");
      }

      public getPlayers_args getEmptyArgsInstance() {
        return new getPlayers_args();
      }

      public AsyncMethodCallback<List<Player>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Player>>() { 
          public void onComplete(List<Player> o) {
            getPlayers_result result = new getPlayers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPlayers_result result = new getPlayers_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPlayers_args args, org.apache.thrift.async.AsyncMethodCallback<List<Player>> resultHandler) throws TException {
        iface.getPlayers(args.authString,resultHandler);
      }
    }

    public static class getPlugin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPlugin_args, Plugin> {
      public getPlugin() {
        super("getPlugin");
      }

      public getPlugin_args getEmptyArgsInstance() {
        return new getPlugin_args();
      }

      public AsyncMethodCallback<Plugin> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Plugin>() { 
          public void onComplete(Plugin o) {
            getPlugin_result result = new getPlugin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPlugin_result result = new getPlugin_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPlugin_args args, org.apache.thrift.async.AsyncMethodCallback<Plugin> resultHandler) throws TException {
        iface.getPlugin(args.authString, args.name,resultHandler);
      }
    }

    public static class getPlugins<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPlugins_args, List<Plugin>> {
      public getPlugins() {
        super("getPlugins");
      }

      public getPlugins_args getEmptyArgsInstance() {
        return new getPlugins_args();
      }

      public AsyncMethodCallback<List<Plugin>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Plugin>>() { 
          public void onComplete(List<Plugin> o) {
            getPlugins_result result = new getPlugins_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPlugins_result result = new getPlugins_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPlugins_args args, org.apache.thrift.async.AsyncMethodCallback<List<Plugin>> resultHandler) throws TException {
        iface.getPlugins(args.authString,resultHandler);
      }
    }

    public static class getServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getServer_args, Server> {
      public getServer() {
        super("getServer");
      }

      public getServer_args getEmptyArgsInstance() {
        return new getServer_args();
      }

      public AsyncMethodCallback<Server> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Server>() { 
          public void onComplete(Server o) {
            getServer_result result = new getServer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getServer_result result = new getServer_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getServer_args args, org.apache.thrift.async.AsyncMethodCallback<Server> resultHandler) throws TException {
        iface.getServer(args.authString,resultHandler);
      }
    }

    public static class getServerVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getServerVersion_args, String> {
      public getServerVersion() {
        super("getServerVersion");
      }

      public getServerVersion_args getEmptyArgsInstance() {
        return new getServerVersion_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getServerVersion_result result = new getServerVersion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getServerVersion_result result = new getServerVersion_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getServerVersion_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getServerVersion(args.authString,resultHandler);
      }
    }

    public static class getWhitelist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWhitelist_args, List<OfflinePlayer>> {
      public getWhitelist() {
        super("getWhitelist");
      }

      public getWhitelist_args getEmptyArgsInstance() {
        return new getWhitelist_args();
      }

      public AsyncMethodCallback<List<OfflinePlayer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<OfflinePlayer>>() { 
          public void onComplete(List<OfflinePlayer> o) {
            getWhitelist_result result = new getWhitelist_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWhitelist_result result = new getWhitelist_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWhitelist_args args, org.apache.thrift.async.AsyncMethodCallback<List<OfflinePlayer>> resultHandler) throws TException {
        iface.getWhitelist(args.authString,resultHandler);
      }
    }

    public static class getWorld<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWorld_args, World> {
      public getWorld() {
        super("getWorld");
      }

      public getWorld_args getEmptyArgsInstance() {
        return new getWorld_args();
      }

      public AsyncMethodCallback<World> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<World>() { 
          public void onComplete(World o) {
            getWorld_result result = new getWorld_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWorld_result result = new getWorld_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWorld_args args, org.apache.thrift.async.AsyncMethodCallback<World> resultHandler) throws TException {
        iface.getWorld(args.authString, args.worldName,resultHandler);
      }
    }

    public static class getWorlds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWorlds_args, List<World>> {
      public getWorlds() {
        super("getWorlds");
      }

      public getWorlds_args getEmptyArgsInstance() {
        return new getWorlds_args();
      }

      public AsyncMethodCallback<List<World>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<World>>() { 
          public void onComplete(List<World> o) {
            getWorlds_result result = new getWorlds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWorlds_result result = new getWorlds_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWorlds_args args, org.apache.thrift.async.AsyncMethodCallback<List<World>> resultHandler) throws TException {
        iface.getWorlds(args.authString,resultHandler);
      }
    }

    public static class installPlugin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, installPlugin_args, Boolean> {
      public installPlugin() {
        super("installPlugin");
      }

      public installPlugin_args getEmptyArgsInstance() {
        return new installPlugin_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            installPlugin_result result = new installPlugin_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            installPlugin_result result = new installPlugin_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, installPlugin_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.installPlugin(args.authString, args.downloadUrl, args.md5,resultHandler);
      }
    }

    public static class kick<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, kick_args, Boolean> {
      public kick() {
        super("kick");
      }

      public kick_args getEmptyArgsInstance() {
        return new kick_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            kick_result result = new kick_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            kick_result result = new kick_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, kick_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.kick(args.authString, args.name, args.message,resultHandler);
      }
    }

    public static class op<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, op_args, Boolean> {
      public op() {
        super("op");
      }

      public op_args getEmptyArgsInstance() {
        return new op_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            op_result result = new op_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            op_result result = new op_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, op_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.op(args.authString, args.name, args.notifyPlayer,resultHandler);
      }
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Boolean> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            ping_result result = new ping_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.ping(args.authString,resultHandler);
      }
    }

    public static class reloadServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reloadServer_args, Void> {
      public reloadServer() {
        super("reloadServer");
      }

      public reloadServer_args getEmptyArgsInstance() {
        return new reloadServer_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, reloadServer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.reloadServer(args.authString,resultHandler);
      }
    }

    public static class removeInventoryItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeInventoryItem_args, Boolean> {
      public removeInventoryItem() {
        super("removeInventoryItem");
      }

      public removeInventoryItem_args getEmptyArgsInstance() {
        return new removeInventoryItem_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            removeInventoryItem_result result = new removeInventoryItem_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeInventoryItem_result result = new removeInventoryItem_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeInventoryItem_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.removeInventoryItem(args.authString, args.playerName, args.itemIndex,resultHandler);
      }
    }

    public static class removeFromWhitelist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeFromWhitelist_args, Boolean> {
      public removeFromWhitelist() {
        super("removeFromWhitelist");
      }

      public removeFromWhitelist_args getEmptyArgsInstance() {
        return new removeFromWhitelist_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            removeFromWhitelist_result result = new removeFromWhitelist_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeFromWhitelist_result result = new removeFromWhitelist_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeFromWhitelist_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.removeFromWhitelist(args.authString, args.name,resultHandler);
      }
    }

    public static class replacePlugin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, replacePlugin_args, Boolean> {
      public replacePlugin() {
        super("replacePlugin");
      }

      public replacePlugin_args getEmptyArgsInstance() {
        return new replacePlugin_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            replacePlugin_result result = new replacePlugin_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            replacePlugin_result result = new replacePlugin_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, replacePlugin_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.replacePlugin(args.authString, args.pluginName, args.downloadUrl, args.md5,resultHandler);
      }
    }

    public static class runConsoleCommand<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, runConsoleCommand_args, Void> {
      public runConsoleCommand() {
        super("runConsoleCommand");
      }

      public runConsoleCommand_args getEmptyArgsInstance() {
        return new runConsoleCommand_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, runConsoleCommand_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.runConsoleCommand(args.authString, args.command,resultHandler);
      }
    }

    public static class saveWorld<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveWorld_args, Boolean> {
      public saveWorld() {
        super("saveWorld");
      }

      public saveWorld_args getEmptyArgsInstance() {
        return new saveWorld_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            saveWorld_result result = new saveWorld_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveWorld_result result = new saveWorld_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveWorld_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.saveWorld(args.authString, args.worldName,resultHandler);
      }
    }

    public static class setFileContents<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setFileContents_args, Boolean> {
      public setFileContents() {
        super("setFileContents");
      }

      public setFileContents_args getEmptyArgsInstance() {
        return new setFileContents_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setFileContents_result result = new setFileContents_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setFileContents_result result = new setFileContents_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setFileContents_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setFileContents(args.authString, args.fileName, args.fileContents,resultHandler);
      }
    }

    public static class setGameMode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setGameMode_args, Boolean> {
      public setGameMode() {
        super("setGameMode");
      }

      public setGameMode_args getEmptyArgsInstance() {
        return new setGameMode_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setGameMode_result result = new setGameMode_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setGameMode_result result = new setGameMode_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setGameMode_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setGameMode(args.authString, args.name, args.mode,resultHandler);
      }
    }

    public static class setPvp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setPvp_args, Boolean> {
      public setPvp() {
        super("setPvp");
      }

      public setPvp_args getEmptyArgsInstance() {
        return new setPvp_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setPvp_result result = new setPvp_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setPvp_result result = new setPvp_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setPvp_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setPvp(args.authString, args.worldName, args.isPvp,resultHandler);
      }
    }

    public static class setStorm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setStorm_args, Boolean> {
      public setStorm() {
        super("setStorm");
      }

      public setStorm_args getEmptyArgsInstance() {
        return new setStorm_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setStorm_result result = new setStorm_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setStorm_result result = new setStorm_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setStorm_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setStorm(args.authString, args.worldName, args.hasStorm,resultHandler);
      }
    }

    public static class setThundering<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setThundering_args, Boolean> {
      public setThundering() {
        super("setThundering");
      }

      public setThundering_args getEmptyArgsInstance() {
        return new setThundering_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setThundering_result result = new setThundering_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setThundering_result result = new setThundering_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setThundering_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setThundering(args.authString, args.worldName, args.isThundering,resultHandler);
      }
    }

    public static class setWorldTime<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setWorldTime_args, Boolean> {
      public setWorldTime() {
        super("setWorldTime");
      }

      public setWorldTime_args getEmptyArgsInstance() {
        return new setWorldTime_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setWorldTime_result result = new setWorldTime_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setWorldTime_result result = new setWorldTime_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setWorldTime_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setWorldTime(args.authString, args.worldName, args.time,resultHandler);
      }
    }

    public static class unBan<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unBan_args, Boolean> {
      public unBan() {
        super("unBan");
      }

      public unBan_args getEmptyArgsInstance() {
        return new unBan_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            unBan_result result = new unBan_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unBan_result result = new unBan_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unBan_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.unBan(args.authString, args.name,resultHandler);
      }
    }

    public static class unBanIp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unBanIp_args, Boolean> {
      public unBanIp() {
        super("unBanIp");
      }

      public unBanIp_args getEmptyArgsInstance() {
        return new unBanIp_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            unBanIp_result result = new unBanIp_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unBanIp_result result = new unBanIp_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unBanIp_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.unBanIp(args.authString, args.ip,resultHandler);
      }
    }

    public static class updateInventoryItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateInventoryItem_args, Boolean> {
      public updateInventoryItem() {
        super("updateInventoryItem");
      }

      public updateInventoryItem_args getEmptyArgsInstance() {
        return new updateInventoryItem_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateInventoryItem_result result = new updateInventoryItem_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateInventoryItem_result result = new updateInventoryItem_result();
            if (e instanceof EAuthException) {
                        result.aex = (EAuthException) e;
                        result.setAexIsSet(true);
                        msg = result;
            }
            else             if (e instanceof EDataException) {
                        result.dex = (EDataException) e;
                        result.setDexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateInventoryItem_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateInventoryItem(args.authString, args.playerName, args.item, args.itemIndex,resultHandler);
      }
    }

  }

  public static class addItemToInventory_args implements org.apache.thrift.TBase<addItemToInventory_args, addItemToInventory_args._Fields>, java.io.Serializable, Cloneable, Comparable<addItemToInventory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addItemToInventory_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PLAYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("playerName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("item", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addItemToInventory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addItemToInventory_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String playerName; // required
    public ItemStack item; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      PLAYER_NAME((short)2, "playerName"),
      ITEM((short)3, "item");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // PLAYER_NAME
            return PLAYER_NAME;
          case 3: // ITEM
            return ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PLAYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("playerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM, new org.apache.thrift.meta_data.FieldMetaData("item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ItemStack.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addItemToInventory_args.class, metaDataMap);
    }

    public addItemToInventory_args() {
    }

    public addItemToInventory_args(
      String authString,
      String playerName,
      ItemStack item)
    {
      this();
      this.authString = authString;
      this.playerName = playerName;
      this.item = item;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addItemToInventory_args(addItemToInventory_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetPlayerName()) {
        this.playerName = other.playerName;
      }
      if (other.isSetItem()) {
        this.item = new ItemStack(other.item);
      }
    }

    public addItemToInventory_args deepCopy() {
      return new addItemToInventory_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.playerName = null;
      this.item = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public addItemToInventory_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getPlayerName() {
      return this.playerName;
    }

    public addItemToInventory_args setPlayerName(String playerName) {
      this.playerName = playerName;
      return this;
    }

    public void unsetPlayerName() {
      this.playerName = null;
    }

    /** Returns true if field playerName is set (has been assigned a value) and false otherwise */
    public boolean isSetPlayerName() {
      return this.playerName != null;
    }

    public void setPlayerNameIsSet(boolean value) {
      if (!value) {
        this.playerName = null;
      }
    }

    public ItemStack getItem() {
      return this.item;
    }

    public addItemToInventory_args setItem(ItemStack item) {
      this.item = item;
      return this;
    }

    public void unsetItem() {
      this.item = null;
    }

    /** Returns true if field item is set (has been assigned a value) and false otherwise */
    public boolean isSetItem() {
      return this.item != null;
    }

    public void setItemIsSet(boolean value) {
      if (!value) {
        this.item = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case PLAYER_NAME:
        if (value == null) {
          unsetPlayerName();
        } else {
          setPlayerName((String)value);
        }
        break;

      case ITEM:
        if (value == null) {
          unsetItem();
        } else {
          setItem((ItemStack)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case PLAYER_NAME:
        return getPlayerName();

      case ITEM:
        return getItem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case PLAYER_NAME:
        return isSetPlayerName();
      case ITEM:
        return isSetItem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addItemToInventory_args)
        return this.equals((addItemToInventory_args)that);
      return false;
    }

    public boolean equals(addItemToInventory_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_playerName = true && this.isSetPlayerName();
      boolean that_present_playerName = true && that.isSetPlayerName();
      if (this_present_playerName || that_present_playerName) {
        if (!(this_present_playerName && that_present_playerName))
          return false;
        if (!this.playerName.equals(that.playerName))
          return false;
      }

      boolean this_present_item = true && this.isSetItem();
      boolean that_present_item = true && that.isSetItem();
      if (this_present_item || that_present_item) {
        if (!(this_present_item && that_present_item))
          return false;
        if (!this.item.equals(that.item))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addItemToInventory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlayerName()).compareTo(other.isSetPlayerName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlayerName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerName, other.playerName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem()).compareTo(other.isSetItem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item, other.item);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addItemToInventory_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("playerName:");
      if (this.playerName == null) {
        sb.append("null");
      } else {
        sb.append(this.playerName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item:");
      if (this.item == null) {
        sb.append("null");
      } else {
        sb.append(this.item);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (item != null) {
        item.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addItemToInventory_argsStandardSchemeFactory implements SchemeFactory {
      public addItemToInventory_argsStandardScheme getScheme() {
        return new addItemToInventory_argsStandardScheme();
      }
    }

    private static class addItemToInventory_argsStandardScheme extends StandardScheme<addItemToInventory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addItemToInventory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PLAYER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.playerName = iprot.readString();
                struct.setPlayerNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.item = new ItemStack();
                struct.item.read(iprot);
                struct.setItemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addItemToInventory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.playerName != null) {
          oprot.writeFieldBegin(PLAYER_NAME_FIELD_DESC);
          oprot.writeString(struct.playerName);
          oprot.writeFieldEnd();
        }
        if (struct.item != null) {
          oprot.writeFieldBegin(ITEM_FIELD_DESC);
          struct.item.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addItemToInventory_argsTupleSchemeFactory implements SchemeFactory {
      public addItemToInventory_argsTupleScheme getScheme() {
        return new addItemToInventory_argsTupleScheme();
      }
    }

    private static class addItemToInventory_argsTupleScheme extends TupleScheme<addItemToInventory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addItemToInventory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetPlayerName()) {
          optionals.set(1);
        }
        if (struct.isSetItem()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetPlayerName()) {
          oprot.writeString(struct.playerName);
        }
        if (struct.isSetItem()) {
          struct.item.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addItemToInventory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.playerName = iprot.readString();
          struct.setPlayerNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.item = new ItemStack();
          struct.item.read(iprot);
          struct.setItemIsSet(true);
        }
      }
    }

  }

  public static class addItemToInventory_result implements org.apache.thrift.TBase<addItemToInventory_result, addItemToInventory_result._Fields>, java.io.Serializable, Cloneable, Comparable<addItemToInventory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addItemToInventory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addItemToInventory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addItemToInventory_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addItemToInventory_result.class, metaDataMap);
    }

    public addItemToInventory_result() {
    }

    public addItemToInventory_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addItemToInventory_result(addItemToInventory_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public addItemToInventory_result deepCopy() {
      return new addItemToInventory_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addItemToInventory_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public addItemToInventory_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public addItemToInventory_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addItemToInventory_result)
        return this.equals((addItemToInventory_result)that);
      return false;
    }

    public boolean equals(addItemToInventory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addItemToInventory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addItemToInventory_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addItemToInventory_resultStandardSchemeFactory implements SchemeFactory {
      public addItemToInventory_resultStandardScheme getScheme() {
        return new addItemToInventory_resultStandardScheme();
      }
    }

    private static class addItemToInventory_resultStandardScheme extends StandardScheme<addItemToInventory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addItemToInventory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addItemToInventory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addItemToInventory_resultTupleSchemeFactory implements SchemeFactory {
      public addItemToInventory_resultTupleScheme getScheme() {
        return new addItemToInventory_resultTupleScheme();
      }
    }

    private static class addItemToInventory_resultTupleScheme extends TupleScheme<addItemToInventory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addItemToInventory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addItemToInventory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class addToWhitelist_args implements org.apache.thrift.TBase<addToWhitelist_args, addToWhitelist_args._Fields>, java.io.Serializable, Cloneable, Comparable<addToWhitelist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToWhitelist_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addToWhitelist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addToWhitelist_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToWhitelist_args.class, metaDataMap);
    }

    public addToWhitelist_args() {
    }

    public addToWhitelist_args(
      String authString,
      String name)
    {
      this();
      this.authString = authString;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToWhitelist_args(addToWhitelist_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public addToWhitelist_args deepCopy() {
      return new addToWhitelist_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public addToWhitelist_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public addToWhitelist_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addToWhitelist_args)
        return this.equals((addToWhitelist_args)that);
      return false;
    }

    public boolean equals(addToWhitelist_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addToWhitelist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addToWhitelist_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToWhitelist_argsStandardSchemeFactory implements SchemeFactory {
      public addToWhitelist_argsStandardScheme getScheme() {
        return new addToWhitelist_argsStandardScheme();
      }
    }

    private static class addToWhitelist_argsStandardScheme extends StandardScheme<addToWhitelist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToWhitelist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToWhitelist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToWhitelist_argsTupleSchemeFactory implements SchemeFactory {
      public addToWhitelist_argsTupleScheme getScheme() {
        return new addToWhitelist_argsTupleScheme();
      }
    }

    private static class addToWhitelist_argsTupleScheme extends TupleScheme<addToWhitelist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToWhitelist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToWhitelist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class addToWhitelist_result implements org.apache.thrift.TBase<addToWhitelist_result, addToWhitelist_result._Fields>, java.io.Serializable, Cloneable, Comparable<addToWhitelist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToWhitelist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addToWhitelist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addToWhitelist_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToWhitelist_result.class, metaDataMap);
    }

    public addToWhitelist_result() {
    }

    public addToWhitelist_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToWhitelist_result(addToWhitelist_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public addToWhitelist_result deepCopy() {
      return new addToWhitelist_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addToWhitelist_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public addToWhitelist_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public addToWhitelist_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addToWhitelist_result)
        return this.equals((addToWhitelist_result)that);
      return false;
    }

    public boolean equals(addToWhitelist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addToWhitelist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addToWhitelist_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToWhitelist_resultStandardSchemeFactory implements SchemeFactory {
      public addToWhitelist_resultStandardScheme getScheme() {
        return new addToWhitelist_resultStandardScheme();
      }
    }

    private static class addToWhitelist_resultStandardScheme extends StandardScheme<addToWhitelist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToWhitelist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToWhitelist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToWhitelist_resultTupleSchemeFactory implements SchemeFactory {
      public addToWhitelist_resultTupleScheme getScheme() {
        return new addToWhitelist_resultTupleScheme();
      }
    }

    private static class addToWhitelist_resultTupleScheme extends TupleScheme<addToWhitelist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToWhitelist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToWhitelist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class announce_args implements org.apache.thrift.TBase<announce_args, announce_args._Fields>, java.io.Serializable, Cloneable, Comparable<announce_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("announce_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new announce_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new announce_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String message; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      MESSAGE((short)2, "message");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // MESSAGE
            return MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(announce_args.class, metaDataMap);
    }

    public announce_args() {
    }

    public announce_args(
      String authString,
      String message)
    {
      this();
      this.authString = authString;
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public announce_args(announce_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetMessage()) {
        this.message = other.message;
      }
    }

    public announce_args deepCopy() {
      return new announce_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.message = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public announce_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getMessage() {
      return this.message;
    }

    public announce_args setMessage(String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case MESSAGE:
        return getMessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case MESSAGE:
        return isSetMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof announce_args)
        return this.equals((announce_args)that);
      return false;
    }

    public boolean equals(announce_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(announce_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("announce_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class announce_argsStandardSchemeFactory implements SchemeFactory {
      public announce_argsStandardScheme getScheme() {
        return new announce_argsStandardScheme();
      }
    }

    private static class announce_argsStandardScheme extends StandardScheme<announce_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, announce_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, announce_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class announce_argsTupleSchemeFactory implements SchemeFactory {
      public announce_argsTupleScheme getScheme() {
        return new announce_argsTupleScheme();
      }
    }

    private static class announce_argsTupleScheme extends TupleScheme<announce_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, announce_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetMessage()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetMessage()) {
          oprot.writeString(struct.message);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, announce_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.message = iprot.readString();
          struct.setMessageIsSet(true);
        }
      }
    }

  }

  public static class announce_result implements org.apache.thrift.TBase<announce_result, announce_result._Fields>, java.io.Serializable, Cloneable, Comparable<announce_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("announce_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new announce_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new announce_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(announce_result.class, metaDataMap);
    }

    public announce_result() {
    }

    public announce_result(
      boolean success,
      EAuthException aex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public announce_result(announce_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
    }

    public announce_result deepCopy() {
      return new announce_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public announce_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public announce_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof announce_result)
        return this.equals((announce_result)that);
      return false;
    }

    public boolean equals(announce_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(announce_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("announce_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class announce_resultStandardSchemeFactory implements SchemeFactory {
      public announce_resultStandardScheme getScheme() {
        return new announce_resultStandardScheme();
      }
    }

    private static class announce_resultStandardScheme extends StandardScheme<announce_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, announce_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, announce_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class announce_resultTupleSchemeFactory implements SchemeFactory {
      public announce_resultTupleScheme getScheme() {
        return new announce_resultTupleScheme();
      }
    }

    private static class announce_resultTupleScheme extends TupleScheme<announce_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, announce_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, announce_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class ban_args implements org.apache.thrift.TBase<ban_args, ban_args._Fields>, java.io.Serializable, Cloneable, Comparable<ban_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ban_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ban_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ban_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ban_args.class, metaDataMap);
    }

    public ban_args() {
    }

    public ban_args(
      String authString,
      String name)
    {
      this();
      this.authString = authString;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ban_args(ban_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public ban_args deepCopy() {
      return new ban_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public ban_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public ban_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ban_args)
        return this.equals((ban_args)that);
      return false;
    }

    public boolean equals(ban_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ban_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ban_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ban_argsStandardSchemeFactory implements SchemeFactory {
      public ban_argsStandardScheme getScheme() {
        return new ban_argsStandardScheme();
      }
    }

    private static class ban_argsStandardScheme extends StandardScheme<ban_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ban_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ban_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ban_argsTupleSchemeFactory implements SchemeFactory {
      public ban_argsTupleScheme getScheme() {
        return new ban_argsTupleScheme();
      }
    }

    private static class ban_argsTupleScheme extends TupleScheme<ban_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ban_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ban_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class ban_result implements org.apache.thrift.TBase<ban_result, ban_result._Fields>, java.io.Serializable, Cloneable, Comparable<ban_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ban_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ban_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ban_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ban_result.class, metaDataMap);
    }

    public ban_result() {
    }

    public ban_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ban_result(ban_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public ban_result deepCopy() {
      return new ban_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ban_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public ban_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public ban_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ban_result)
        return this.equals((ban_result)that);
      return false;
    }

    public boolean equals(ban_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ban_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ban_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ban_resultStandardSchemeFactory implements SchemeFactory {
      public ban_resultStandardScheme getScheme() {
        return new ban_resultStandardScheme();
      }
    }

    private static class ban_resultStandardScheme extends StandardScheme<ban_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ban_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ban_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ban_resultTupleSchemeFactory implements SchemeFactory {
      public ban_resultTupleScheme getScheme() {
        return new ban_resultTupleScheme();
      }
    }

    private static class ban_resultTupleScheme extends TupleScheme<ban_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ban_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ban_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class banIp_args implements org.apache.thrift.TBase<banIp_args, banIp_args._Fields>, java.io.Serializable, Cloneable, Comparable<banIp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("banIp_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new banIp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new banIp_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String ip; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      IP((short)2, "ip");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // IP
            return IP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(banIp_args.class, metaDataMap);
    }

    public banIp_args() {
    }

    public banIp_args(
      String authString,
      String ip)
    {
      this();
      this.authString = authString;
      this.ip = ip;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public banIp_args(banIp_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
    }

    public banIp_args deepCopy() {
      return new banIp_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.ip = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public banIp_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getIp() {
      return this.ip;
    }

    public banIp_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case IP:
        return getIp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case IP:
        return isSetIp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof banIp_args)
        return this.equals((banIp_args)that);
      return false;
    }

    public boolean equals(banIp_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(banIp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("banIp_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class banIp_argsStandardSchemeFactory implements SchemeFactory {
      public banIp_argsStandardScheme getScheme() {
        return new banIp_argsStandardScheme();
      }
    }

    private static class banIp_argsStandardScheme extends StandardScheme<banIp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, banIp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, banIp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class banIp_argsTupleSchemeFactory implements SchemeFactory {
      public banIp_argsTupleScheme getScheme() {
        return new banIp_argsTupleScheme();
      }
    }

    private static class banIp_argsTupleScheme extends TupleScheme<banIp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, banIp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetIp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, banIp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
      }
    }

  }

  public static class banIp_result implements org.apache.thrift.TBase<banIp_result, banIp_result._Fields>, java.io.Serializable, Cloneable, Comparable<banIp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("banIp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new banIp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new banIp_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(banIp_result.class, metaDataMap);
    }

    public banIp_result() {
    }

    public banIp_result(
      boolean success,
      EAuthException aex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public banIp_result(banIp_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
    }

    public banIp_result deepCopy() {
      return new banIp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public banIp_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public banIp_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof banIp_result)
        return this.equals((banIp_result)that);
      return false;
    }

    public boolean equals(banIp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(banIp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("banIp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class banIp_resultStandardSchemeFactory implements SchemeFactory {
      public banIp_resultStandardScheme getScheme() {
        return new banIp_resultStandardScheme();
      }
    }

    private static class banIp_resultStandardScheme extends StandardScheme<banIp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, banIp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, banIp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class banIp_resultTupleSchemeFactory implements SchemeFactory {
      public banIp_resultTupleScheme getScheme() {
        return new banIp_resultTupleScheme();
      }
    }

    private static class banIp_resultTupleScheme extends TupleScheme<banIp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, banIp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, banIp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class deOp_args implements org.apache.thrift.TBase<deOp_args, deOp_args._Fields>, java.io.Serializable, Cloneable, Comparable<deOp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deOp_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NOTIFY_PLAYER_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyPlayer", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deOp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deOp_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required
    public boolean notifyPlayer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name"),
      NOTIFY_PLAYER((short)3, "notifyPlayer");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          case 3: // NOTIFY_PLAYER
            return NOTIFY_PLAYER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOTIFYPLAYER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NOTIFY_PLAYER, new org.apache.thrift.meta_data.FieldMetaData("notifyPlayer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deOp_args.class, metaDataMap);
    }

    public deOp_args() {
    }

    public deOp_args(
      String authString,
      String name,
      boolean notifyPlayer)
    {
      this();
      this.authString = authString;
      this.name = name;
      this.notifyPlayer = notifyPlayer;
      setNotifyPlayerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deOp_args(deOp_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      this.notifyPlayer = other.notifyPlayer;
    }

    public deOp_args deepCopy() {
      return new deOp_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
      setNotifyPlayerIsSet(false);
      this.notifyPlayer = false;
    }

    public String getAuthString() {
      return this.authString;
    }

    public deOp_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public deOp_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public boolean isNotifyPlayer() {
      return this.notifyPlayer;
    }

    public deOp_args setNotifyPlayer(boolean notifyPlayer) {
      this.notifyPlayer = notifyPlayer;
      setNotifyPlayerIsSet(true);
      return this;
    }

    public void unsetNotifyPlayer() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFYPLAYER_ISSET_ID);
    }

    /** Returns true if field notifyPlayer is set (has been assigned a value) and false otherwise */
    public boolean isSetNotifyPlayer() {
      return EncodingUtils.testBit(__isset_bitfield, __NOTIFYPLAYER_ISSET_ID);
    }

    public void setNotifyPlayerIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFYPLAYER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case NOTIFY_PLAYER:
        if (value == null) {
          unsetNotifyPlayer();
        } else {
          setNotifyPlayer((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      case NOTIFY_PLAYER:
        return Boolean.valueOf(isNotifyPlayer());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      case NOTIFY_PLAYER:
        return isSetNotifyPlayer();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deOp_args)
        return this.equals((deOp_args)that);
      return false;
    }

    public boolean equals(deOp_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_notifyPlayer = true;
      boolean that_present_notifyPlayer = true;
      if (this_present_notifyPlayer || that_present_notifyPlayer) {
        if (!(this_present_notifyPlayer && that_present_notifyPlayer))
          return false;
        if (this.notifyPlayer != that.notifyPlayer)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deOp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotifyPlayer()).compareTo(other.isSetNotifyPlayer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotifyPlayer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyPlayer, other.notifyPlayer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deOp_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notifyPlayer:");
      sb.append(this.notifyPlayer);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deOp_argsStandardSchemeFactory implements SchemeFactory {
      public deOp_argsStandardScheme getScheme() {
        return new deOp_argsStandardScheme();
      }
    }

    private static class deOp_argsStandardScheme extends StandardScheme<deOp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deOp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOTIFY_PLAYER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.notifyPlayer = iprot.readBool();
                struct.setNotifyPlayerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deOp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NOTIFY_PLAYER_FIELD_DESC);
        oprot.writeBool(struct.notifyPlayer);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deOp_argsTupleSchemeFactory implements SchemeFactory {
      public deOp_argsTupleScheme getScheme() {
        return new deOp_argsTupleScheme();
      }
    }

    private static class deOp_argsTupleScheme extends TupleScheme<deOp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deOp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetNotifyPlayer()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetNotifyPlayer()) {
          oprot.writeBool(struct.notifyPlayer);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deOp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.notifyPlayer = iprot.readBool();
          struct.setNotifyPlayerIsSet(true);
        }
      }
    }

  }

  public static class deOp_result implements org.apache.thrift.TBase<deOp_result, deOp_result._Fields>, java.io.Serializable, Cloneable, Comparable<deOp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deOp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deOp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deOp_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deOp_result.class, metaDataMap);
    }

    public deOp_result() {
    }

    public deOp_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deOp_result(deOp_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public deOp_result deepCopy() {
      return new deOp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deOp_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public deOp_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public deOp_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deOp_result)
        return this.equals((deOp_result)that);
      return false;
    }

    public boolean equals(deOp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deOp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deOp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deOp_resultStandardSchemeFactory implements SchemeFactory {
      public deOp_resultStandardScheme getScheme() {
        return new deOp_resultStandardScheme();
      }
    }

    private static class deOp_resultStandardScheme extends StandardScheme<deOp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deOp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deOp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deOp_resultTupleSchemeFactory implements SchemeFactory {
      public deOp_resultTupleScheme getScheme() {
        return new deOp_resultTupleScheme();
      }
    }

    private static class deOp_resultTupleScheme extends TupleScheme<deOp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deOp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deOp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class getBannedIps_args implements org.apache.thrift.TBase<getBannedIps_args, getBannedIps_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBannedIps_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBannedIps_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBannedIps_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBannedIps_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBannedIps_args.class, metaDataMap);
    }

    public getBannedIps_args() {
    }

    public getBannedIps_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBannedIps_args(getBannedIps_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getBannedIps_args deepCopy() {
      return new getBannedIps_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getBannedIps_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBannedIps_args)
        return this.equals((getBannedIps_args)that);
      return false;
    }

    public boolean equals(getBannedIps_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBannedIps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBannedIps_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBannedIps_argsStandardSchemeFactory implements SchemeFactory {
      public getBannedIps_argsStandardScheme getScheme() {
        return new getBannedIps_argsStandardScheme();
      }
    }

    private static class getBannedIps_argsStandardScheme extends StandardScheme<getBannedIps_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBannedIps_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBannedIps_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBannedIps_argsTupleSchemeFactory implements SchemeFactory {
      public getBannedIps_argsTupleScheme getScheme() {
        return new getBannedIps_argsTupleScheme();
      }
    }

    private static class getBannedIps_argsTupleScheme extends TupleScheme<getBannedIps_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBannedIps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBannedIps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getBannedIps_result implements org.apache.thrift.TBase<getBannedIps_result, getBannedIps_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBannedIps_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBannedIps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBannedIps_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBannedIps_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBannedIps_result.class, metaDataMap);
    }

    public getBannedIps_result() {
    }

    public getBannedIps_result(
      List<String> success,
      EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBannedIps_result(getBannedIps_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
    }

    public getBannedIps_result deepCopy() {
      return new getBannedIps_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getBannedIps_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getBannedIps_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBannedIps_result)
        return this.equals((getBannedIps_result)that);
      return false;
    }

    public boolean equals(getBannedIps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBannedIps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBannedIps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBannedIps_resultStandardSchemeFactory implements SchemeFactory {
      public getBannedIps_resultStandardScheme getScheme() {
        return new getBannedIps_resultStandardScheme();
      }
    }

    private static class getBannedIps_resultStandardScheme extends StandardScheme<getBannedIps_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBannedIps_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list82.size);
                  for (int _i83 = 0; _i83 < _list82.size; ++_i83)
                  {
                    String _elem84;
                    _elem84 = iprot.readString();
                    struct.success.add(_elem84);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBannedIps_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter85 : struct.success)
            {
              oprot.writeString(_iter85);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBannedIps_resultTupleSchemeFactory implements SchemeFactory {
      public getBannedIps_resultTupleScheme getScheme() {
        return new getBannedIps_resultTupleScheme();
      }
    }

    private static class getBannedIps_resultTupleScheme extends TupleScheme<getBannedIps_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBannedIps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter86 : struct.success)
            {
              oprot.writeString(_iter86);
            }
          }
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBannedIps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list87.size);
            for (int _i88 = 0; _i88 < _list87.size; ++_i88)
            {
              String _elem89;
              _elem89 = iprot.readString();
              struct.success.add(_elem89);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class getBannedPlayers_args implements org.apache.thrift.TBase<getBannedPlayers_args, getBannedPlayers_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBannedPlayers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBannedPlayers_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBannedPlayers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBannedPlayers_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBannedPlayers_args.class, metaDataMap);
    }

    public getBannedPlayers_args() {
    }

    public getBannedPlayers_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBannedPlayers_args(getBannedPlayers_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getBannedPlayers_args deepCopy() {
      return new getBannedPlayers_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getBannedPlayers_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBannedPlayers_args)
        return this.equals((getBannedPlayers_args)that);
      return false;
    }

    public boolean equals(getBannedPlayers_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBannedPlayers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBannedPlayers_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBannedPlayers_argsStandardSchemeFactory implements SchemeFactory {
      public getBannedPlayers_argsStandardScheme getScheme() {
        return new getBannedPlayers_argsStandardScheme();
      }
    }

    private static class getBannedPlayers_argsStandardScheme extends StandardScheme<getBannedPlayers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBannedPlayers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBannedPlayers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBannedPlayers_argsTupleSchemeFactory implements SchemeFactory {
      public getBannedPlayers_argsTupleScheme getScheme() {
        return new getBannedPlayers_argsTupleScheme();
      }
    }

    private static class getBannedPlayers_argsTupleScheme extends TupleScheme<getBannedPlayers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBannedPlayers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBannedPlayers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getBannedPlayers_result implements org.apache.thrift.TBase<getBannedPlayers_result, getBannedPlayers_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBannedPlayers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBannedPlayers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBannedPlayers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBannedPlayers_resultTupleSchemeFactory());
    }

    public List<OfflinePlayer> success; // required
    public EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OfflinePlayer.class))));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBannedPlayers_result.class, metaDataMap);
    }

    public getBannedPlayers_result() {
    }

    public getBannedPlayers_result(
      List<OfflinePlayer> success,
      EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBannedPlayers_result(getBannedPlayers_result other) {
      if (other.isSetSuccess()) {
        List<OfflinePlayer> __this__success = new ArrayList<OfflinePlayer>(other.success.size());
        for (OfflinePlayer other_element : other.success) {
          __this__success.add(new OfflinePlayer(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
    }

    public getBannedPlayers_result deepCopy() {
      return new getBannedPlayers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<OfflinePlayer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(OfflinePlayer elem) {
      if (this.success == null) {
        this.success = new ArrayList<OfflinePlayer>();
      }
      this.success.add(elem);
    }

    public List<OfflinePlayer> getSuccess() {
      return this.success;
    }

    public getBannedPlayers_result setSuccess(List<OfflinePlayer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getBannedPlayers_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<OfflinePlayer>)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBannedPlayers_result)
        return this.equals((getBannedPlayers_result)that);
      return false;
    }

    public boolean equals(getBannedPlayers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBannedPlayers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBannedPlayers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBannedPlayers_resultStandardSchemeFactory implements SchemeFactory {
      public getBannedPlayers_resultStandardScheme getScheme() {
        return new getBannedPlayers_resultStandardScheme();
      }
    }

    private static class getBannedPlayers_resultStandardScheme extends StandardScheme<getBannedPlayers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBannedPlayers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                  struct.success = new ArrayList<OfflinePlayer>(_list90.size);
                  for (int _i91 = 0; _i91 < _list90.size; ++_i91)
                  {
                    OfflinePlayer _elem92;
                    _elem92 = new OfflinePlayer();
                    _elem92.read(iprot);
                    struct.success.add(_elem92);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBannedPlayers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (OfflinePlayer _iter93 : struct.success)
            {
              _iter93.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBannedPlayers_resultTupleSchemeFactory implements SchemeFactory {
      public getBannedPlayers_resultTupleScheme getScheme() {
        return new getBannedPlayers_resultTupleScheme();
      }
    }

    private static class getBannedPlayers_resultTupleScheme extends TupleScheme<getBannedPlayers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBannedPlayers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (OfflinePlayer _iter94 : struct.success)
            {
              _iter94.write(oprot);
            }
          }
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBannedPlayers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<OfflinePlayer>(_list95.size);
            for (int _i96 = 0; _i96 < _list95.size; ++_i96)
            {
              OfflinePlayer _elem97;
              _elem97 = new OfflinePlayer();
              _elem97.read(iprot);
              struct.success.add(_elem97);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class getBukkitVersion_args implements org.apache.thrift.TBase<getBukkitVersion_args, getBukkitVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBukkitVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBukkitVersion_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBukkitVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBukkitVersion_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBukkitVersion_args.class, metaDataMap);
    }

    public getBukkitVersion_args() {
    }

    public getBukkitVersion_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBukkitVersion_args(getBukkitVersion_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getBukkitVersion_args deepCopy() {
      return new getBukkitVersion_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getBukkitVersion_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBukkitVersion_args)
        return this.equals((getBukkitVersion_args)that);
      return false;
    }

    public boolean equals(getBukkitVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBukkitVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBukkitVersion_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBukkitVersion_argsStandardSchemeFactory implements SchemeFactory {
      public getBukkitVersion_argsStandardScheme getScheme() {
        return new getBukkitVersion_argsStandardScheme();
      }
    }

    private static class getBukkitVersion_argsStandardScheme extends StandardScheme<getBukkitVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBukkitVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBukkitVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBukkitVersion_argsTupleSchemeFactory implements SchemeFactory {
      public getBukkitVersion_argsTupleScheme getScheme() {
        return new getBukkitVersion_argsTupleScheme();
      }
    }

    private static class getBukkitVersion_argsTupleScheme extends TupleScheme<getBukkitVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBukkitVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBukkitVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getBukkitVersion_result implements org.apache.thrift.TBase<getBukkitVersion_result, getBukkitVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBukkitVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBukkitVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBukkitVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBukkitVersion_resultTupleSchemeFactory());
    }

    public String success; // required
    public EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBukkitVersion_result.class, metaDataMap);
    }

    public getBukkitVersion_result() {
    }

    public getBukkitVersion_result(
      String success,
      EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBukkitVersion_result(getBukkitVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
    }

    public getBukkitVersion_result deepCopy() {
      return new getBukkitVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getBukkitVersion_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getBukkitVersion_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBukkitVersion_result)
        return this.equals((getBukkitVersion_result)that);
      return false;
    }

    public boolean equals(getBukkitVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBukkitVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBukkitVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBukkitVersion_resultStandardSchemeFactory implements SchemeFactory {
      public getBukkitVersion_resultStandardScheme getScheme() {
        return new getBukkitVersion_resultStandardScheme();
      }
    }

    private static class getBukkitVersion_resultStandardScheme extends StandardScheme<getBukkitVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBukkitVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBukkitVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBukkitVersion_resultTupleSchemeFactory implements SchemeFactory {
      public getBukkitVersion_resultTupleScheme getScheme() {
        return new getBukkitVersion_resultTupleScheme();
      }
    }

    private static class getBukkitVersion_resultTupleScheme extends TupleScheme<getBukkitVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBukkitVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBukkitVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class getConsoleMessages_args implements org.apache.thrift.TBase<getConsoleMessages_args, getConsoleMessages_args._Fields>, java.io.Serializable, Cloneable, Comparable<getConsoleMessages_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConsoleMessages_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("since", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConsoleMessages_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConsoleMessages_argsTupleSchemeFactory());
    }

    public String authString; // required
    public long since; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      SINCE((short)2, "since");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // SINCE
            return SINCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SINCE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SINCE, new org.apache.thrift.meta_data.FieldMetaData("since", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConsoleMessages_args.class, metaDataMap);
    }

    public getConsoleMessages_args() {
    }

    public getConsoleMessages_args(
      String authString,
      long since)
    {
      this();
      this.authString = authString;
      this.since = since;
      setSinceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConsoleMessages_args(getConsoleMessages_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      this.since = other.since;
    }

    public getConsoleMessages_args deepCopy() {
      return new getConsoleMessages_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      setSinceIsSet(false);
      this.since = 0;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getConsoleMessages_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public long getSince() {
      return this.since;
    }

    public getConsoleMessages_args setSince(long since) {
      this.since = since;
      setSinceIsSet(true);
      return this;
    }

    public void unsetSince() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SINCE_ISSET_ID);
    }

    /** Returns true if field since is set (has been assigned a value) and false otherwise */
    public boolean isSetSince() {
      return EncodingUtils.testBit(__isset_bitfield, __SINCE_ISSET_ID);
    }

    public void setSinceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SINCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case SINCE:
        if (value == null) {
          unsetSince();
        } else {
          setSince((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case SINCE:
        return Long.valueOf(getSince());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case SINCE:
        return isSetSince();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConsoleMessages_args)
        return this.equals((getConsoleMessages_args)that);
      return false;
    }

    public boolean equals(getConsoleMessages_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_since = true;
      boolean that_present_since = true;
      if (this_present_since || that_present_since) {
        if (!(this_present_since && that_present_since))
          return false;
        if (this.since != that.since)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getConsoleMessages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSince()).compareTo(other.isSetSince());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSince()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.since, other.since);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConsoleMessages_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("since:");
      sb.append(this.since);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConsoleMessages_argsStandardSchemeFactory implements SchemeFactory {
      public getConsoleMessages_argsStandardScheme getScheme() {
        return new getConsoleMessages_argsStandardScheme();
      }
    }

    private static class getConsoleMessages_argsStandardScheme extends StandardScheme<getConsoleMessages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConsoleMessages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SINCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.since = iprot.readI64();
                struct.setSinceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConsoleMessages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SINCE_FIELD_DESC);
        oprot.writeI64(struct.since);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConsoleMessages_argsTupleSchemeFactory implements SchemeFactory {
      public getConsoleMessages_argsTupleScheme getScheme() {
        return new getConsoleMessages_argsTupleScheme();
      }
    }

    private static class getConsoleMessages_argsTupleScheme extends TupleScheme<getConsoleMessages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConsoleMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetSince()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetSince()) {
          oprot.writeI64(struct.since);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConsoleMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.since = iprot.readI64();
          struct.setSinceIsSet(true);
        }
      }
    }

  }

  public static class getConsoleMessages_result implements org.apache.thrift.TBase<getConsoleMessages_result, getConsoleMessages_result._Fields>, java.io.Serializable, Cloneable, Comparable<getConsoleMessages_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConsoleMessages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConsoleMessages_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConsoleMessages_resultTupleSchemeFactory());
    }

    public List<ConsoleLine> success; // required
    public EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConsoleLine.class))));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConsoleMessages_result.class, metaDataMap);
    }

    public getConsoleMessages_result() {
    }

    public getConsoleMessages_result(
      List<ConsoleLine> success,
      EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConsoleMessages_result(getConsoleMessages_result other) {
      if (other.isSetSuccess()) {
        List<ConsoleLine> __this__success = new ArrayList<ConsoleLine>(other.success.size());
        for (ConsoleLine other_element : other.success) {
          __this__success.add(new ConsoleLine(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
    }

    public getConsoleMessages_result deepCopy() {
      return new getConsoleMessages_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ConsoleLine> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ConsoleLine elem) {
      if (this.success == null) {
        this.success = new ArrayList<ConsoleLine>();
      }
      this.success.add(elem);
    }

    public List<ConsoleLine> getSuccess() {
      return this.success;
    }

    public getConsoleMessages_result setSuccess(List<ConsoleLine> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getConsoleMessages_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ConsoleLine>)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConsoleMessages_result)
        return this.equals((getConsoleMessages_result)that);
      return false;
    }

    public boolean equals(getConsoleMessages_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getConsoleMessages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConsoleMessages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConsoleMessages_resultStandardSchemeFactory implements SchemeFactory {
      public getConsoleMessages_resultStandardScheme getScheme() {
        return new getConsoleMessages_resultStandardScheme();
      }
    }

    private static class getConsoleMessages_resultStandardScheme extends StandardScheme<getConsoleMessages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConsoleMessages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                  struct.success = new ArrayList<ConsoleLine>(_list98.size);
                  for (int _i99 = 0; _i99 < _list98.size; ++_i99)
                  {
                    ConsoleLine _elem100;
                    _elem100 = new ConsoleLine();
                    _elem100.read(iprot);
                    struct.success.add(_elem100);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConsoleMessages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ConsoleLine _iter101 : struct.success)
            {
              _iter101.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConsoleMessages_resultTupleSchemeFactory implements SchemeFactory {
      public getConsoleMessages_resultTupleScheme getScheme() {
        return new getConsoleMessages_resultTupleScheme();
      }
    }

    private static class getConsoleMessages_resultTupleScheme extends TupleScheme<getConsoleMessages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConsoleMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ConsoleLine _iter102 : struct.success)
            {
              _iter102.write(oprot);
            }
          }
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConsoleMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ConsoleLine>(_list103.size);
            for (int _i104 = 0; _i104 < _list103.size; ++_i104)
            {
              ConsoleLine _elem105;
              _elem105 = new ConsoleLine();
              _elem105.read(iprot);
              struct.success.add(_elem105);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class getFileContents_args implements org.apache.thrift.TBase<getFileContents_args, getFileContents_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFileContents_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileContents_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFileContents_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFileContents_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String fileName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      FILE_NAME((short)2, "fileName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // FILE_NAME
            return FILE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileContents_args.class, metaDataMap);
    }

    public getFileContents_args() {
    }

    public getFileContents_args(
      String authString,
      String fileName)
    {
      this();
      this.authString = authString;
      this.fileName = fileName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFileContents_args(getFileContents_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
    }

    public getFileContents_args deepCopy() {
      return new getFileContents_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.fileName = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getFileContents_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getFileName() {
      return this.fileName;
    }

    public getFileContents_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case FILE_NAME:
        return getFileName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case FILE_NAME:
        return isSetFileName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFileContents_args)
        return this.equals((getFileContents_args)that);
      return false;
    }

    public boolean equals(getFileContents_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFileContents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFileContents_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFileContents_argsStandardSchemeFactory implements SchemeFactory {
      public getFileContents_argsStandardScheme getScheme() {
        return new getFileContents_argsStandardScheme();
      }
    }

    private static class getFileContents_argsStandardScheme extends StandardScheme<getFileContents_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFileContents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFileContents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFileContents_argsTupleSchemeFactory implements SchemeFactory {
      public getFileContents_argsTupleScheme getScheme() {
        return new getFileContents_argsTupleScheme();
      }
    }

    private static class getFileContents_argsTupleScheme extends TupleScheme<getFileContents_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFileContents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetFileName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFileContents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
      }
    }

  }

  public static class getFileContents_result implements org.apache.thrift.TBase<getFileContents_result, getFileContents_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFileContents_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileContents_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFileContents_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFileContents_resultTupleSchemeFactory());
    }

    public String success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileContents_result.class, metaDataMap);
    }

    public getFileContents_result() {
    }

    public getFileContents_result(
      String success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFileContents_result(getFileContents_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public getFileContents_result deepCopy() {
      return new getFileContents_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
      this.dex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getFileContents_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getFileContents_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public getFileContents_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFileContents_result)
        return this.equals((getFileContents_result)that);
      return false;
    }

    public boolean equals(getFileContents_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFileContents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFileContents_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFileContents_resultStandardSchemeFactory implements SchemeFactory {
      public getFileContents_resultStandardScheme getScheme() {
        return new getFileContents_resultStandardScheme();
      }
    }

    private static class getFileContents_resultStandardScheme extends StandardScheme<getFileContents_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFileContents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFileContents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFileContents_resultTupleSchemeFactory implements SchemeFactory {
      public getFileContents_resultTupleScheme getScheme() {
        return new getFileContents_resultTupleScheme();
      }
    }

    private static class getFileContents_resultTupleScheme extends TupleScheme<getFileContents_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFileContents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFileContents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class getOfflinePlayer_args implements org.apache.thrift.TBase<getOfflinePlayer_args, getOfflinePlayer_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOfflinePlayer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOfflinePlayer_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOfflinePlayer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOfflinePlayer_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOfflinePlayer_args.class, metaDataMap);
    }

    public getOfflinePlayer_args() {
    }

    public getOfflinePlayer_args(
      String authString,
      String name)
    {
      this();
      this.authString = authString;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOfflinePlayer_args(getOfflinePlayer_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getOfflinePlayer_args deepCopy() {
      return new getOfflinePlayer_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getOfflinePlayer_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public getOfflinePlayer_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOfflinePlayer_args)
        return this.equals((getOfflinePlayer_args)that);
      return false;
    }

    public boolean equals(getOfflinePlayer_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getOfflinePlayer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOfflinePlayer_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOfflinePlayer_argsStandardSchemeFactory implements SchemeFactory {
      public getOfflinePlayer_argsStandardScheme getScheme() {
        return new getOfflinePlayer_argsStandardScheme();
      }
    }

    private static class getOfflinePlayer_argsStandardScheme extends StandardScheme<getOfflinePlayer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOfflinePlayer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOfflinePlayer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOfflinePlayer_argsTupleSchemeFactory implements SchemeFactory {
      public getOfflinePlayer_argsTupleScheme getScheme() {
        return new getOfflinePlayer_argsTupleScheme();
      }
    }

    private static class getOfflinePlayer_argsTupleScheme extends TupleScheme<getOfflinePlayer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOfflinePlayer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOfflinePlayer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class getOfflinePlayer_result implements org.apache.thrift.TBase<getOfflinePlayer_result, getOfflinePlayer_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOfflinePlayer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOfflinePlayer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOfflinePlayer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOfflinePlayer_resultTupleSchemeFactory());
    }

    public OfflinePlayer success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OfflinePlayer.class)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOfflinePlayer_result.class, metaDataMap);
    }

    public getOfflinePlayer_result() {
    }

    public getOfflinePlayer_result(
      OfflinePlayer success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOfflinePlayer_result(getOfflinePlayer_result other) {
      if (other.isSetSuccess()) {
        this.success = new OfflinePlayer(other.success);
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public getOfflinePlayer_result deepCopy() {
      return new getOfflinePlayer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
      this.dex = null;
    }

    public OfflinePlayer getSuccess() {
      return this.success;
    }

    public getOfflinePlayer_result setSuccess(OfflinePlayer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getOfflinePlayer_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public getOfflinePlayer_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OfflinePlayer)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOfflinePlayer_result)
        return this.equals((getOfflinePlayer_result)that);
      return false;
    }

    public boolean equals(getOfflinePlayer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getOfflinePlayer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOfflinePlayer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOfflinePlayer_resultStandardSchemeFactory implements SchemeFactory {
      public getOfflinePlayer_resultStandardScheme getScheme() {
        return new getOfflinePlayer_resultStandardScheme();
      }
    }

    private static class getOfflinePlayer_resultStandardScheme extends StandardScheme<getOfflinePlayer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOfflinePlayer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OfflinePlayer();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOfflinePlayer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOfflinePlayer_resultTupleSchemeFactory implements SchemeFactory {
      public getOfflinePlayer_resultTupleScheme getScheme() {
        return new getOfflinePlayer_resultTupleScheme();
      }
    }

    private static class getOfflinePlayer_resultTupleScheme extends TupleScheme<getOfflinePlayer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOfflinePlayer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOfflinePlayer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new OfflinePlayer();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class getOfflinePlayers_args implements org.apache.thrift.TBase<getOfflinePlayers_args, getOfflinePlayers_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOfflinePlayers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOfflinePlayers_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOfflinePlayers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOfflinePlayers_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOfflinePlayers_args.class, metaDataMap);
    }

    public getOfflinePlayers_args() {
    }

    public getOfflinePlayers_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOfflinePlayers_args(getOfflinePlayers_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getOfflinePlayers_args deepCopy() {
      return new getOfflinePlayers_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getOfflinePlayers_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOfflinePlayers_args)
        return this.equals((getOfflinePlayers_args)that);
      return false;
    }

    public boolean equals(getOfflinePlayers_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getOfflinePlayers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOfflinePlayers_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOfflinePlayers_argsStandardSchemeFactory implements SchemeFactory {
      public getOfflinePlayers_argsStandardScheme getScheme() {
        return new getOfflinePlayers_argsStandardScheme();
      }
    }

    private static class getOfflinePlayers_argsStandardScheme extends StandardScheme<getOfflinePlayers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOfflinePlayers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOfflinePlayers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOfflinePlayers_argsTupleSchemeFactory implements SchemeFactory {
      public getOfflinePlayers_argsTupleScheme getScheme() {
        return new getOfflinePlayers_argsTupleScheme();
      }
    }

    private static class getOfflinePlayers_argsTupleScheme extends TupleScheme<getOfflinePlayers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOfflinePlayers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOfflinePlayers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getOfflinePlayers_result implements org.apache.thrift.TBase<getOfflinePlayers_result, getOfflinePlayers_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOfflinePlayers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOfflinePlayers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOfflinePlayers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOfflinePlayers_resultTupleSchemeFactory());
    }

    public List<OfflinePlayer> success; // required
    public EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OfflinePlayer.class))));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOfflinePlayers_result.class, metaDataMap);
    }

    public getOfflinePlayers_result() {
    }

    public getOfflinePlayers_result(
      List<OfflinePlayer> success,
      EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOfflinePlayers_result(getOfflinePlayers_result other) {
      if (other.isSetSuccess()) {
        List<OfflinePlayer> __this__success = new ArrayList<OfflinePlayer>(other.success.size());
        for (OfflinePlayer other_element : other.success) {
          __this__success.add(new OfflinePlayer(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
    }

    public getOfflinePlayers_result deepCopy() {
      return new getOfflinePlayers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<OfflinePlayer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(OfflinePlayer elem) {
      if (this.success == null) {
        this.success = new ArrayList<OfflinePlayer>();
      }
      this.success.add(elem);
    }

    public List<OfflinePlayer> getSuccess() {
      return this.success;
    }

    public getOfflinePlayers_result setSuccess(List<OfflinePlayer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getOfflinePlayers_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<OfflinePlayer>)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOfflinePlayers_result)
        return this.equals((getOfflinePlayers_result)that);
      return false;
    }

    public boolean equals(getOfflinePlayers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getOfflinePlayers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOfflinePlayers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOfflinePlayers_resultStandardSchemeFactory implements SchemeFactory {
      public getOfflinePlayers_resultStandardScheme getScheme() {
        return new getOfflinePlayers_resultStandardScheme();
      }
    }

    private static class getOfflinePlayers_resultStandardScheme extends StandardScheme<getOfflinePlayers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOfflinePlayers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                  struct.success = new ArrayList<OfflinePlayer>(_list106.size);
                  for (int _i107 = 0; _i107 < _list106.size; ++_i107)
                  {
                    OfflinePlayer _elem108;
                    _elem108 = new OfflinePlayer();
                    _elem108.read(iprot);
                    struct.success.add(_elem108);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOfflinePlayers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (OfflinePlayer _iter109 : struct.success)
            {
              _iter109.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOfflinePlayers_resultTupleSchemeFactory implements SchemeFactory {
      public getOfflinePlayers_resultTupleScheme getScheme() {
        return new getOfflinePlayers_resultTupleScheme();
      }
    }

    private static class getOfflinePlayers_resultTupleScheme extends TupleScheme<getOfflinePlayers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOfflinePlayers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (OfflinePlayer _iter110 : struct.success)
            {
              _iter110.write(oprot);
            }
          }
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOfflinePlayers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<OfflinePlayer>(_list111.size);
            for (int _i112 = 0; _i112 < _list111.size; ++_i112)
            {
              OfflinePlayer _elem113;
              _elem113 = new OfflinePlayer();
              _elem113.read(iprot);
              struct.success.add(_elem113);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class getOps_args implements org.apache.thrift.TBase<getOps_args, getOps_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOps_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOps_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOps_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOps_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOps_args.class, metaDataMap);
    }

    public getOps_args() {
    }

    public getOps_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOps_args(getOps_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getOps_args deepCopy() {
      return new getOps_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getOps_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOps_args)
        return this.equals((getOps_args)that);
      return false;
    }

    public boolean equals(getOps_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getOps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOps_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOps_argsStandardSchemeFactory implements SchemeFactory {
      public getOps_argsStandardScheme getScheme() {
        return new getOps_argsStandardScheme();
      }
    }

    private static class getOps_argsStandardScheme extends StandardScheme<getOps_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOps_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOps_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOps_argsTupleSchemeFactory implements SchemeFactory {
      public getOps_argsTupleScheme getScheme() {
        return new getOps_argsTupleScheme();
      }
    }

    private static class getOps_argsTupleScheme extends TupleScheme<getOps_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getOps_result implements org.apache.thrift.TBase<getOps_result, getOps_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOps_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOps_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOps_resultTupleSchemeFactory());
    }

    public List<OfflinePlayer> success; // required
    public EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OfflinePlayer.class))));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOps_result.class, metaDataMap);
    }

    public getOps_result() {
    }

    public getOps_result(
      List<OfflinePlayer> success,
      EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOps_result(getOps_result other) {
      if (other.isSetSuccess()) {
        List<OfflinePlayer> __this__success = new ArrayList<OfflinePlayer>(other.success.size());
        for (OfflinePlayer other_element : other.success) {
          __this__success.add(new OfflinePlayer(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
    }

    public getOps_result deepCopy() {
      return new getOps_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<OfflinePlayer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(OfflinePlayer elem) {
      if (this.success == null) {
        this.success = new ArrayList<OfflinePlayer>();
      }
      this.success.add(elem);
    }

    public List<OfflinePlayer> getSuccess() {
      return this.success;
    }

    public getOps_result setSuccess(List<OfflinePlayer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getOps_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<OfflinePlayer>)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOps_result)
        return this.equals((getOps_result)that);
      return false;
    }

    public boolean equals(getOps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getOps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOps_resultStandardSchemeFactory implements SchemeFactory {
      public getOps_resultStandardScheme getScheme() {
        return new getOps_resultStandardScheme();
      }
    }

    private static class getOps_resultStandardScheme extends StandardScheme<getOps_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOps_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list114 = iprot.readListBegin();
                  struct.success = new ArrayList<OfflinePlayer>(_list114.size);
                  for (int _i115 = 0; _i115 < _list114.size; ++_i115)
                  {
                    OfflinePlayer _elem116;
                    _elem116 = new OfflinePlayer();
                    _elem116.read(iprot);
                    struct.success.add(_elem116);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOps_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (OfflinePlayer _iter117 : struct.success)
            {
              _iter117.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOps_resultTupleSchemeFactory implements SchemeFactory {
      public getOps_resultTupleScheme getScheme() {
        return new getOps_resultTupleScheme();
      }
    }

    private static class getOps_resultTupleScheme extends TupleScheme<getOps_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (OfflinePlayer _iter118 : struct.success)
            {
              _iter118.write(oprot);
            }
          }
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<OfflinePlayer>(_list119.size);
            for (int _i120 = 0; _i120 < _list119.size; ++_i120)
            {
              OfflinePlayer _elem121;
              _elem121 = new OfflinePlayer();
              _elem121.read(iprot);
              struct.success.add(_elem121);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class getPlayer_args implements org.apache.thrift.TBase<getPlayer_args, getPlayer_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPlayer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlayer_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlayer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlayer_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlayer_args.class, metaDataMap);
    }

    public getPlayer_args() {
    }

    public getPlayer_args(
      String authString,
      String name)
    {
      this();
      this.authString = authString;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlayer_args(getPlayer_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getPlayer_args deepCopy() {
      return new getPlayer_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getPlayer_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public getPlayer_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlayer_args)
        return this.equals((getPlayer_args)that);
      return false;
    }

    public boolean equals(getPlayer_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPlayer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlayer_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlayer_argsStandardSchemeFactory implements SchemeFactory {
      public getPlayer_argsStandardScheme getScheme() {
        return new getPlayer_argsStandardScheme();
      }
    }

    private static class getPlayer_argsStandardScheme extends StandardScheme<getPlayer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlayer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlayer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlayer_argsTupleSchemeFactory implements SchemeFactory {
      public getPlayer_argsTupleScheme getScheme() {
        return new getPlayer_argsTupleScheme();
      }
    }

    private static class getPlayer_argsTupleScheme extends TupleScheme<getPlayer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlayer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlayer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class getPlayer_result implements org.apache.thrift.TBase<getPlayer_result, getPlayer_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPlayer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlayer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlayer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlayer_resultTupleSchemeFactory());
    }

    public Player success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Player.class)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlayer_result.class, metaDataMap);
    }

    public getPlayer_result() {
    }

    public getPlayer_result(
      Player success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlayer_result(getPlayer_result other) {
      if (other.isSetSuccess()) {
        this.success = new Player(other.success);
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public getPlayer_result deepCopy() {
      return new getPlayer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
      this.dex = null;
    }

    public Player getSuccess() {
      return this.success;
    }

    public getPlayer_result setSuccess(Player success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getPlayer_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public getPlayer_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Player)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlayer_result)
        return this.equals((getPlayer_result)that);
      return false;
    }

    public boolean equals(getPlayer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPlayer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlayer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlayer_resultStandardSchemeFactory implements SchemeFactory {
      public getPlayer_resultStandardScheme getScheme() {
        return new getPlayer_resultStandardScheme();
      }
    }

    private static class getPlayer_resultStandardScheme extends StandardScheme<getPlayer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlayer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Player();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlayer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlayer_resultTupleSchemeFactory implements SchemeFactory {
      public getPlayer_resultTupleScheme getScheme() {
        return new getPlayer_resultTupleScheme();
      }
    }

    private static class getPlayer_resultTupleScheme extends TupleScheme<getPlayer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlayer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlayer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new Player();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class getPlayers_args implements org.apache.thrift.TBase<getPlayers_args, getPlayers_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPlayers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlayers_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlayers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlayers_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlayers_args.class, metaDataMap);
    }

    public getPlayers_args() {
    }

    public getPlayers_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlayers_args(getPlayers_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getPlayers_args deepCopy() {
      return new getPlayers_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getPlayers_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlayers_args)
        return this.equals((getPlayers_args)that);
      return false;
    }

    public boolean equals(getPlayers_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPlayers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlayers_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlayers_argsStandardSchemeFactory implements SchemeFactory {
      public getPlayers_argsStandardScheme getScheme() {
        return new getPlayers_argsStandardScheme();
      }
    }

    private static class getPlayers_argsStandardScheme extends StandardScheme<getPlayers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlayers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlayers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlayers_argsTupleSchemeFactory implements SchemeFactory {
      public getPlayers_argsTupleScheme getScheme() {
        return new getPlayers_argsTupleScheme();
      }
    }

    private static class getPlayers_argsTupleScheme extends TupleScheme<getPlayers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlayers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlayers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getPlayers_result implements org.apache.thrift.TBase<getPlayers_result, getPlayers_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPlayers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlayers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlayers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlayers_resultTupleSchemeFactory());
    }

    public List<Player> success; // required
    public EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Player.class))));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlayers_result.class, metaDataMap);
    }

    public getPlayers_result() {
    }

    public getPlayers_result(
      List<Player> success,
      EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlayers_result(getPlayers_result other) {
      if (other.isSetSuccess()) {
        List<Player> __this__success = new ArrayList<Player>(other.success.size());
        for (Player other_element : other.success) {
          __this__success.add(new Player(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
    }

    public getPlayers_result deepCopy() {
      return new getPlayers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Player> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Player elem) {
      if (this.success == null) {
        this.success = new ArrayList<Player>();
      }
      this.success.add(elem);
    }

    public List<Player> getSuccess() {
      return this.success;
    }

    public getPlayers_result setSuccess(List<Player> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getPlayers_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Player>)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlayers_result)
        return this.equals((getPlayers_result)that);
      return false;
    }

    public boolean equals(getPlayers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPlayers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlayers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlayers_resultStandardSchemeFactory implements SchemeFactory {
      public getPlayers_resultStandardScheme getScheme() {
        return new getPlayers_resultStandardScheme();
      }
    }

    private static class getPlayers_resultStandardScheme extends StandardScheme<getPlayers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlayers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list122 = iprot.readListBegin();
                  struct.success = new ArrayList<Player>(_list122.size);
                  for (int _i123 = 0; _i123 < _list122.size; ++_i123)
                  {
                    Player _elem124;
                    _elem124 = new Player();
                    _elem124.read(iprot);
                    struct.success.add(_elem124);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlayers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Player _iter125 : struct.success)
            {
              _iter125.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlayers_resultTupleSchemeFactory implements SchemeFactory {
      public getPlayers_resultTupleScheme getScheme() {
        return new getPlayers_resultTupleScheme();
      }
    }

    private static class getPlayers_resultTupleScheme extends TupleScheme<getPlayers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlayers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Player _iter126 : struct.success)
            {
              _iter126.write(oprot);
            }
          }
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlayers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Player>(_list127.size);
            for (int _i128 = 0; _i128 < _list127.size; ++_i128)
            {
              Player _elem129;
              _elem129 = new Player();
              _elem129.read(iprot);
              struct.success.add(_elem129);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class getPlugin_args implements org.apache.thrift.TBase<getPlugin_args, getPlugin_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPlugin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlugin_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlugin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlugin_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlugin_args.class, metaDataMap);
    }

    public getPlugin_args() {
    }

    public getPlugin_args(
      String authString,
      String name)
    {
      this();
      this.authString = authString;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlugin_args(getPlugin_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getPlugin_args deepCopy() {
      return new getPlugin_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getPlugin_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public getPlugin_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlugin_args)
        return this.equals((getPlugin_args)that);
      return false;
    }

    public boolean equals(getPlugin_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPlugin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlugin_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlugin_argsStandardSchemeFactory implements SchemeFactory {
      public getPlugin_argsStandardScheme getScheme() {
        return new getPlugin_argsStandardScheme();
      }
    }

    private static class getPlugin_argsStandardScheme extends StandardScheme<getPlugin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlugin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlugin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlugin_argsTupleSchemeFactory implements SchemeFactory {
      public getPlugin_argsTupleScheme getScheme() {
        return new getPlugin_argsTupleScheme();
      }
    }

    private static class getPlugin_argsTupleScheme extends TupleScheme<getPlugin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlugin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlugin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class getPlugin_result implements org.apache.thrift.TBase<getPlugin_result, getPlugin_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPlugin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlugin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlugin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlugin_resultTupleSchemeFactory());
    }

    public Plugin success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Plugin.class)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlugin_result.class, metaDataMap);
    }

    public getPlugin_result() {
    }

    public getPlugin_result(
      Plugin success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlugin_result(getPlugin_result other) {
      if (other.isSetSuccess()) {
        this.success = new Plugin(other.success);
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public getPlugin_result deepCopy() {
      return new getPlugin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
      this.dex = null;
    }

    public Plugin getSuccess() {
      return this.success;
    }

    public getPlugin_result setSuccess(Plugin success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getPlugin_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public getPlugin_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Plugin)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlugin_result)
        return this.equals((getPlugin_result)that);
      return false;
    }

    public boolean equals(getPlugin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPlugin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlugin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlugin_resultStandardSchemeFactory implements SchemeFactory {
      public getPlugin_resultStandardScheme getScheme() {
        return new getPlugin_resultStandardScheme();
      }
    }

    private static class getPlugin_resultStandardScheme extends StandardScheme<getPlugin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlugin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Plugin();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlugin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlugin_resultTupleSchemeFactory implements SchemeFactory {
      public getPlugin_resultTupleScheme getScheme() {
        return new getPlugin_resultTupleScheme();
      }
    }

    private static class getPlugin_resultTupleScheme extends TupleScheme<getPlugin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlugin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlugin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new Plugin();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class getPlugins_args implements org.apache.thrift.TBase<getPlugins_args, getPlugins_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPlugins_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlugins_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlugins_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlugins_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlugins_args.class, metaDataMap);
    }

    public getPlugins_args() {
    }

    public getPlugins_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlugins_args(getPlugins_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getPlugins_args deepCopy() {
      return new getPlugins_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getPlugins_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlugins_args)
        return this.equals((getPlugins_args)that);
      return false;
    }

    public boolean equals(getPlugins_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPlugins_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlugins_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlugins_argsStandardSchemeFactory implements SchemeFactory {
      public getPlugins_argsStandardScheme getScheme() {
        return new getPlugins_argsStandardScheme();
      }
    }

    private static class getPlugins_argsStandardScheme extends StandardScheme<getPlugins_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlugins_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlugins_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlugins_argsTupleSchemeFactory implements SchemeFactory {
      public getPlugins_argsTupleScheme getScheme() {
        return new getPlugins_argsTupleScheme();
      }
    }

    private static class getPlugins_argsTupleScheme extends TupleScheme<getPlugins_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlugins_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlugins_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getPlugins_result implements org.apache.thrift.TBase<getPlugins_result, getPlugins_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPlugins_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlugins_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlugins_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlugins_resultTupleSchemeFactory());
    }

    public List<Plugin> success; // required
    public EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Plugin.class))));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlugins_result.class, metaDataMap);
    }

    public getPlugins_result() {
    }

    public getPlugins_result(
      List<Plugin> success,
      EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlugins_result(getPlugins_result other) {
      if (other.isSetSuccess()) {
        List<Plugin> __this__success = new ArrayList<Plugin>(other.success.size());
        for (Plugin other_element : other.success) {
          __this__success.add(new Plugin(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
    }

    public getPlugins_result deepCopy() {
      return new getPlugins_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Plugin> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Plugin elem) {
      if (this.success == null) {
        this.success = new ArrayList<Plugin>();
      }
      this.success.add(elem);
    }

    public List<Plugin> getSuccess() {
      return this.success;
    }

    public getPlugins_result setSuccess(List<Plugin> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getPlugins_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Plugin>)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlugins_result)
        return this.equals((getPlugins_result)that);
      return false;
    }

    public boolean equals(getPlugins_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPlugins_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlugins_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlugins_resultStandardSchemeFactory implements SchemeFactory {
      public getPlugins_resultStandardScheme getScheme() {
        return new getPlugins_resultStandardScheme();
      }
    }

    private static class getPlugins_resultStandardScheme extends StandardScheme<getPlugins_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlugins_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                  struct.success = new ArrayList<Plugin>(_list130.size);
                  for (int _i131 = 0; _i131 < _list130.size; ++_i131)
                  {
                    Plugin _elem132;
                    _elem132 = new Plugin();
                    _elem132.read(iprot);
                    struct.success.add(_elem132);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlugins_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Plugin _iter133 : struct.success)
            {
              _iter133.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlugins_resultTupleSchemeFactory implements SchemeFactory {
      public getPlugins_resultTupleScheme getScheme() {
        return new getPlugins_resultTupleScheme();
      }
    }

    private static class getPlugins_resultTupleScheme extends TupleScheme<getPlugins_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlugins_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Plugin _iter134 : struct.success)
            {
              _iter134.write(oprot);
            }
          }
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlugins_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Plugin>(_list135.size);
            for (int _i136 = 0; _i136 < _list135.size; ++_i136)
            {
              Plugin _elem137;
              _elem137 = new Plugin();
              _elem137.read(iprot);
              struct.success.add(_elem137);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class getServer_args implements org.apache.thrift.TBase<getServer_args, getServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<getServer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServer_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServer_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServer_args.class, metaDataMap);
    }

    public getServer_args() {
    }

    public getServer_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServer_args(getServer_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getServer_args deepCopy() {
      return new getServer_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getServer_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServer_args)
        return this.equals((getServer_args)that);
      return false;
    }

    public boolean equals(getServer_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServer_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServer_argsStandardSchemeFactory implements SchemeFactory {
      public getServer_argsStandardScheme getScheme() {
        return new getServer_argsStandardScheme();
      }
    }

    private static class getServer_argsStandardScheme extends StandardScheme<getServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServer_argsTupleSchemeFactory implements SchemeFactory {
      public getServer_argsTupleScheme getScheme() {
        return new getServer_argsTupleScheme();
      }
    }

    private static class getServer_argsTupleScheme extends TupleScheme<getServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getServer_result implements org.apache.thrift.TBase<getServer_result, getServer_result._Fields>, java.io.Serializable, Cloneable, Comparable<getServer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServer_resultTupleSchemeFactory());
    }

    public Server success; // required
    public EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Server.class)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServer_result.class, metaDataMap);
    }

    public getServer_result() {
    }

    public getServer_result(
      Server success,
      EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServer_result(getServer_result other) {
      if (other.isSetSuccess()) {
        this.success = new Server(other.success);
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
    }

    public getServer_result deepCopy() {
      return new getServer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public Server getSuccess() {
      return this.success;
    }

    public getServer_result setSuccess(Server success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getServer_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Server)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServer_result)
        return this.equals((getServer_result)that);
      return false;
    }

    public boolean equals(getServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServer_resultStandardSchemeFactory implements SchemeFactory {
      public getServer_resultStandardScheme getScheme() {
        return new getServer_resultStandardScheme();
      }
    }

    private static class getServer_resultStandardScheme extends StandardScheme<getServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Server();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServer_resultTupleSchemeFactory implements SchemeFactory {
      public getServer_resultTupleScheme getScheme() {
        return new getServer_resultTupleScheme();
      }
    }

    private static class getServer_resultTupleScheme extends TupleScheme<getServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Server();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class getServerVersion_args implements org.apache.thrift.TBase<getServerVersion_args, getServerVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getServerVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerVersion_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServerVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServerVersion_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerVersion_args.class, metaDataMap);
    }

    public getServerVersion_args() {
    }

    public getServerVersion_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerVersion_args(getServerVersion_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getServerVersion_args deepCopy() {
      return new getServerVersion_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getServerVersion_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServerVersion_args)
        return this.equals((getServerVersion_args)that);
      return false;
    }

    public boolean equals(getServerVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getServerVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServerVersion_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServerVersion_argsStandardSchemeFactory implements SchemeFactory {
      public getServerVersion_argsStandardScheme getScheme() {
        return new getServerVersion_argsStandardScheme();
      }
    }

    private static class getServerVersion_argsStandardScheme extends StandardScheme<getServerVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServerVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServerVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServerVersion_argsTupleSchemeFactory implements SchemeFactory {
      public getServerVersion_argsTupleScheme getScheme() {
        return new getServerVersion_argsTupleScheme();
      }
    }

    private static class getServerVersion_argsTupleScheme extends TupleScheme<getServerVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServerVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServerVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getServerVersion_result implements org.apache.thrift.TBase<getServerVersion_result, getServerVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getServerVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServerVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServerVersion_resultTupleSchemeFactory());
    }

    public String success; // required
    public EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerVersion_result.class, metaDataMap);
    }

    public getServerVersion_result() {
    }

    public getServerVersion_result(
      String success,
      EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerVersion_result(getServerVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
    }

    public getServerVersion_result deepCopy() {
      return new getServerVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getServerVersion_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getServerVersion_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServerVersion_result)
        return this.equals((getServerVersion_result)that);
      return false;
    }

    public boolean equals(getServerVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getServerVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServerVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServerVersion_resultStandardSchemeFactory implements SchemeFactory {
      public getServerVersion_resultStandardScheme getScheme() {
        return new getServerVersion_resultStandardScheme();
      }
    }

    private static class getServerVersion_resultStandardScheme extends StandardScheme<getServerVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServerVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServerVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServerVersion_resultTupleSchemeFactory implements SchemeFactory {
      public getServerVersion_resultTupleScheme getScheme() {
        return new getServerVersion_resultTupleScheme();
      }
    }

    private static class getServerVersion_resultTupleScheme extends TupleScheme<getServerVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServerVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServerVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class getWhitelist_args implements org.apache.thrift.TBase<getWhitelist_args, getWhitelist_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWhitelist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWhitelist_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWhitelist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWhitelist_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWhitelist_args.class, metaDataMap);
    }

    public getWhitelist_args() {
    }

    public getWhitelist_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWhitelist_args(getWhitelist_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getWhitelist_args deepCopy() {
      return new getWhitelist_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getWhitelist_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWhitelist_args)
        return this.equals((getWhitelist_args)that);
      return false;
    }

    public boolean equals(getWhitelist_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWhitelist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWhitelist_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWhitelist_argsStandardSchemeFactory implements SchemeFactory {
      public getWhitelist_argsStandardScheme getScheme() {
        return new getWhitelist_argsStandardScheme();
      }
    }

    private static class getWhitelist_argsStandardScheme extends StandardScheme<getWhitelist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWhitelist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWhitelist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWhitelist_argsTupleSchemeFactory implements SchemeFactory {
      public getWhitelist_argsTupleScheme getScheme() {
        return new getWhitelist_argsTupleScheme();
      }
    }

    private static class getWhitelist_argsTupleScheme extends TupleScheme<getWhitelist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWhitelist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWhitelist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getWhitelist_result implements org.apache.thrift.TBase<getWhitelist_result, getWhitelist_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWhitelist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWhitelist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWhitelist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWhitelist_resultTupleSchemeFactory());
    }

    public List<OfflinePlayer> success; // required
    public EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OfflinePlayer.class))));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWhitelist_result.class, metaDataMap);
    }

    public getWhitelist_result() {
    }

    public getWhitelist_result(
      List<OfflinePlayer> success,
      EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWhitelist_result(getWhitelist_result other) {
      if (other.isSetSuccess()) {
        List<OfflinePlayer> __this__success = new ArrayList<OfflinePlayer>(other.success.size());
        for (OfflinePlayer other_element : other.success) {
          __this__success.add(new OfflinePlayer(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
    }

    public getWhitelist_result deepCopy() {
      return new getWhitelist_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<OfflinePlayer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(OfflinePlayer elem) {
      if (this.success == null) {
        this.success = new ArrayList<OfflinePlayer>();
      }
      this.success.add(elem);
    }

    public List<OfflinePlayer> getSuccess() {
      return this.success;
    }

    public getWhitelist_result setSuccess(List<OfflinePlayer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getWhitelist_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<OfflinePlayer>)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWhitelist_result)
        return this.equals((getWhitelist_result)that);
      return false;
    }

    public boolean equals(getWhitelist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWhitelist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWhitelist_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWhitelist_resultStandardSchemeFactory implements SchemeFactory {
      public getWhitelist_resultStandardScheme getScheme() {
        return new getWhitelist_resultStandardScheme();
      }
    }

    private static class getWhitelist_resultStandardScheme extends StandardScheme<getWhitelist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWhitelist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list138 = iprot.readListBegin();
                  struct.success = new ArrayList<OfflinePlayer>(_list138.size);
                  for (int _i139 = 0; _i139 < _list138.size; ++_i139)
                  {
                    OfflinePlayer _elem140;
                    _elem140 = new OfflinePlayer();
                    _elem140.read(iprot);
                    struct.success.add(_elem140);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWhitelist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (OfflinePlayer _iter141 : struct.success)
            {
              _iter141.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWhitelist_resultTupleSchemeFactory implements SchemeFactory {
      public getWhitelist_resultTupleScheme getScheme() {
        return new getWhitelist_resultTupleScheme();
      }
    }

    private static class getWhitelist_resultTupleScheme extends TupleScheme<getWhitelist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWhitelist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (OfflinePlayer _iter142 : struct.success)
            {
              _iter142.write(oprot);
            }
          }
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWhitelist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list143 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<OfflinePlayer>(_list143.size);
            for (int _i144 = 0; _i144 < _list143.size; ++_i144)
            {
              OfflinePlayer _elem145;
              _elem145 = new OfflinePlayer();
              _elem145.read(iprot);
              struct.success.add(_elem145);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class getWorld_args implements org.apache.thrift.TBase<getWorld_args, getWorld_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWorld_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorld_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WORLD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("worldName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorld_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorld_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String worldName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      WORLD_NAME((short)2, "worldName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // WORLD_NAME
            return WORLD_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WORLD_NAME, new org.apache.thrift.meta_data.FieldMetaData("worldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorld_args.class, metaDataMap);
    }

    public getWorld_args() {
    }

    public getWorld_args(
      String authString,
      String worldName)
    {
      this();
      this.authString = authString;
      this.worldName = worldName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorld_args(getWorld_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetWorldName()) {
        this.worldName = other.worldName;
      }
    }

    public getWorld_args deepCopy() {
      return new getWorld_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.worldName = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getWorld_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getWorldName() {
      return this.worldName;
    }

    public getWorld_args setWorldName(String worldName) {
      this.worldName = worldName;
      return this;
    }

    public void unsetWorldName() {
      this.worldName = null;
    }

    /** Returns true if field worldName is set (has been assigned a value) and false otherwise */
    public boolean isSetWorldName() {
      return this.worldName != null;
    }

    public void setWorldNameIsSet(boolean value) {
      if (!value) {
        this.worldName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case WORLD_NAME:
        if (value == null) {
          unsetWorldName();
        } else {
          setWorldName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case WORLD_NAME:
        return getWorldName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case WORLD_NAME:
        return isSetWorldName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorld_args)
        return this.equals((getWorld_args)that);
      return false;
    }

    public boolean equals(getWorld_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_worldName = true && this.isSetWorldName();
      boolean that_present_worldName = true && that.isSetWorldName();
      if (this_present_worldName || that_present_worldName) {
        if (!(this_present_worldName && that_present_worldName))
          return false;
        if (!this.worldName.equals(that.worldName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWorld_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWorldName()).compareTo(other.isSetWorldName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorldName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worldName, other.worldName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorld_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("worldName:");
      if (this.worldName == null) {
        sb.append("null");
      } else {
        sb.append(this.worldName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorld_argsStandardSchemeFactory implements SchemeFactory {
      public getWorld_argsStandardScheme getScheme() {
        return new getWorld_argsStandardScheme();
      }
    }

    private static class getWorld_argsStandardScheme extends StandardScheme<getWorld_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorld_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORLD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.worldName = iprot.readString();
                struct.setWorldNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorld_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.worldName != null) {
          oprot.writeFieldBegin(WORLD_NAME_FIELD_DESC);
          oprot.writeString(struct.worldName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorld_argsTupleSchemeFactory implements SchemeFactory {
      public getWorld_argsTupleScheme getScheme() {
        return new getWorld_argsTupleScheme();
      }
    }

    private static class getWorld_argsTupleScheme extends TupleScheme<getWorld_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorld_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetWorldName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetWorldName()) {
          oprot.writeString(struct.worldName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorld_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.worldName = iprot.readString();
          struct.setWorldNameIsSet(true);
        }
      }
    }

  }

  public static class getWorld_result implements org.apache.thrift.TBase<getWorld_result, getWorld_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWorld_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorld_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorld_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorld_resultTupleSchemeFactory());
    }

    public World success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, World.class)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorld_result.class, metaDataMap);
    }

    public getWorld_result() {
    }

    public getWorld_result(
      World success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorld_result(getWorld_result other) {
      if (other.isSetSuccess()) {
        this.success = new World(other.success);
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public getWorld_result deepCopy() {
      return new getWorld_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
      this.dex = null;
    }

    public World getSuccess() {
      return this.success;
    }

    public getWorld_result setSuccess(World success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getWorld_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public getWorld_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((World)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorld_result)
        return this.equals((getWorld_result)that);
      return false;
    }

    public boolean equals(getWorld_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWorld_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorld_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorld_resultStandardSchemeFactory implements SchemeFactory {
      public getWorld_resultStandardScheme getScheme() {
        return new getWorld_resultStandardScheme();
      }
    }

    private static class getWorld_resultStandardScheme extends StandardScheme<getWorld_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorld_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new World();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorld_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorld_resultTupleSchemeFactory implements SchemeFactory {
      public getWorld_resultTupleScheme getScheme() {
        return new getWorld_resultTupleScheme();
      }
    }

    private static class getWorld_resultTupleScheme extends TupleScheme<getWorld_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorld_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorld_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new World();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class getWorlds_args implements org.apache.thrift.TBase<getWorlds_args, getWorlds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWorlds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorlds_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorlds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorlds_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorlds_args.class, metaDataMap);
    }

    public getWorlds_args() {
    }

    public getWorlds_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorlds_args(getWorlds_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getWorlds_args deepCopy() {
      return new getWorlds_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getWorlds_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorlds_args)
        return this.equals((getWorlds_args)that);
      return false;
    }

    public boolean equals(getWorlds_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWorlds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorlds_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorlds_argsStandardSchemeFactory implements SchemeFactory {
      public getWorlds_argsStandardScheme getScheme() {
        return new getWorlds_argsStandardScheme();
      }
    }

    private static class getWorlds_argsStandardScheme extends StandardScheme<getWorlds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorlds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorlds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorlds_argsTupleSchemeFactory implements SchemeFactory {
      public getWorlds_argsTupleScheme getScheme() {
        return new getWorlds_argsTupleScheme();
      }
    }

    private static class getWorlds_argsTupleScheme extends TupleScheme<getWorlds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorlds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorlds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getWorlds_result implements org.apache.thrift.TBase<getWorlds_result, getWorlds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWorlds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorlds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorlds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorlds_resultTupleSchemeFactory());
    }

    public List<World> success; // required
    public EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, World.class))));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorlds_result.class, metaDataMap);
    }

    public getWorlds_result() {
    }

    public getWorlds_result(
      List<World> success,
      EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorlds_result(getWorlds_result other) {
      if (other.isSetSuccess()) {
        List<World> __this__success = new ArrayList<World>(other.success.size());
        for (World other_element : other.success) {
          __this__success.add(new World(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
    }

    public getWorlds_result deepCopy() {
      return new getWorlds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<World> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(World elem) {
      if (this.success == null) {
        this.success = new ArrayList<World>();
      }
      this.success.add(elem);
    }

    public List<World> getSuccess() {
      return this.success;
    }

    public getWorlds_result setSuccess(List<World> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public getWorlds_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<World>)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorlds_result)
        return this.equals((getWorlds_result)that);
      return false;
    }

    public boolean equals(getWorlds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWorlds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorlds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorlds_resultStandardSchemeFactory implements SchemeFactory {
      public getWorlds_resultStandardScheme getScheme() {
        return new getWorlds_resultStandardScheme();
      }
    }

    private static class getWorlds_resultStandardScheme extends StandardScheme<getWorlds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorlds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                  struct.success = new ArrayList<World>(_list146.size);
                  for (int _i147 = 0; _i147 < _list146.size; ++_i147)
                  {
                    World _elem148;
                    _elem148 = new World();
                    _elem148.read(iprot);
                    struct.success.add(_elem148);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorlds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (World _iter149 : struct.success)
            {
              _iter149.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorlds_resultTupleSchemeFactory implements SchemeFactory {
      public getWorlds_resultTupleScheme getScheme() {
        return new getWorlds_resultTupleScheme();
      }
    }

    private static class getWorlds_resultTupleScheme extends TupleScheme<getWorlds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorlds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (World _iter150 : struct.success)
            {
              _iter150.write(oprot);
            }
          }
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorlds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<World>(_list151.size);
            for (int _i152 = 0; _i152 < _list151.size; ++_i152)
            {
              World _elem153;
              _elem153 = new World();
              _elem153.read(iprot);
              struct.success.add(_elem153);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class installPlugin_args implements org.apache.thrift.TBase<installPlugin_args, installPlugin_args._Fields>, java.io.Serializable, Cloneable, Comparable<installPlugin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("installPlugin_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DOWNLOAD_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("downloadUrl", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("md5", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new installPlugin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new installPlugin_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String downloadUrl; // required
    public String md5; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      DOWNLOAD_URL((short)2, "downloadUrl"),
      MD5((short)3, "md5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // DOWNLOAD_URL
            return DOWNLOAD_URL;
          case 3: // MD5
            return MD5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOWNLOAD_URL, new org.apache.thrift.meta_data.FieldMetaData("downloadUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MD5, new org.apache.thrift.meta_data.FieldMetaData("md5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(installPlugin_args.class, metaDataMap);
    }

    public installPlugin_args() {
    }

    public installPlugin_args(
      String authString,
      String downloadUrl,
      String md5)
    {
      this();
      this.authString = authString;
      this.downloadUrl = downloadUrl;
      this.md5 = md5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public installPlugin_args(installPlugin_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetDownloadUrl()) {
        this.downloadUrl = other.downloadUrl;
      }
      if (other.isSetMd5()) {
        this.md5 = other.md5;
      }
    }

    public installPlugin_args deepCopy() {
      return new installPlugin_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.downloadUrl = null;
      this.md5 = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public installPlugin_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getDownloadUrl() {
      return this.downloadUrl;
    }

    public installPlugin_args setDownloadUrl(String downloadUrl) {
      this.downloadUrl = downloadUrl;
      return this;
    }

    public void unsetDownloadUrl() {
      this.downloadUrl = null;
    }

    /** Returns true if field downloadUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetDownloadUrl() {
      return this.downloadUrl != null;
    }

    public void setDownloadUrlIsSet(boolean value) {
      if (!value) {
        this.downloadUrl = null;
      }
    }

    public String getMd5() {
      return this.md5;
    }

    public installPlugin_args setMd5(String md5) {
      this.md5 = md5;
      return this;
    }

    public void unsetMd5() {
      this.md5 = null;
    }

    /** Returns true if field md5 is set (has been assigned a value) and false otherwise */
    public boolean isSetMd5() {
      return this.md5 != null;
    }

    public void setMd5IsSet(boolean value) {
      if (!value) {
        this.md5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case DOWNLOAD_URL:
        if (value == null) {
          unsetDownloadUrl();
        } else {
          setDownloadUrl((String)value);
        }
        break;

      case MD5:
        if (value == null) {
          unsetMd5();
        } else {
          setMd5((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case DOWNLOAD_URL:
        return getDownloadUrl();

      case MD5:
        return getMd5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case DOWNLOAD_URL:
        return isSetDownloadUrl();
      case MD5:
        return isSetMd5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof installPlugin_args)
        return this.equals((installPlugin_args)that);
      return false;
    }

    public boolean equals(installPlugin_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_downloadUrl = true && this.isSetDownloadUrl();
      boolean that_present_downloadUrl = true && that.isSetDownloadUrl();
      if (this_present_downloadUrl || that_present_downloadUrl) {
        if (!(this_present_downloadUrl && that_present_downloadUrl))
          return false;
        if (!this.downloadUrl.equals(that.downloadUrl))
          return false;
      }

      boolean this_present_md5 = true && this.isSetMd5();
      boolean that_present_md5 = true && that.isSetMd5();
      if (this_present_md5 || that_present_md5) {
        if (!(this_present_md5 && that_present_md5))
          return false;
        if (!this.md5.equals(that.md5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(installPlugin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDownloadUrl()).compareTo(other.isSetDownloadUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDownloadUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloadUrl, other.downloadUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMd5()).compareTo(other.isSetMd5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMd5()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.md5, other.md5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("installPlugin_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("downloadUrl:");
      if (this.downloadUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.downloadUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("md5:");
      if (this.md5 == null) {
        sb.append("null");
      } else {
        sb.append(this.md5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class installPlugin_argsStandardSchemeFactory implements SchemeFactory {
      public installPlugin_argsStandardScheme getScheme() {
        return new installPlugin_argsStandardScheme();
      }
    }

    private static class installPlugin_argsStandardScheme extends StandardScheme<installPlugin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, installPlugin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOWNLOAD_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.downloadUrl = iprot.readString();
                struct.setDownloadUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MD5
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.md5 = iprot.readString();
                struct.setMd5IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, installPlugin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.downloadUrl != null) {
          oprot.writeFieldBegin(DOWNLOAD_URL_FIELD_DESC);
          oprot.writeString(struct.downloadUrl);
          oprot.writeFieldEnd();
        }
        if (struct.md5 != null) {
          oprot.writeFieldBegin(MD5_FIELD_DESC);
          oprot.writeString(struct.md5);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class installPlugin_argsTupleSchemeFactory implements SchemeFactory {
      public installPlugin_argsTupleScheme getScheme() {
        return new installPlugin_argsTupleScheme();
      }
    }

    private static class installPlugin_argsTupleScheme extends TupleScheme<installPlugin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, installPlugin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetDownloadUrl()) {
          optionals.set(1);
        }
        if (struct.isSetMd5()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetDownloadUrl()) {
          oprot.writeString(struct.downloadUrl);
        }
        if (struct.isSetMd5()) {
          oprot.writeString(struct.md5);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, installPlugin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.downloadUrl = iprot.readString();
          struct.setDownloadUrlIsSet(true);
        }
        if (incoming.get(2)) {
          struct.md5 = iprot.readString();
          struct.setMd5IsSet(true);
        }
      }
    }

  }

  public static class installPlugin_result implements org.apache.thrift.TBase<installPlugin_result, installPlugin_result._Fields>, java.io.Serializable, Cloneable, Comparable<installPlugin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("installPlugin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new installPlugin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new installPlugin_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(installPlugin_result.class, metaDataMap);
    }

    public installPlugin_result() {
    }

    public installPlugin_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public installPlugin_result(installPlugin_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public installPlugin_result deepCopy() {
      return new installPlugin_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public installPlugin_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public installPlugin_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public installPlugin_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof installPlugin_result)
        return this.equals((installPlugin_result)that);
      return false;
    }

    public boolean equals(installPlugin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(installPlugin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("installPlugin_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class installPlugin_resultStandardSchemeFactory implements SchemeFactory {
      public installPlugin_resultStandardScheme getScheme() {
        return new installPlugin_resultStandardScheme();
      }
    }

    private static class installPlugin_resultStandardScheme extends StandardScheme<installPlugin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, installPlugin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, installPlugin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class installPlugin_resultTupleSchemeFactory implements SchemeFactory {
      public installPlugin_resultTupleScheme getScheme() {
        return new installPlugin_resultTupleScheme();
      }
    }

    private static class installPlugin_resultTupleScheme extends TupleScheme<installPlugin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, installPlugin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, installPlugin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class kick_args implements org.apache.thrift.TBase<kick_args, kick_args._Fields>, java.io.Serializable, Cloneable, Comparable<kick_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("kick_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new kick_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new kick_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required
    public String message; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name"),
      MESSAGE((short)3, "message");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          case 3: // MESSAGE
            return MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(kick_args.class, metaDataMap);
    }

    public kick_args() {
    }

    public kick_args(
      String authString,
      String name,
      String message)
    {
      this();
      this.authString = authString;
      this.name = name;
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public kick_args(kick_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetMessage()) {
        this.message = other.message;
      }
    }

    public kick_args deepCopy() {
      return new kick_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
      this.message = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public kick_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public kick_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getMessage() {
      return this.message;
    }

    public kick_args setMessage(String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      case MESSAGE:
        return getMessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      case MESSAGE:
        return isSetMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof kick_args)
        return this.equals((kick_args)that);
      return false;
    }

    public boolean equals(kick_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(kick_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("kick_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class kick_argsStandardSchemeFactory implements SchemeFactory {
      public kick_argsStandardScheme getScheme() {
        return new kick_argsStandardScheme();
      }
    }

    private static class kick_argsStandardScheme extends StandardScheme<kick_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, kick_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, kick_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class kick_argsTupleSchemeFactory implements SchemeFactory {
      public kick_argsTupleScheme getScheme() {
        return new kick_argsTupleScheme();
      }
    }

    private static class kick_argsTupleScheme extends TupleScheme<kick_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, kick_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetMessage()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetMessage()) {
          oprot.writeString(struct.message);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, kick_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.message = iprot.readString();
          struct.setMessageIsSet(true);
        }
      }
    }

  }

  public static class kick_result implements org.apache.thrift.TBase<kick_result, kick_result._Fields>, java.io.Serializable, Cloneable, Comparable<kick_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("kick_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new kick_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new kick_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(kick_result.class, metaDataMap);
    }

    public kick_result() {
    }

    public kick_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public kick_result(kick_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public kick_result deepCopy() {
      return new kick_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public kick_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public kick_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public kick_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof kick_result)
        return this.equals((kick_result)that);
      return false;
    }

    public boolean equals(kick_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(kick_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("kick_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class kick_resultStandardSchemeFactory implements SchemeFactory {
      public kick_resultStandardScheme getScheme() {
        return new kick_resultStandardScheme();
      }
    }

    private static class kick_resultStandardScheme extends StandardScheme<kick_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, kick_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, kick_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class kick_resultTupleSchemeFactory implements SchemeFactory {
      public kick_resultTupleScheme getScheme() {
        return new kick_resultTupleScheme();
      }
    }

    private static class kick_resultTupleScheme extends TupleScheme<kick_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, kick_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, kick_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class op_args implements org.apache.thrift.TBase<op_args, op_args._Fields>, java.io.Serializable, Cloneable, Comparable<op_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("op_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NOTIFY_PLAYER_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyPlayer", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new op_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new op_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required
    public boolean notifyPlayer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name"),
      NOTIFY_PLAYER((short)3, "notifyPlayer");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          case 3: // NOTIFY_PLAYER
            return NOTIFY_PLAYER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOTIFYPLAYER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NOTIFY_PLAYER, new org.apache.thrift.meta_data.FieldMetaData("notifyPlayer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(op_args.class, metaDataMap);
    }

    public op_args() {
    }

    public op_args(
      String authString,
      String name,
      boolean notifyPlayer)
    {
      this();
      this.authString = authString;
      this.name = name;
      this.notifyPlayer = notifyPlayer;
      setNotifyPlayerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public op_args(op_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      this.notifyPlayer = other.notifyPlayer;
    }

    public op_args deepCopy() {
      return new op_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
      setNotifyPlayerIsSet(false);
      this.notifyPlayer = false;
    }

    public String getAuthString() {
      return this.authString;
    }

    public op_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public op_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public boolean isNotifyPlayer() {
      return this.notifyPlayer;
    }

    public op_args setNotifyPlayer(boolean notifyPlayer) {
      this.notifyPlayer = notifyPlayer;
      setNotifyPlayerIsSet(true);
      return this;
    }

    public void unsetNotifyPlayer() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFYPLAYER_ISSET_ID);
    }

    /** Returns true if field notifyPlayer is set (has been assigned a value) and false otherwise */
    public boolean isSetNotifyPlayer() {
      return EncodingUtils.testBit(__isset_bitfield, __NOTIFYPLAYER_ISSET_ID);
    }

    public void setNotifyPlayerIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFYPLAYER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case NOTIFY_PLAYER:
        if (value == null) {
          unsetNotifyPlayer();
        } else {
          setNotifyPlayer((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      case NOTIFY_PLAYER:
        return Boolean.valueOf(isNotifyPlayer());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      case NOTIFY_PLAYER:
        return isSetNotifyPlayer();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof op_args)
        return this.equals((op_args)that);
      return false;
    }

    public boolean equals(op_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_notifyPlayer = true;
      boolean that_present_notifyPlayer = true;
      if (this_present_notifyPlayer || that_present_notifyPlayer) {
        if (!(this_present_notifyPlayer && that_present_notifyPlayer))
          return false;
        if (this.notifyPlayer != that.notifyPlayer)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(op_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotifyPlayer()).compareTo(other.isSetNotifyPlayer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotifyPlayer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyPlayer, other.notifyPlayer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("op_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notifyPlayer:");
      sb.append(this.notifyPlayer);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class op_argsStandardSchemeFactory implements SchemeFactory {
      public op_argsStandardScheme getScheme() {
        return new op_argsStandardScheme();
      }
    }

    private static class op_argsStandardScheme extends StandardScheme<op_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, op_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOTIFY_PLAYER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.notifyPlayer = iprot.readBool();
                struct.setNotifyPlayerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, op_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NOTIFY_PLAYER_FIELD_DESC);
        oprot.writeBool(struct.notifyPlayer);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class op_argsTupleSchemeFactory implements SchemeFactory {
      public op_argsTupleScheme getScheme() {
        return new op_argsTupleScheme();
      }
    }

    private static class op_argsTupleScheme extends TupleScheme<op_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, op_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetNotifyPlayer()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetNotifyPlayer()) {
          oprot.writeBool(struct.notifyPlayer);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, op_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.notifyPlayer = iprot.readBool();
          struct.setNotifyPlayerIsSet(true);
        }
      }
    }

  }

  public static class op_result implements org.apache.thrift.TBase<op_result, op_result._Fields>, java.io.Serializable, Cloneable, Comparable<op_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("op_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new op_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new op_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(op_result.class, metaDataMap);
    }

    public op_result() {
    }

    public op_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public op_result(op_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public op_result deepCopy() {
      return new op_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public op_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public op_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public op_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof op_result)
        return this.equals((op_result)that);
      return false;
    }

    public boolean equals(op_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(op_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("op_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class op_resultStandardSchemeFactory implements SchemeFactory {
      public op_resultStandardScheme getScheme() {
        return new op_resultStandardScheme();
      }
    }

    private static class op_resultStandardScheme extends StandardScheme<op_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, op_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, op_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class op_resultTupleSchemeFactory implements SchemeFactory {
      public op_resultTupleScheme getScheme() {
        return new op_resultTupleScheme();
      }
    }

    private static class op_resultTupleScheme extends TupleScheme<op_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, op_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, op_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    public ping_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public ping_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      boolean success,
      EAuthException aex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ping_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public ping_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class reloadServer_args implements org.apache.thrift.TBase<reloadServer_args, reloadServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<reloadServer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reloadServer_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reloadServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reloadServer_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reloadServer_args.class, metaDataMap);
    }

    public reloadServer_args() {
    }

    public reloadServer_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reloadServer_args(reloadServer_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public reloadServer_args deepCopy() {
      return new reloadServer_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public reloadServer_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reloadServer_args)
        return this.equals((reloadServer_args)that);
      return false;
    }

    public boolean equals(reloadServer_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reloadServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reloadServer_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reloadServer_argsStandardSchemeFactory implements SchemeFactory {
      public reloadServer_argsStandardScheme getScheme() {
        return new reloadServer_argsStandardScheme();
      }
    }

    private static class reloadServer_argsStandardScheme extends StandardScheme<reloadServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reloadServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reloadServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reloadServer_argsTupleSchemeFactory implements SchemeFactory {
      public reloadServer_argsTupleScheme getScheme() {
        return new reloadServer_argsTupleScheme();
      }
    }

    private static class reloadServer_argsTupleScheme extends TupleScheme<reloadServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reloadServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reloadServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class removeInventoryItem_args implements org.apache.thrift.TBase<removeInventoryItem_args, removeInventoryItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeInventoryItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeInventoryItem_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PLAYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("playerName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ITEM_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("itemIndex", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeInventoryItem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeInventoryItem_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String playerName; // required
    public int itemIndex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      PLAYER_NAME((short)2, "playerName"),
      ITEM_INDEX((short)3, "itemIndex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // PLAYER_NAME
            return PLAYER_NAME;
          case 3: // ITEM_INDEX
            return ITEM_INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ITEMINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PLAYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("playerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_INDEX, new org.apache.thrift.meta_data.FieldMetaData("itemIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeInventoryItem_args.class, metaDataMap);
    }

    public removeInventoryItem_args() {
    }

    public removeInventoryItem_args(
      String authString,
      String playerName,
      int itemIndex)
    {
      this();
      this.authString = authString;
      this.playerName = playerName;
      this.itemIndex = itemIndex;
      setItemIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeInventoryItem_args(removeInventoryItem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetPlayerName()) {
        this.playerName = other.playerName;
      }
      this.itemIndex = other.itemIndex;
    }

    public removeInventoryItem_args deepCopy() {
      return new removeInventoryItem_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.playerName = null;
      setItemIndexIsSet(false);
      this.itemIndex = 0;
    }

    public String getAuthString() {
      return this.authString;
    }

    public removeInventoryItem_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getPlayerName() {
      return this.playerName;
    }

    public removeInventoryItem_args setPlayerName(String playerName) {
      this.playerName = playerName;
      return this;
    }

    public void unsetPlayerName() {
      this.playerName = null;
    }

    /** Returns true if field playerName is set (has been assigned a value) and false otherwise */
    public boolean isSetPlayerName() {
      return this.playerName != null;
    }

    public void setPlayerNameIsSet(boolean value) {
      if (!value) {
        this.playerName = null;
      }
    }

    public int getItemIndex() {
      return this.itemIndex;
    }

    public removeInventoryItem_args setItemIndex(int itemIndex) {
      this.itemIndex = itemIndex;
      setItemIndexIsSet(true);
      return this;
    }

    public void unsetItemIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMINDEX_ISSET_ID);
    }

    /** Returns true if field itemIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetItemIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __ITEMINDEX_ISSET_ID);
    }

    public void setItemIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMINDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case PLAYER_NAME:
        if (value == null) {
          unsetPlayerName();
        } else {
          setPlayerName((String)value);
        }
        break;

      case ITEM_INDEX:
        if (value == null) {
          unsetItemIndex();
        } else {
          setItemIndex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case PLAYER_NAME:
        return getPlayerName();

      case ITEM_INDEX:
        return Integer.valueOf(getItemIndex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case PLAYER_NAME:
        return isSetPlayerName();
      case ITEM_INDEX:
        return isSetItemIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeInventoryItem_args)
        return this.equals((removeInventoryItem_args)that);
      return false;
    }

    public boolean equals(removeInventoryItem_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_playerName = true && this.isSetPlayerName();
      boolean that_present_playerName = true && that.isSetPlayerName();
      if (this_present_playerName || that_present_playerName) {
        if (!(this_present_playerName && that_present_playerName))
          return false;
        if (!this.playerName.equals(that.playerName))
          return false;
      }

      boolean this_present_itemIndex = true;
      boolean that_present_itemIndex = true;
      if (this_present_itemIndex || that_present_itemIndex) {
        if (!(this_present_itemIndex && that_present_itemIndex))
          return false;
        if (this.itemIndex != that.itemIndex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeInventoryItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlayerName()).compareTo(other.isSetPlayerName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlayerName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerName, other.playerName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemIndex()).compareTo(other.isSetItemIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemIndex, other.itemIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeInventoryItem_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("playerName:");
      if (this.playerName == null) {
        sb.append("null");
      } else {
        sb.append(this.playerName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemIndex:");
      sb.append(this.itemIndex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeInventoryItem_argsStandardSchemeFactory implements SchemeFactory {
      public removeInventoryItem_argsStandardScheme getScheme() {
        return new removeInventoryItem_argsStandardScheme();
      }
    }

    private static class removeInventoryItem_argsStandardScheme extends StandardScheme<removeInventoryItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeInventoryItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PLAYER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.playerName = iprot.readString();
                struct.setPlayerNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ITEM_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.itemIndex = iprot.readI32();
                struct.setItemIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeInventoryItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.playerName != null) {
          oprot.writeFieldBegin(PLAYER_NAME_FIELD_DESC);
          oprot.writeString(struct.playerName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ITEM_INDEX_FIELD_DESC);
        oprot.writeI32(struct.itemIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeInventoryItem_argsTupleSchemeFactory implements SchemeFactory {
      public removeInventoryItem_argsTupleScheme getScheme() {
        return new removeInventoryItem_argsTupleScheme();
      }
    }

    private static class removeInventoryItem_argsTupleScheme extends TupleScheme<removeInventoryItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeInventoryItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetPlayerName()) {
          optionals.set(1);
        }
        if (struct.isSetItemIndex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetPlayerName()) {
          oprot.writeString(struct.playerName);
        }
        if (struct.isSetItemIndex()) {
          oprot.writeI32(struct.itemIndex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeInventoryItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.playerName = iprot.readString();
          struct.setPlayerNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.itemIndex = iprot.readI32();
          struct.setItemIndexIsSet(true);
        }
      }
    }

  }

  public static class removeInventoryItem_result implements org.apache.thrift.TBase<removeInventoryItem_result, removeInventoryItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeInventoryItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeInventoryItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeInventoryItem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeInventoryItem_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeInventoryItem_result.class, metaDataMap);
    }

    public removeInventoryItem_result() {
    }

    public removeInventoryItem_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeInventoryItem_result(removeInventoryItem_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public removeInventoryItem_result deepCopy() {
      return new removeInventoryItem_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removeInventoryItem_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public removeInventoryItem_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public removeInventoryItem_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeInventoryItem_result)
        return this.equals((removeInventoryItem_result)that);
      return false;
    }

    public boolean equals(removeInventoryItem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeInventoryItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeInventoryItem_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeInventoryItem_resultStandardSchemeFactory implements SchemeFactory {
      public removeInventoryItem_resultStandardScheme getScheme() {
        return new removeInventoryItem_resultStandardScheme();
      }
    }

    private static class removeInventoryItem_resultStandardScheme extends StandardScheme<removeInventoryItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeInventoryItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeInventoryItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeInventoryItem_resultTupleSchemeFactory implements SchemeFactory {
      public removeInventoryItem_resultTupleScheme getScheme() {
        return new removeInventoryItem_resultTupleScheme();
      }
    }

    private static class removeInventoryItem_resultTupleScheme extends TupleScheme<removeInventoryItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeInventoryItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeInventoryItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class removeFromWhitelist_args implements org.apache.thrift.TBase<removeFromWhitelist_args, removeFromWhitelist_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeFromWhitelist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeFromWhitelist_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeFromWhitelist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeFromWhitelist_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeFromWhitelist_args.class, metaDataMap);
    }

    public removeFromWhitelist_args() {
    }

    public removeFromWhitelist_args(
      String authString,
      String name)
    {
      this();
      this.authString = authString;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeFromWhitelist_args(removeFromWhitelist_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public removeFromWhitelist_args deepCopy() {
      return new removeFromWhitelist_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public removeFromWhitelist_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public removeFromWhitelist_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeFromWhitelist_args)
        return this.equals((removeFromWhitelist_args)that);
      return false;
    }

    public boolean equals(removeFromWhitelist_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeFromWhitelist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeFromWhitelist_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeFromWhitelist_argsStandardSchemeFactory implements SchemeFactory {
      public removeFromWhitelist_argsStandardScheme getScheme() {
        return new removeFromWhitelist_argsStandardScheme();
      }
    }

    private static class removeFromWhitelist_argsStandardScheme extends StandardScheme<removeFromWhitelist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeFromWhitelist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeFromWhitelist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeFromWhitelist_argsTupleSchemeFactory implements SchemeFactory {
      public removeFromWhitelist_argsTupleScheme getScheme() {
        return new removeFromWhitelist_argsTupleScheme();
      }
    }

    private static class removeFromWhitelist_argsTupleScheme extends TupleScheme<removeFromWhitelist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeFromWhitelist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeFromWhitelist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class removeFromWhitelist_result implements org.apache.thrift.TBase<removeFromWhitelist_result, removeFromWhitelist_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeFromWhitelist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeFromWhitelist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeFromWhitelist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeFromWhitelist_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeFromWhitelist_result.class, metaDataMap);
    }

    public removeFromWhitelist_result() {
    }

    public removeFromWhitelist_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeFromWhitelist_result(removeFromWhitelist_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public removeFromWhitelist_result deepCopy() {
      return new removeFromWhitelist_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removeFromWhitelist_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public removeFromWhitelist_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public removeFromWhitelist_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeFromWhitelist_result)
        return this.equals((removeFromWhitelist_result)that);
      return false;
    }

    public boolean equals(removeFromWhitelist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeFromWhitelist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeFromWhitelist_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeFromWhitelist_resultStandardSchemeFactory implements SchemeFactory {
      public removeFromWhitelist_resultStandardScheme getScheme() {
        return new removeFromWhitelist_resultStandardScheme();
      }
    }

    private static class removeFromWhitelist_resultStandardScheme extends StandardScheme<removeFromWhitelist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeFromWhitelist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeFromWhitelist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeFromWhitelist_resultTupleSchemeFactory implements SchemeFactory {
      public removeFromWhitelist_resultTupleScheme getScheme() {
        return new removeFromWhitelist_resultTupleScheme();
      }
    }

    private static class removeFromWhitelist_resultTupleScheme extends TupleScheme<removeFromWhitelist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeFromWhitelist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeFromWhitelist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class replacePlugin_args implements org.apache.thrift.TBase<replacePlugin_args, replacePlugin_args._Fields>, java.io.Serializable, Cloneable, Comparable<replacePlugin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replacePlugin_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PLUGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pluginName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DOWNLOAD_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("downloadUrl", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("md5", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replacePlugin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replacePlugin_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String pluginName; // required
    public String downloadUrl; // required
    public String md5; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      PLUGIN_NAME((short)2, "pluginName"),
      DOWNLOAD_URL((short)3, "downloadUrl"),
      MD5((short)4, "md5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // PLUGIN_NAME
            return PLUGIN_NAME;
          case 3: // DOWNLOAD_URL
            return DOWNLOAD_URL;
          case 4: // MD5
            return MD5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PLUGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("pluginName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOWNLOAD_URL, new org.apache.thrift.meta_data.FieldMetaData("downloadUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MD5, new org.apache.thrift.meta_data.FieldMetaData("md5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replacePlugin_args.class, metaDataMap);
    }

    public replacePlugin_args() {
    }

    public replacePlugin_args(
      String authString,
      String pluginName,
      String downloadUrl,
      String md5)
    {
      this();
      this.authString = authString;
      this.pluginName = pluginName;
      this.downloadUrl = downloadUrl;
      this.md5 = md5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replacePlugin_args(replacePlugin_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetPluginName()) {
        this.pluginName = other.pluginName;
      }
      if (other.isSetDownloadUrl()) {
        this.downloadUrl = other.downloadUrl;
      }
      if (other.isSetMd5()) {
        this.md5 = other.md5;
      }
    }

    public replacePlugin_args deepCopy() {
      return new replacePlugin_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.pluginName = null;
      this.downloadUrl = null;
      this.md5 = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public replacePlugin_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getPluginName() {
      return this.pluginName;
    }

    public replacePlugin_args setPluginName(String pluginName) {
      this.pluginName = pluginName;
      return this;
    }

    public void unsetPluginName() {
      this.pluginName = null;
    }

    /** Returns true if field pluginName is set (has been assigned a value) and false otherwise */
    public boolean isSetPluginName() {
      return this.pluginName != null;
    }

    public void setPluginNameIsSet(boolean value) {
      if (!value) {
        this.pluginName = null;
      }
    }

    public String getDownloadUrl() {
      return this.downloadUrl;
    }

    public replacePlugin_args setDownloadUrl(String downloadUrl) {
      this.downloadUrl = downloadUrl;
      return this;
    }

    public void unsetDownloadUrl() {
      this.downloadUrl = null;
    }

    /** Returns true if field downloadUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetDownloadUrl() {
      return this.downloadUrl != null;
    }

    public void setDownloadUrlIsSet(boolean value) {
      if (!value) {
        this.downloadUrl = null;
      }
    }

    public String getMd5() {
      return this.md5;
    }

    public replacePlugin_args setMd5(String md5) {
      this.md5 = md5;
      return this;
    }

    public void unsetMd5() {
      this.md5 = null;
    }

    /** Returns true if field md5 is set (has been assigned a value) and false otherwise */
    public boolean isSetMd5() {
      return this.md5 != null;
    }

    public void setMd5IsSet(boolean value) {
      if (!value) {
        this.md5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case PLUGIN_NAME:
        if (value == null) {
          unsetPluginName();
        } else {
          setPluginName((String)value);
        }
        break;

      case DOWNLOAD_URL:
        if (value == null) {
          unsetDownloadUrl();
        } else {
          setDownloadUrl((String)value);
        }
        break;

      case MD5:
        if (value == null) {
          unsetMd5();
        } else {
          setMd5((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case PLUGIN_NAME:
        return getPluginName();

      case DOWNLOAD_URL:
        return getDownloadUrl();

      case MD5:
        return getMd5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case PLUGIN_NAME:
        return isSetPluginName();
      case DOWNLOAD_URL:
        return isSetDownloadUrl();
      case MD5:
        return isSetMd5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replacePlugin_args)
        return this.equals((replacePlugin_args)that);
      return false;
    }

    public boolean equals(replacePlugin_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_pluginName = true && this.isSetPluginName();
      boolean that_present_pluginName = true && that.isSetPluginName();
      if (this_present_pluginName || that_present_pluginName) {
        if (!(this_present_pluginName && that_present_pluginName))
          return false;
        if (!this.pluginName.equals(that.pluginName))
          return false;
      }

      boolean this_present_downloadUrl = true && this.isSetDownloadUrl();
      boolean that_present_downloadUrl = true && that.isSetDownloadUrl();
      if (this_present_downloadUrl || that_present_downloadUrl) {
        if (!(this_present_downloadUrl && that_present_downloadUrl))
          return false;
        if (!this.downloadUrl.equals(that.downloadUrl))
          return false;
      }

      boolean this_present_md5 = true && this.isSetMd5();
      boolean that_present_md5 = true && that.isSetMd5();
      if (this_present_md5 || that_present_md5) {
        if (!(this_present_md5 && that_present_md5))
          return false;
        if (!this.md5.equals(that.md5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(replacePlugin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPluginName()).compareTo(other.isSetPluginName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPluginName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pluginName, other.pluginName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDownloadUrl()).compareTo(other.isSetDownloadUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDownloadUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloadUrl, other.downloadUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMd5()).compareTo(other.isSetMd5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMd5()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.md5, other.md5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replacePlugin_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pluginName:");
      if (this.pluginName == null) {
        sb.append("null");
      } else {
        sb.append(this.pluginName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("downloadUrl:");
      if (this.downloadUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.downloadUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("md5:");
      if (this.md5 == null) {
        sb.append("null");
      } else {
        sb.append(this.md5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replacePlugin_argsStandardSchemeFactory implements SchemeFactory {
      public replacePlugin_argsStandardScheme getScheme() {
        return new replacePlugin_argsStandardScheme();
      }
    }

    private static class replacePlugin_argsStandardScheme extends StandardScheme<replacePlugin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replacePlugin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PLUGIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pluginName = iprot.readString();
                struct.setPluginNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DOWNLOAD_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.downloadUrl = iprot.readString();
                struct.setDownloadUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MD5
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.md5 = iprot.readString();
                struct.setMd5IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replacePlugin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.pluginName != null) {
          oprot.writeFieldBegin(PLUGIN_NAME_FIELD_DESC);
          oprot.writeString(struct.pluginName);
          oprot.writeFieldEnd();
        }
        if (struct.downloadUrl != null) {
          oprot.writeFieldBegin(DOWNLOAD_URL_FIELD_DESC);
          oprot.writeString(struct.downloadUrl);
          oprot.writeFieldEnd();
        }
        if (struct.md5 != null) {
          oprot.writeFieldBegin(MD5_FIELD_DESC);
          oprot.writeString(struct.md5);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replacePlugin_argsTupleSchemeFactory implements SchemeFactory {
      public replacePlugin_argsTupleScheme getScheme() {
        return new replacePlugin_argsTupleScheme();
      }
    }

    private static class replacePlugin_argsTupleScheme extends TupleScheme<replacePlugin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replacePlugin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetPluginName()) {
          optionals.set(1);
        }
        if (struct.isSetDownloadUrl()) {
          optionals.set(2);
        }
        if (struct.isSetMd5()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetPluginName()) {
          oprot.writeString(struct.pluginName);
        }
        if (struct.isSetDownloadUrl()) {
          oprot.writeString(struct.downloadUrl);
        }
        if (struct.isSetMd5()) {
          oprot.writeString(struct.md5);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replacePlugin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pluginName = iprot.readString();
          struct.setPluginNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.downloadUrl = iprot.readString();
          struct.setDownloadUrlIsSet(true);
        }
        if (incoming.get(3)) {
          struct.md5 = iprot.readString();
          struct.setMd5IsSet(true);
        }
      }
    }

  }

  public static class replacePlugin_result implements org.apache.thrift.TBase<replacePlugin_result, replacePlugin_result._Fields>, java.io.Serializable, Cloneable, Comparable<replacePlugin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replacePlugin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replacePlugin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replacePlugin_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replacePlugin_result.class, metaDataMap);
    }

    public replacePlugin_result() {
    }

    public replacePlugin_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replacePlugin_result(replacePlugin_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public replacePlugin_result deepCopy() {
      return new replacePlugin_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public replacePlugin_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public replacePlugin_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public replacePlugin_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replacePlugin_result)
        return this.equals((replacePlugin_result)that);
      return false;
    }

    public boolean equals(replacePlugin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(replacePlugin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replacePlugin_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replacePlugin_resultStandardSchemeFactory implements SchemeFactory {
      public replacePlugin_resultStandardScheme getScheme() {
        return new replacePlugin_resultStandardScheme();
      }
    }

    private static class replacePlugin_resultStandardScheme extends StandardScheme<replacePlugin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replacePlugin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replacePlugin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replacePlugin_resultTupleSchemeFactory implements SchemeFactory {
      public replacePlugin_resultTupleScheme getScheme() {
        return new replacePlugin_resultTupleScheme();
      }
    }

    private static class replacePlugin_resultTupleScheme extends TupleScheme<replacePlugin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replacePlugin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replacePlugin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class runConsoleCommand_args implements org.apache.thrift.TBase<runConsoleCommand_args, runConsoleCommand_args._Fields>, java.io.Serializable, Cloneable, Comparable<runConsoleCommand_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runConsoleCommand_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new runConsoleCommand_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new runConsoleCommand_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String command; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      COMMAND((short)2, "command");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // COMMAND
            return COMMAND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runConsoleCommand_args.class, metaDataMap);
    }

    public runConsoleCommand_args() {
    }

    public runConsoleCommand_args(
      String authString,
      String command)
    {
      this();
      this.authString = authString;
      this.command = command;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runConsoleCommand_args(runConsoleCommand_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetCommand()) {
        this.command = other.command;
      }
    }

    public runConsoleCommand_args deepCopy() {
      return new runConsoleCommand_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.command = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public runConsoleCommand_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getCommand() {
      return this.command;
    }

    public runConsoleCommand_args setCommand(String command) {
      this.command = command;
      return this;
    }

    public void unsetCommand() {
      this.command = null;
    }

    /** Returns true if field command is set (has been assigned a value) and false otherwise */
    public boolean isSetCommand() {
      return this.command != null;
    }

    public void setCommandIsSet(boolean value) {
      if (!value) {
        this.command = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case COMMAND:
        if (value == null) {
          unsetCommand();
        } else {
          setCommand((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case COMMAND:
        return getCommand();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case COMMAND:
        return isSetCommand();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof runConsoleCommand_args)
        return this.equals((runConsoleCommand_args)that);
      return false;
    }

    public boolean equals(runConsoleCommand_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_command = true && this.isSetCommand();
      boolean that_present_command = true && that.isSetCommand();
      if (this_present_command || that_present_command) {
        if (!(this_present_command && that_present_command))
          return false;
        if (!this.command.equals(that.command))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(runConsoleCommand_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommand()).compareTo(other.isSetCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("runConsoleCommand_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runConsoleCommand_argsStandardSchemeFactory implements SchemeFactory {
      public runConsoleCommand_argsStandardScheme getScheme() {
        return new runConsoleCommand_argsStandardScheme();
      }
    }

    private static class runConsoleCommand_argsStandardScheme extends StandardScheme<runConsoleCommand_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runConsoleCommand_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.command = iprot.readString();
                struct.setCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runConsoleCommand_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.command != null) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          oprot.writeString(struct.command);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runConsoleCommand_argsTupleSchemeFactory implements SchemeFactory {
      public runConsoleCommand_argsTupleScheme getScheme() {
        return new runConsoleCommand_argsTupleScheme();
      }
    }

    private static class runConsoleCommand_argsTupleScheme extends TupleScheme<runConsoleCommand_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runConsoleCommand_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetCommand()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetCommand()) {
          oprot.writeString(struct.command);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runConsoleCommand_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.command = iprot.readString();
          struct.setCommandIsSet(true);
        }
      }
    }

  }

  public static class saveWorld_args implements org.apache.thrift.TBase<saveWorld_args, saveWorld_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveWorld_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveWorld_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WORLD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("worldName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveWorld_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveWorld_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String worldName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      WORLD_NAME((short)2, "worldName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // WORLD_NAME
            return WORLD_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WORLD_NAME, new org.apache.thrift.meta_data.FieldMetaData("worldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveWorld_args.class, metaDataMap);
    }

    public saveWorld_args() {
    }

    public saveWorld_args(
      String authString,
      String worldName)
    {
      this();
      this.authString = authString;
      this.worldName = worldName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveWorld_args(saveWorld_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetWorldName()) {
        this.worldName = other.worldName;
      }
    }

    public saveWorld_args deepCopy() {
      return new saveWorld_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.worldName = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public saveWorld_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getWorldName() {
      return this.worldName;
    }

    public saveWorld_args setWorldName(String worldName) {
      this.worldName = worldName;
      return this;
    }

    public void unsetWorldName() {
      this.worldName = null;
    }

    /** Returns true if field worldName is set (has been assigned a value) and false otherwise */
    public boolean isSetWorldName() {
      return this.worldName != null;
    }

    public void setWorldNameIsSet(boolean value) {
      if (!value) {
        this.worldName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case WORLD_NAME:
        if (value == null) {
          unsetWorldName();
        } else {
          setWorldName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case WORLD_NAME:
        return getWorldName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case WORLD_NAME:
        return isSetWorldName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveWorld_args)
        return this.equals((saveWorld_args)that);
      return false;
    }

    public boolean equals(saveWorld_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_worldName = true && this.isSetWorldName();
      boolean that_present_worldName = true && that.isSetWorldName();
      if (this_present_worldName || that_present_worldName) {
        if (!(this_present_worldName && that_present_worldName))
          return false;
        if (!this.worldName.equals(that.worldName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saveWorld_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWorldName()).compareTo(other.isSetWorldName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorldName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worldName, other.worldName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveWorld_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("worldName:");
      if (this.worldName == null) {
        sb.append("null");
      } else {
        sb.append(this.worldName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveWorld_argsStandardSchemeFactory implements SchemeFactory {
      public saveWorld_argsStandardScheme getScheme() {
        return new saveWorld_argsStandardScheme();
      }
    }

    private static class saveWorld_argsStandardScheme extends StandardScheme<saveWorld_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveWorld_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORLD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.worldName = iprot.readString();
                struct.setWorldNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveWorld_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.worldName != null) {
          oprot.writeFieldBegin(WORLD_NAME_FIELD_DESC);
          oprot.writeString(struct.worldName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveWorld_argsTupleSchemeFactory implements SchemeFactory {
      public saveWorld_argsTupleScheme getScheme() {
        return new saveWorld_argsTupleScheme();
      }
    }

    private static class saveWorld_argsTupleScheme extends TupleScheme<saveWorld_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveWorld_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetWorldName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetWorldName()) {
          oprot.writeString(struct.worldName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveWorld_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.worldName = iprot.readString();
          struct.setWorldNameIsSet(true);
        }
      }
    }

  }

  public static class saveWorld_result implements org.apache.thrift.TBase<saveWorld_result, saveWorld_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveWorld_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveWorld_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveWorld_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveWorld_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveWorld_result.class, metaDataMap);
    }

    public saveWorld_result() {
    }

    public saveWorld_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveWorld_result(saveWorld_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public saveWorld_result deepCopy() {
      return new saveWorld_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public saveWorld_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public saveWorld_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public saveWorld_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveWorld_result)
        return this.equals((saveWorld_result)that);
      return false;
    }

    public boolean equals(saveWorld_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saveWorld_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveWorld_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveWorld_resultStandardSchemeFactory implements SchemeFactory {
      public saveWorld_resultStandardScheme getScheme() {
        return new saveWorld_resultStandardScheme();
      }
    }

    private static class saveWorld_resultStandardScheme extends StandardScheme<saveWorld_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveWorld_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveWorld_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveWorld_resultTupleSchemeFactory implements SchemeFactory {
      public saveWorld_resultTupleScheme getScheme() {
        return new saveWorld_resultTupleScheme();
      }
    }

    private static class saveWorld_resultTupleScheme extends TupleScheme<saveWorld_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveWorld_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveWorld_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class setFileContents_args implements org.apache.thrift.TBase<setFileContents_args, setFileContents_args._Fields>, java.io.Serializable, Cloneable, Comparable<setFileContents_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setFileContents_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_CONTENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("fileContents", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setFileContents_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setFileContents_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String fileName; // required
    public String fileContents; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      FILE_NAME((short)2, "fileName"),
      FILE_CONTENTS((short)3, "fileContents");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // FILE_NAME
            return FILE_NAME;
          case 3: // FILE_CONTENTS
            return FILE_CONTENTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_CONTENTS, new org.apache.thrift.meta_data.FieldMetaData("fileContents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setFileContents_args.class, metaDataMap);
    }

    public setFileContents_args() {
    }

    public setFileContents_args(
      String authString,
      String fileName,
      String fileContents)
    {
      this();
      this.authString = authString;
      this.fileName = fileName;
      this.fileContents = fileContents;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setFileContents_args(setFileContents_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetFileContents()) {
        this.fileContents = other.fileContents;
      }
    }

    public setFileContents_args deepCopy() {
      return new setFileContents_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.fileName = null;
      this.fileContents = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public setFileContents_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getFileName() {
      return this.fileName;
    }

    public setFileContents_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public String getFileContents() {
      return this.fileContents;
    }

    public setFileContents_args setFileContents(String fileContents) {
      this.fileContents = fileContents;
      return this;
    }

    public void unsetFileContents() {
      this.fileContents = null;
    }

    /** Returns true if field fileContents is set (has been assigned a value) and false otherwise */
    public boolean isSetFileContents() {
      return this.fileContents != null;
    }

    public void setFileContentsIsSet(boolean value) {
      if (!value) {
        this.fileContents = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      case FILE_CONTENTS:
        if (value == null) {
          unsetFileContents();
        } else {
          setFileContents((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case FILE_NAME:
        return getFileName();

      case FILE_CONTENTS:
        return getFileContents();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case FILE_NAME:
        return isSetFileName();
      case FILE_CONTENTS:
        return isSetFileContents();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setFileContents_args)
        return this.equals((setFileContents_args)that);
      return false;
    }

    public boolean equals(setFileContents_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_fileContents = true && this.isSetFileContents();
      boolean that_present_fileContents = true && that.isSetFileContents();
      if (this_present_fileContents || that_present_fileContents) {
        if (!(this_present_fileContents && that_present_fileContents))
          return false;
        if (!this.fileContents.equals(that.fileContents))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setFileContents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileContents()).compareTo(other.isSetFileContents());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileContents()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileContents, other.fileContents);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setFileContents_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileContents:");
      if (this.fileContents == null) {
        sb.append("null");
      } else {
        sb.append(this.fileContents);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setFileContents_argsStandardSchemeFactory implements SchemeFactory {
      public setFileContents_argsStandardScheme getScheme() {
        return new setFileContents_argsStandardScheme();
      }
    }

    private static class setFileContents_argsStandardScheme extends StandardScheme<setFileContents_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setFileContents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_CONTENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileContents = iprot.readString();
                struct.setFileContentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setFileContents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.fileContents != null) {
          oprot.writeFieldBegin(FILE_CONTENTS_FIELD_DESC);
          oprot.writeString(struct.fileContents);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setFileContents_argsTupleSchemeFactory implements SchemeFactory {
      public setFileContents_argsTupleScheme getScheme() {
        return new setFileContents_argsTupleScheme();
      }
    }

    private static class setFileContents_argsTupleScheme extends TupleScheme<setFileContents_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setFileContents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetFileName()) {
          optionals.set(1);
        }
        if (struct.isSetFileContents()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetFileContents()) {
          oprot.writeString(struct.fileContents);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setFileContents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileContents = iprot.readString();
          struct.setFileContentsIsSet(true);
        }
      }
    }

  }

  public static class setFileContents_result implements org.apache.thrift.TBase<setFileContents_result, setFileContents_result._Fields>, java.io.Serializable, Cloneable, Comparable<setFileContents_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setFileContents_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setFileContents_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setFileContents_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setFileContents_result.class, metaDataMap);
    }

    public setFileContents_result() {
    }

    public setFileContents_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setFileContents_result(setFileContents_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public setFileContents_result deepCopy() {
      return new setFileContents_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setFileContents_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public setFileContents_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public setFileContents_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setFileContents_result)
        return this.equals((setFileContents_result)that);
      return false;
    }

    public boolean equals(setFileContents_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setFileContents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setFileContents_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setFileContents_resultStandardSchemeFactory implements SchemeFactory {
      public setFileContents_resultStandardScheme getScheme() {
        return new setFileContents_resultStandardScheme();
      }
    }

    private static class setFileContents_resultStandardScheme extends StandardScheme<setFileContents_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setFileContents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setFileContents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setFileContents_resultTupleSchemeFactory implements SchemeFactory {
      public setFileContents_resultTupleScheme getScheme() {
        return new setFileContents_resultTupleScheme();
      }
    }

    private static class setFileContents_resultTupleScheme extends TupleScheme<setFileContents_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setFileContents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setFileContents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class setGameMode_args implements org.apache.thrift.TBase<setGameMode_args, setGameMode_args._Fields>, java.io.Serializable, Cloneable, Comparable<setGameMode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setGameMode_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setGameMode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setGameMode_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required
    /**
     * 
     * @see GameMode
     */
    public GameMode mode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name"),
      /**
       * 
       * @see GameMode
       */
      MODE((short)3, "mode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          case 3: // MODE
            return MODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GameMode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setGameMode_args.class, metaDataMap);
    }

    public setGameMode_args() {
    }

    public setGameMode_args(
      String authString,
      String name,
      GameMode mode)
    {
      this();
      this.authString = authString;
      this.name = name;
      this.mode = mode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setGameMode_args(setGameMode_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetMode()) {
        this.mode = other.mode;
      }
    }

    public setGameMode_args deepCopy() {
      return new setGameMode_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
      this.mode = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public setGameMode_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public setGameMode_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    /**
     * 
     * @see GameMode
     */
    public GameMode getMode() {
      return this.mode;
    }

    /**
     * 
     * @see GameMode
     */
    public setGameMode_args setMode(GameMode mode) {
      this.mode = mode;
      return this;
    }

    public void unsetMode() {
      this.mode = null;
    }

    /** Returns true if field mode is set (has been assigned a value) and false otherwise */
    public boolean isSetMode() {
      return this.mode != null;
    }

    public void setModeIsSet(boolean value) {
      if (!value) {
        this.mode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          setMode((GameMode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      case MODE:
        return getMode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      case MODE:
        return isSetMode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setGameMode_args)
        return this.equals((setGameMode_args)that);
      return false;
    }

    public boolean equals(setGameMode_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_mode = true && this.isSetMode();
      boolean that_present_mode = true && that.isSetMode();
      if (this_present_mode || that_present_mode) {
        if (!(this_present_mode && that_present_mode))
          return false;
        if (!this.mode.equals(that.mode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setGameMode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMode()).compareTo(other.isSetMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, other.mode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setGameMode_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mode:");
      if (this.mode == null) {
        sb.append("null");
      } else {
        sb.append(this.mode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setGameMode_argsStandardSchemeFactory implements SchemeFactory {
      public setGameMode_argsStandardScheme getScheme() {
        return new setGameMode_argsStandardScheme();
      }
    }

    private static class setGameMode_argsStandardScheme extends StandardScheme<setGameMode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setGameMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mode = GameMode.findByValue(iprot.readI32());
                struct.setModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setGameMode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.mode != null) {
          oprot.writeFieldBegin(MODE_FIELD_DESC);
          oprot.writeI32(struct.mode.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setGameMode_argsTupleSchemeFactory implements SchemeFactory {
      public setGameMode_argsTupleScheme getScheme() {
        return new setGameMode_argsTupleScheme();
      }
    }

    private static class setGameMode_argsTupleScheme extends TupleScheme<setGameMode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setGameMode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetMode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetMode()) {
          oprot.writeI32(struct.mode.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setGameMode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mode = GameMode.findByValue(iprot.readI32());
          struct.setModeIsSet(true);
        }
      }
    }

  }

  public static class setGameMode_result implements org.apache.thrift.TBase<setGameMode_result, setGameMode_result._Fields>, java.io.Serializable, Cloneable, Comparable<setGameMode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setGameMode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setGameMode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setGameMode_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setGameMode_result.class, metaDataMap);
    }

    public setGameMode_result() {
    }

    public setGameMode_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setGameMode_result(setGameMode_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public setGameMode_result deepCopy() {
      return new setGameMode_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setGameMode_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public setGameMode_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public setGameMode_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setGameMode_result)
        return this.equals((setGameMode_result)that);
      return false;
    }

    public boolean equals(setGameMode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setGameMode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setGameMode_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setGameMode_resultStandardSchemeFactory implements SchemeFactory {
      public setGameMode_resultStandardScheme getScheme() {
        return new setGameMode_resultStandardScheme();
      }
    }

    private static class setGameMode_resultStandardScheme extends StandardScheme<setGameMode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setGameMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setGameMode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setGameMode_resultTupleSchemeFactory implements SchemeFactory {
      public setGameMode_resultTupleScheme getScheme() {
        return new setGameMode_resultTupleScheme();
      }
    }

    private static class setGameMode_resultTupleScheme extends TupleScheme<setGameMode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setGameMode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setGameMode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class setPvp_args implements org.apache.thrift.TBase<setPvp_args, setPvp_args._Fields>, java.io.Serializable, Cloneable, Comparable<setPvp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPvp_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WORLD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("worldName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField IS_PVP_FIELD_DESC = new org.apache.thrift.protocol.TField("isPvp", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPvp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPvp_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String worldName; // required
    public boolean isPvp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      WORLD_NAME((short)2, "worldName"),
      IS_PVP((short)3, "isPvp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // WORLD_NAME
            return WORLD_NAME;
          case 3: // IS_PVP
            return IS_PVP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISPVP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WORLD_NAME, new org.apache.thrift.meta_data.FieldMetaData("worldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_PVP, new org.apache.thrift.meta_data.FieldMetaData("isPvp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPvp_args.class, metaDataMap);
    }

    public setPvp_args() {
    }

    public setPvp_args(
      String authString,
      String worldName,
      boolean isPvp)
    {
      this();
      this.authString = authString;
      this.worldName = worldName;
      this.isPvp = isPvp;
      setIsPvpIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPvp_args(setPvp_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetWorldName()) {
        this.worldName = other.worldName;
      }
      this.isPvp = other.isPvp;
    }

    public setPvp_args deepCopy() {
      return new setPvp_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.worldName = null;
      setIsPvpIsSet(false);
      this.isPvp = false;
    }

    public String getAuthString() {
      return this.authString;
    }

    public setPvp_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getWorldName() {
      return this.worldName;
    }

    public setPvp_args setWorldName(String worldName) {
      this.worldName = worldName;
      return this;
    }

    public void unsetWorldName() {
      this.worldName = null;
    }

    /** Returns true if field worldName is set (has been assigned a value) and false otherwise */
    public boolean isSetWorldName() {
      return this.worldName != null;
    }

    public void setWorldNameIsSet(boolean value) {
      if (!value) {
        this.worldName = null;
      }
    }

    public boolean isIsPvp() {
      return this.isPvp;
    }

    public setPvp_args setIsPvp(boolean isPvp) {
      this.isPvp = isPvp;
      setIsPvpIsSet(true);
      return this;
    }

    public void unsetIsPvp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPVP_ISSET_ID);
    }

    /** Returns true if field isPvp is set (has been assigned a value) and false otherwise */
    public boolean isSetIsPvp() {
      return EncodingUtils.testBit(__isset_bitfield, __ISPVP_ISSET_ID);
    }

    public void setIsPvpIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPVP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case WORLD_NAME:
        if (value == null) {
          unsetWorldName();
        } else {
          setWorldName((String)value);
        }
        break;

      case IS_PVP:
        if (value == null) {
          unsetIsPvp();
        } else {
          setIsPvp((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case WORLD_NAME:
        return getWorldName();

      case IS_PVP:
        return Boolean.valueOf(isIsPvp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case WORLD_NAME:
        return isSetWorldName();
      case IS_PVP:
        return isSetIsPvp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPvp_args)
        return this.equals((setPvp_args)that);
      return false;
    }

    public boolean equals(setPvp_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_worldName = true && this.isSetWorldName();
      boolean that_present_worldName = true && that.isSetWorldName();
      if (this_present_worldName || that_present_worldName) {
        if (!(this_present_worldName && that_present_worldName))
          return false;
        if (!this.worldName.equals(that.worldName))
          return false;
      }

      boolean this_present_isPvp = true;
      boolean that_present_isPvp = true;
      if (this_present_isPvp || that_present_isPvp) {
        if (!(this_present_isPvp && that_present_isPvp))
          return false;
        if (this.isPvp != that.isPvp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setPvp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWorldName()).compareTo(other.isSetWorldName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorldName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worldName, other.worldName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsPvp()).compareTo(other.isSetIsPvp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsPvp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPvp, other.isPvp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPvp_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("worldName:");
      if (this.worldName == null) {
        sb.append("null");
      } else {
        sb.append(this.worldName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isPvp:");
      sb.append(this.isPvp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPvp_argsStandardSchemeFactory implements SchemeFactory {
      public setPvp_argsStandardScheme getScheme() {
        return new setPvp_argsStandardScheme();
      }
    }

    private static class setPvp_argsStandardScheme extends StandardScheme<setPvp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPvp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORLD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.worldName = iprot.readString();
                struct.setWorldNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IS_PVP
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isPvp = iprot.readBool();
                struct.setIsPvpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPvp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.worldName != null) {
          oprot.writeFieldBegin(WORLD_NAME_FIELD_DESC);
          oprot.writeString(struct.worldName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_PVP_FIELD_DESC);
        oprot.writeBool(struct.isPvp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPvp_argsTupleSchemeFactory implements SchemeFactory {
      public setPvp_argsTupleScheme getScheme() {
        return new setPvp_argsTupleScheme();
      }
    }

    private static class setPvp_argsTupleScheme extends TupleScheme<setPvp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPvp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetWorldName()) {
          optionals.set(1);
        }
        if (struct.isSetIsPvp()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetWorldName()) {
          oprot.writeString(struct.worldName);
        }
        if (struct.isSetIsPvp()) {
          oprot.writeBool(struct.isPvp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPvp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.worldName = iprot.readString();
          struct.setWorldNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.isPvp = iprot.readBool();
          struct.setIsPvpIsSet(true);
        }
      }
    }

  }

  public static class setPvp_result implements org.apache.thrift.TBase<setPvp_result, setPvp_result._Fields>, java.io.Serializable, Cloneable, Comparable<setPvp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPvp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPvp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPvp_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPvp_result.class, metaDataMap);
    }

    public setPvp_result() {
    }

    public setPvp_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPvp_result(setPvp_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public setPvp_result deepCopy() {
      return new setPvp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setPvp_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public setPvp_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public setPvp_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPvp_result)
        return this.equals((setPvp_result)that);
      return false;
    }

    public boolean equals(setPvp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setPvp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPvp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPvp_resultStandardSchemeFactory implements SchemeFactory {
      public setPvp_resultStandardScheme getScheme() {
        return new setPvp_resultStandardScheme();
      }
    }

    private static class setPvp_resultStandardScheme extends StandardScheme<setPvp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPvp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPvp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPvp_resultTupleSchemeFactory implements SchemeFactory {
      public setPvp_resultTupleScheme getScheme() {
        return new setPvp_resultTupleScheme();
      }
    }

    private static class setPvp_resultTupleScheme extends TupleScheme<setPvp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPvp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPvp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class setStorm_args implements org.apache.thrift.TBase<setStorm_args, setStorm_args._Fields>, java.io.Serializable, Cloneable, Comparable<setStorm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setStorm_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WORLD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("worldName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField HAS_STORM_FIELD_DESC = new org.apache.thrift.protocol.TField("hasStorm", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setStorm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setStorm_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String worldName; // required
    public boolean hasStorm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      WORLD_NAME((short)2, "worldName"),
      HAS_STORM((short)3, "hasStorm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // WORLD_NAME
            return WORLD_NAME;
          case 3: // HAS_STORM
            return HAS_STORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HASSTORM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WORLD_NAME, new org.apache.thrift.meta_data.FieldMetaData("worldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HAS_STORM, new org.apache.thrift.meta_data.FieldMetaData("hasStorm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setStorm_args.class, metaDataMap);
    }

    public setStorm_args() {
    }

    public setStorm_args(
      String authString,
      String worldName,
      boolean hasStorm)
    {
      this();
      this.authString = authString;
      this.worldName = worldName;
      this.hasStorm = hasStorm;
      setHasStormIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setStorm_args(setStorm_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetWorldName()) {
        this.worldName = other.worldName;
      }
      this.hasStorm = other.hasStorm;
    }

    public setStorm_args deepCopy() {
      return new setStorm_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.worldName = null;
      setHasStormIsSet(false);
      this.hasStorm = false;
    }

    public String getAuthString() {
      return this.authString;
    }

    public setStorm_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getWorldName() {
      return this.worldName;
    }

    public setStorm_args setWorldName(String worldName) {
      this.worldName = worldName;
      return this;
    }

    public void unsetWorldName() {
      this.worldName = null;
    }

    /** Returns true if field worldName is set (has been assigned a value) and false otherwise */
    public boolean isSetWorldName() {
      return this.worldName != null;
    }

    public void setWorldNameIsSet(boolean value) {
      if (!value) {
        this.worldName = null;
      }
    }

    public boolean isHasStorm() {
      return this.hasStorm;
    }

    public setStorm_args setHasStorm(boolean hasStorm) {
      this.hasStorm = hasStorm;
      setHasStormIsSet(true);
      return this;
    }

    public void unsetHasStorm() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASSTORM_ISSET_ID);
    }

    /** Returns true if field hasStorm is set (has been assigned a value) and false otherwise */
    public boolean isSetHasStorm() {
      return EncodingUtils.testBit(__isset_bitfield, __HASSTORM_ISSET_ID);
    }

    public void setHasStormIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASSTORM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case WORLD_NAME:
        if (value == null) {
          unsetWorldName();
        } else {
          setWorldName((String)value);
        }
        break;

      case HAS_STORM:
        if (value == null) {
          unsetHasStorm();
        } else {
          setHasStorm((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case WORLD_NAME:
        return getWorldName();

      case HAS_STORM:
        return Boolean.valueOf(isHasStorm());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case WORLD_NAME:
        return isSetWorldName();
      case HAS_STORM:
        return isSetHasStorm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setStorm_args)
        return this.equals((setStorm_args)that);
      return false;
    }

    public boolean equals(setStorm_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_worldName = true && this.isSetWorldName();
      boolean that_present_worldName = true && that.isSetWorldName();
      if (this_present_worldName || that_present_worldName) {
        if (!(this_present_worldName && that_present_worldName))
          return false;
        if (!this.worldName.equals(that.worldName))
          return false;
      }

      boolean this_present_hasStorm = true;
      boolean that_present_hasStorm = true;
      if (this_present_hasStorm || that_present_hasStorm) {
        if (!(this_present_hasStorm && that_present_hasStorm))
          return false;
        if (this.hasStorm != that.hasStorm)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setStorm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWorldName()).compareTo(other.isSetWorldName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorldName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worldName, other.worldName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHasStorm()).compareTo(other.isSetHasStorm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHasStorm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasStorm, other.hasStorm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setStorm_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("worldName:");
      if (this.worldName == null) {
        sb.append("null");
      } else {
        sb.append(this.worldName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hasStorm:");
      sb.append(this.hasStorm);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setStorm_argsStandardSchemeFactory implements SchemeFactory {
      public setStorm_argsStandardScheme getScheme() {
        return new setStorm_argsStandardScheme();
      }
    }

    private static class setStorm_argsStandardScheme extends StandardScheme<setStorm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setStorm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORLD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.worldName = iprot.readString();
                struct.setWorldNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HAS_STORM
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.hasStorm = iprot.readBool();
                struct.setHasStormIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setStorm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.worldName != null) {
          oprot.writeFieldBegin(WORLD_NAME_FIELD_DESC);
          oprot.writeString(struct.worldName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(HAS_STORM_FIELD_DESC);
        oprot.writeBool(struct.hasStorm);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setStorm_argsTupleSchemeFactory implements SchemeFactory {
      public setStorm_argsTupleScheme getScheme() {
        return new setStorm_argsTupleScheme();
      }
    }

    private static class setStorm_argsTupleScheme extends TupleScheme<setStorm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setStorm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetWorldName()) {
          optionals.set(1);
        }
        if (struct.isSetHasStorm()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetWorldName()) {
          oprot.writeString(struct.worldName);
        }
        if (struct.isSetHasStorm()) {
          oprot.writeBool(struct.hasStorm);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setStorm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.worldName = iprot.readString();
          struct.setWorldNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hasStorm = iprot.readBool();
          struct.setHasStormIsSet(true);
        }
      }
    }

  }

  public static class setStorm_result implements org.apache.thrift.TBase<setStorm_result, setStorm_result._Fields>, java.io.Serializable, Cloneable, Comparable<setStorm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setStorm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setStorm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setStorm_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setStorm_result.class, metaDataMap);
    }

    public setStorm_result() {
    }

    public setStorm_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setStorm_result(setStorm_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public setStorm_result deepCopy() {
      return new setStorm_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setStorm_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public setStorm_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public setStorm_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setStorm_result)
        return this.equals((setStorm_result)that);
      return false;
    }

    public boolean equals(setStorm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setStorm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setStorm_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setStorm_resultStandardSchemeFactory implements SchemeFactory {
      public setStorm_resultStandardScheme getScheme() {
        return new setStorm_resultStandardScheme();
      }
    }

    private static class setStorm_resultStandardScheme extends StandardScheme<setStorm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setStorm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setStorm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setStorm_resultTupleSchemeFactory implements SchemeFactory {
      public setStorm_resultTupleScheme getScheme() {
        return new setStorm_resultTupleScheme();
      }
    }

    private static class setStorm_resultTupleScheme extends TupleScheme<setStorm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setStorm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setStorm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class setThundering_args implements org.apache.thrift.TBase<setThundering_args, setThundering_args._Fields>, java.io.Serializable, Cloneable, Comparable<setThundering_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setThundering_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WORLD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("worldName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField IS_THUNDERING_FIELD_DESC = new org.apache.thrift.protocol.TField("isThundering", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setThundering_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setThundering_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String worldName; // required
    public boolean isThundering; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      WORLD_NAME((short)2, "worldName"),
      IS_THUNDERING((short)3, "isThundering");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // WORLD_NAME
            return WORLD_NAME;
          case 3: // IS_THUNDERING
            return IS_THUNDERING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISTHUNDERING_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WORLD_NAME, new org.apache.thrift.meta_data.FieldMetaData("worldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_THUNDERING, new org.apache.thrift.meta_data.FieldMetaData("isThundering", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setThundering_args.class, metaDataMap);
    }

    public setThundering_args() {
    }

    public setThundering_args(
      String authString,
      String worldName,
      boolean isThundering)
    {
      this();
      this.authString = authString;
      this.worldName = worldName;
      this.isThundering = isThundering;
      setIsThunderingIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setThundering_args(setThundering_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetWorldName()) {
        this.worldName = other.worldName;
      }
      this.isThundering = other.isThundering;
    }

    public setThundering_args deepCopy() {
      return new setThundering_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.worldName = null;
      setIsThunderingIsSet(false);
      this.isThundering = false;
    }

    public String getAuthString() {
      return this.authString;
    }

    public setThundering_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getWorldName() {
      return this.worldName;
    }

    public setThundering_args setWorldName(String worldName) {
      this.worldName = worldName;
      return this;
    }

    public void unsetWorldName() {
      this.worldName = null;
    }

    /** Returns true if field worldName is set (has been assigned a value) and false otherwise */
    public boolean isSetWorldName() {
      return this.worldName != null;
    }

    public void setWorldNameIsSet(boolean value) {
      if (!value) {
        this.worldName = null;
      }
    }

    public boolean isIsThundering() {
      return this.isThundering;
    }

    public setThundering_args setIsThundering(boolean isThundering) {
      this.isThundering = isThundering;
      setIsThunderingIsSet(true);
      return this;
    }

    public void unsetIsThundering() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTHUNDERING_ISSET_ID);
    }

    /** Returns true if field isThundering is set (has been assigned a value) and false otherwise */
    public boolean isSetIsThundering() {
      return EncodingUtils.testBit(__isset_bitfield, __ISTHUNDERING_ISSET_ID);
    }

    public void setIsThunderingIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTHUNDERING_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case WORLD_NAME:
        if (value == null) {
          unsetWorldName();
        } else {
          setWorldName((String)value);
        }
        break;

      case IS_THUNDERING:
        if (value == null) {
          unsetIsThundering();
        } else {
          setIsThundering((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case WORLD_NAME:
        return getWorldName();

      case IS_THUNDERING:
        return Boolean.valueOf(isIsThundering());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case WORLD_NAME:
        return isSetWorldName();
      case IS_THUNDERING:
        return isSetIsThundering();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setThundering_args)
        return this.equals((setThundering_args)that);
      return false;
    }

    public boolean equals(setThundering_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_worldName = true && this.isSetWorldName();
      boolean that_present_worldName = true && that.isSetWorldName();
      if (this_present_worldName || that_present_worldName) {
        if (!(this_present_worldName && that_present_worldName))
          return false;
        if (!this.worldName.equals(that.worldName))
          return false;
      }

      boolean this_present_isThundering = true;
      boolean that_present_isThundering = true;
      if (this_present_isThundering || that_present_isThundering) {
        if (!(this_present_isThundering && that_present_isThundering))
          return false;
        if (this.isThundering != that.isThundering)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setThundering_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWorldName()).compareTo(other.isSetWorldName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorldName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worldName, other.worldName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsThundering()).compareTo(other.isSetIsThundering());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsThundering()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isThundering, other.isThundering);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setThundering_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("worldName:");
      if (this.worldName == null) {
        sb.append("null");
      } else {
        sb.append(this.worldName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isThundering:");
      sb.append(this.isThundering);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setThundering_argsStandardSchemeFactory implements SchemeFactory {
      public setThundering_argsStandardScheme getScheme() {
        return new setThundering_argsStandardScheme();
      }
    }

    private static class setThundering_argsStandardScheme extends StandardScheme<setThundering_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setThundering_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORLD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.worldName = iprot.readString();
                struct.setWorldNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IS_THUNDERING
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isThundering = iprot.readBool();
                struct.setIsThunderingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setThundering_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.worldName != null) {
          oprot.writeFieldBegin(WORLD_NAME_FIELD_DESC);
          oprot.writeString(struct.worldName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_THUNDERING_FIELD_DESC);
        oprot.writeBool(struct.isThundering);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setThundering_argsTupleSchemeFactory implements SchemeFactory {
      public setThundering_argsTupleScheme getScheme() {
        return new setThundering_argsTupleScheme();
      }
    }

    private static class setThundering_argsTupleScheme extends TupleScheme<setThundering_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setThundering_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetWorldName()) {
          optionals.set(1);
        }
        if (struct.isSetIsThundering()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetWorldName()) {
          oprot.writeString(struct.worldName);
        }
        if (struct.isSetIsThundering()) {
          oprot.writeBool(struct.isThundering);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setThundering_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.worldName = iprot.readString();
          struct.setWorldNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.isThundering = iprot.readBool();
          struct.setIsThunderingIsSet(true);
        }
      }
    }

  }

  public static class setThundering_result implements org.apache.thrift.TBase<setThundering_result, setThundering_result._Fields>, java.io.Serializable, Cloneable, Comparable<setThundering_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setThundering_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setThundering_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setThundering_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setThundering_result.class, metaDataMap);
    }

    public setThundering_result() {
    }

    public setThundering_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setThundering_result(setThundering_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public setThundering_result deepCopy() {
      return new setThundering_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setThundering_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public setThundering_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public setThundering_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setThundering_result)
        return this.equals((setThundering_result)that);
      return false;
    }

    public boolean equals(setThundering_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setThundering_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setThundering_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setThundering_resultStandardSchemeFactory implements SchemeFactory {
      public setThundering_resultStandardScheme getScheme() {
        return new setThundering_resultStandardScheme();
      }
    }

    private static class setThundering_resultStandardScheme extends StandardScheme<setThundering_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setThundering_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setThundering_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setThundering_resultTupleSchemeFactory implements SchemeFactory {
      public setThundering_resultTupleScheme getScheme() {
        return new setThundering_resultTupleScheme();
      }
    }

    private static class setThundering_resultTupleScheme extends TupleScheme<setThundering_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setThundering_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setThundering_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class setWorldTime_args implements org.apache.thrift.TBase<setWorldTime_args, setWorldTime_args._Fields>, java.io.Serializable, Cloneable, Comparable<setWorldTime_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setWorldTime_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WORLD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("worldName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setWorldTime_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setWorldTime_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String worldName; // required
    public long time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      WORLD_NAME((short)2, "worldName"),
      TIME((short)3, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // WORLD_NAME
            return WORLD_NAME;
          case 3: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WORLD_NAME, new org.apache.thrift.meta_data.FieldMetaData("worldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setWorldTime_args.class, metaDataMap);
    }

    public setWorldTime_args() {
    }

    public setWorldTime_args(
      String authString,
      String worldName,
      long time)
    {
      this();
      this.authString = authString;
      this.worldName = worldName;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setWorldTime_args(setWorldTime_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetWorldName()) {
        this.worldName = other.worldName;
      }
      this.time = other.time;
    }

    public setWorldTime_args deepCopy() {
      return new setWorldTime_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.worldName = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getAuthString() {
      return this.authString;
    }

    public setWorldTime_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getWorldName() {
      return this.worldName;
    }

    public setWorldTime_args setWorldName(String worldName) {
      this.worldName = worldName;
      return this;
    }

    public void unsetWorldName() {
      this.worldName = null;
    }

    /** Returns true if field worldName is set (has been assigned a value) and false otherwise */
    public boolean isSetWorldName() {
      return this.worldName != null;
    }

    public void setWorldNameIsSet(boolean value) {
      if (!value) {
        this.worldName = null;
      }
    }

    public long getTime() {
      return this.time;
    }

    public setWorldTime_args setTime(long time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case WORLD_NAME:
        if (value == null) {
          unsetWorldName();
        } else {
          setWorldName((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case WORLD_NAME:
        return getWorldName();

      case TIME:
        return Long.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case WORLD_NAME:
        return isSetWorldName();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setWorldTime_args)
        return this.equals((setWorldTime_args)that);
      return false;
    }

    public boolean equals(setWorldTime_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_worldName = true && this.isSetWorldName();
      boolean that_present_worldName = true && that.isSetWorldName();
      if (this_present_worldName || that_present_worldName) {
        if (!(this_present_worldName && that_present_worldName))
          return false;
        if (!this.worldName.equals(that.worldName))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setWorldTime_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWorldName()).compareTo(other.isSetWorldName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorldName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worldName, other.worldName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setWorldTime_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("worldName:");
      if (this.worldName == null) {
        sb.append("null");
      } else {
        sb.append(this.worldName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setWorldTime_argsStandardSchemeFactory implements SchemeFactory {
      public setWorldTime_argsStandardScheme getScheme() {
        return new setWorldTime_argsStandardScheme();
      }
    }

    private static class setWorldTime_argsStandardScheme extends StandardScheme<setWorldTime_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setWorldTime_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORLD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.worldName = iprot.readString();
                struct.setWorldNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.time = iprot.readI64();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setWorldTime_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.worldName != null) {
          oprot.writeFieldBegin(WORLD_NAME_FIELD_DESC);
          oprot.writeString(struct.worldName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI64(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setWorldTime_argsTupleSchemeFactory implements SchemeFactory {
      public setWorldTime_argsTupleScheme getScheme() {
        return new setWorldTime_argsTupleScheme();
      }
    }

    private static class setWorldTime_argsTupleScheme extends TupleScheme<setWorldTime_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setWorldTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetWorldName()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetWorldName()) {
          oprot.writeString(struct.worldName);
        }
        if (struct.isSetTime()) {
          oprot.writeI64(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setWorldTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.worldName = iprot.readString();
          struct.setWorldNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readI64();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class setWorldTime_result implements org.apache.thrift.TBase<setWorldTime_result, setWorldTime_result._Fields>, java.io.Serializable, Cloneable, Comparable<setWorldTime_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setWorldTime_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setWorldTime_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setWorldTime_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setWorldTime_result.class, metaDataMap);
    }

    public setWorldTime_result() {
    }

    public setWorldTime_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setWorldTime_result(setWorldTime_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public setWorldTime_result deepCopy() {
      return new setWorldTime_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setWorldTime_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public setWorldTime_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public setWorldTime_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setWorldTime_result)
        return this.equals((setWorldTime_result)that);
      return false;
    }

    public boolean equals(setWorldTime_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setWorldTime_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setWorldTime_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setWorldTime_resultStandardSchemeFactory implements SchemeFactory {
      public setWorldTime_resultStandardScheme getScheme() {
        return new setWorldTime_resultStandardScheme();
      }
    }

    private static class setWorldTime_resultStandardScheme extends StandardScheme<setWorldTime_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setWorldTime_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setWorldTime_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setWorldTime_resultTupleSchemeFactory implements SchemeFactory {
      public setWorldTime_resultTupleScheme getScheme() {
        return new setWorldTime_resultTupleScheme();
      }
    }

    private static class setWorldTime_resultTupleScheme extends TupleScheme<setWorldTime_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setWorldTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setWorldTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class unBan_args implements org.apache.thrift.TBase<unBan_args, unBan_args._Fields>, java.io.Serializable, Cloneable, Comparable<unBan_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unBan_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unBan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unBan_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unBan_args.class, metaDataMap);
    }

    public unBan_args() {
    }

    public unBan_args(
      String authString,
      String name)
    {
      this();
      this.authString = authString;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unBan_args(unBan_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public unBan_args deepCopy() {
      return new unBan_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public unBan_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public unBan_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unBan_args)
        return this.equals((unBan_args)that);
      return false;
    }

    public boolean equals(unBan_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(unBan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unBan_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unBan_argsStandardSchemeFactory implements SchemeFactory {
      public unBan_argsStandardScheme getScheme() {
        return new unBan_argsStandardScheme();
      }
    }

    private static class unBan_argsStandardScheme extends StandardScheme<unBan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unBan_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unBan_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unBan_argsTupleSchemeFactory implements SchemeFactory {
      public unBan_argsTupleScheme getScheme() {
        return new unBan_argsTupleScheme();
      }
    }

    private static class unBan_argsTupleScheme extends TupleScheme<unBan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unBan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unBan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class unBan_result implements org.apache.thrift.TBase<unBan_result, unBan_result._Fields>, java.io.Serializable, Cloneable, Comparable<unBan_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unBan_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unBan_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unBan_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unBan_result.class, metaDataMap);
    }

    public unBan_result() {
    }

    public unBan_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unBan_result(unBan_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public unBan_result deepCopy() {
      return new unBan_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public unBan_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public unBan_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public unBan_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unBan_result)
        return this.equals((unBan_result)that);
      return false;
    }

    public boolean equals(unBan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(unBan_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unBan_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unBan_resultStandardSchemeFactory implements SchemeFactory {
      public unBan_resultStandardScheme getScheme() {
        return new unBan_resultStandardScheme();
      }
    }

    private static class unBan_resultStandardScheme extends StandardScheme<unBan_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unBan_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unBan_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unBan_resultTupleSchemeFactory implements SchemeFactory {
      public unBan_resultTupleScheme getScheme() {
        return new unBan_resultTupleScheme();
      }
    }

    private static class unBan_resultTupleScheme extends TupleScheme<unBan_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unBan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unBan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class unBanIp_args implements org.apache.thrift.TBase<unBanIp_args, unBanIp_args._Fields>, java.io.Serializable, Cloneable, Comparable<unBanIp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unBanIp_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unBanIp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unBanIp_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String ip; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      IP((short)2, "ip");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // IP
            return IP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unBanIp_args.class, metaDataMap);
    }

    public unBanIp_args() {
    }

    public unBanIp_args(
      String authString,
      String ip)
    {
      this();
      this.authString = authString;
      this.ip = ip;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unBanIp_args(unBanIp_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
    }

    public unBanIp_args deepCopy() {
      return new unBanIp_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.ip = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public unBanIp_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getIp() {
      return this.ip;
    }

    public unBanIp_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case IP:
        return getIp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case IP:
        return isSetIp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unBanIp_args)
        return this.equals((unBanIp_args)that);
      return false;
    }

    public boolean equals(unBanIp_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(unBanIp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unBanIp_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unBanIp_argsStandardSchemeFactory implements SchemeFactory {
      public unBanIp_argsStandardScheme getScheme() {
        return new unBanIp_argsStandardScheme();
      }
    }

    private static class unBanIp_argsStandardScheme extends StandardScheme<unBanIp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unBanIp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unBanIp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unBanIp_argsTupleSchemeFactory implements SchemeFactory {
      public unBanIp_argsTupleScheme getScheme() {
        return new unBanIp_argsTupleScheme();
      }
    }

    private static class unBanIp_argsTupleScheme extends TupleScheme<unBanIp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unBanIp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetIp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unBanIp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
      }
    }

  }

  public static class unBanIp_result implements org.apache.thrift.TBase<unBanIp_result, unBanIp_result._Fields>, java.io.Serializable, Cloneable, Comparable<unBanIp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unBanIp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unBanIp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unBanIp_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unBanIp_result.class, metaDataMap);
    }

    public unBanIp_result() {
    }

    public unBanIp_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unBanIp_result(unBanIp_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public unBanIp_result deepCopy() {
      return new unBanIp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public unBanIp_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public unBanIp_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public unBanIp_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unBanIp_result)
        return this.equals((unBanIp_result)that);
      return false;
    }

    public boolean equals(unBanIp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(unBanIp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unBanIp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unBanIp_resultStandardSchemeFactory implements SchemeFactory {
      public unBanIp_resultStandardScheme getScheme() {
        return new unBanIp_resultStandardScheme();
      }
    }

    private static class unBanIp_resultStandardScheme extends StandardScheme<unBanIp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unBanIp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unBanIp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unBanIp_resultTupleSchemeFactory implements SchemeFactory {
      public unBanIp_resultTupleScheme getScheme() {
        return new unBanIp_resultTupleScheme();
      }
    }

    private static class unBanIp_resultTupleScheme extends TupleScheme<unBanIp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unBanIp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unBanIp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class updateInventoryItem_args implements org.apache.thrift.TBase<updateInventoryItem_args, updateInventoryItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateInventoryItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateInventoryItem_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PLAYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("playerName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("item", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ITEM_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("itemIndex", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateInventoryItem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateInventoryItem_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String playerName; // required
    public ItemStack item; // required
    public int itemIndex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      PLAYER_NAME((short)2, "playerName"),
      ITEM((short)3, "item"),
      ITEM_INDEX((short)4, "itemIndex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // PLAYER_NAME
            return PLAYER_NAME;
          case 3: // ITEM
            return ITEM;
          case 4: // ITEM_INDEX
            return ITEM_INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ITEMINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PLAYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("playerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM, new org.apache.thrift.meta_data.FieldMetaData("item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ItemStack.class)));
      tmpMap.put(_Fields.ITEM_INDEX, new org.apache.thrift.meta_data.FieldMetaData("itemIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateInventoryItem_args.class, metaDataMap);
    }

    public updateInventoryItem_args() {
    }

    public updateInventoryItem_args(
      String authString,
      String playerName,
      ItemStack item,
      int itemIndex)
    {
      this();
      this.authString = authString;
      this.playerName = playerName;
      this.item = item;
      this.itemIndex = itemIndex;
      setItemIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateInventoryItem_args(updateInventoryItem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetPlayerName()) {
        this.playerName = other.playerName;
      }
      if (other.isSetItem()) {
        this.item = new ItemStack(other.item);
      }
      this.itemIndex = other.itemIndex;
    }

    public updateInventoryItem_args deepCopy() {
      return new updateInventoryItem_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.playerName = null;
      this.item = null;
      setItemIndexIsSet(false);
      this.itemIndex = 0;
    }

    public String getAuthString() {
      return this.authString;
    }

    public updateInventoryItem_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getPlayerName() {
      return this.playerName;
    }

    public updateInventoryItem_args setPlayerName(String playerName) {
      this.playerName = playerName;
      return this;
    }

    public void unsetPlayerName() {
      this.playerName = null;
    }

    /** Returns true if field playerName is set (has been assigned a value) and false otherwise */
    public boolean isSetPlayerName() {
      return this.playerName != null;
    }

    public void setPlayerNameIsSet(boolean value) {
      if (!value) {
        this.playerName = null;
      }
    }

    public ItemStack getItem() {
      return this.item;
    }

    public updateInventoryItem_args setItem(ItemStack item) {
      this.item = item;
      return this;
    }

    public void unsetItem() {
      this.item = null;
    }

    /** Returns true if field item is set (has been assigned a value) and false otherwise */
    public boolean isSetItem() {
      return this.item != null;
    }

    public void setItemIsSet(boolean value) {
      if (!value) {
        this.item = null;
      }
    }

    public int getItemIndex() {
      return this.itemIndex;
    }

    public updateInventoryItem_args setItemIndex(int itemIndex) {
      this.itemIndex = itemIndex;
      setItemIndexIsSet(true);
      return this;
    }

    public void unsetItemIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMINDEX_ISSET_ID);
    }

    /** Returns true if field itemIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetItemIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __ITEMINDEX_ISSET_ID);
    }

    public void setItemIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMINDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case PLAYER_NAME:
        if (value == null) {
          unsetPlayerName();
        } else {
          setPlayerName((String)value);
        }
        break;

      case ITEM:
        if (value == null) {
          unsetItem();
        } else {
          setItem((ItemStack)value);
        }
        break;

      case ITEM_INDEX:
        if (value == null) {
          unsetItemIndex();
        } else {
          setItemIndex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case PLAYER_NAME:
        return getPlayerName();

      case ITEM:
        return getItem();

      case ITEM_INDEX:
        return Integer.valueOf(getItemIndex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case PLAYER_NAME:
        return isSetPlayerName();
      case ITEM:
        return isSetItem();
      case ITEM_INDEX:
        return isSetItemIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateInventoryItem_args)
        return this.equals((updateInventoryItem_args)that);
      return false;
    }

    public boolean equals(updateInventoryItem_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_playerName = true && this.isSetPlayerName();
      boolean that_present_playerName = true && that.isSetPlayerName();
      if (this_present_playerName || that_present_playerName) {
        if (!(this_present_playerName && that_present_playerName))
          return false;
        if (!this.playerName.equals(that.playerName))
          return false;
      }

      boolean this_present_item = true && this.isSetItem();
      boolean that_present_item = true && that.isSetItem();
      if (this_present_item || that_present_item) {
        if (!(this_present_item && that_present_item))
          return false;
        if (!this.item.equals(that.item))
          return false;
      }

      boolean this_present_itemIndex = true;
      boolean that_present_itemIndex = true;
      if (this_present_itemIndex || that_present_itemIndex) {
        if (!(this_present_itemIndex && that_present_itemIndex))
          return false;
        if (this.itemIndex != that.itemIndex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateInventoryItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(other.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, other.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlayerName()).compareTo(other.isSetPlayerName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlayerName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerName, other.playerName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem()).compareTo(other.isSetItem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item, other.item);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemIndex()).compareTo(other.isSetItemIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemIndex, other.itemIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateInventoryItem_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("playerName:");
      if (this.playerName == null) {
        sb.append("null");
      } else {
        sb.append(this.playerName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item:");
      if (this.item == null) {
        sb.append("null");
      } else {
        sb.append(this.item);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemIndex:");
      sb.append(this.itemIndex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (item != null) {
        item.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateInventoryItem_argsStandardSchemeFactory implements SchemeFactory {
      public updateInventoryItem_argsStandardScheme getScheme() {
        return new updateInventoryItem_argsStandardScheme();
      }
    }

    private static class updateInventoryItem_argsStandardScheme extends StandardScheme<updateInventoryItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateInventoryItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PLAYER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.playerName = iprot.readString();
                struct.setPlayerNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.item = new ItemStack();
                struct.item.read(iprot);
                struct.setItemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ITEM_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.itemIndex = iprot.readI32();
                struct.setItemIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateInventoryItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.playerName != null) {
          oprot.writeFieldBegin(PLAYER_NAME_FIELD_DESC);
          oprot.writeString(struct.playerName);
          oprot.writeFieldEnd();
        }
        if (struct.item != null) {
          oprot.writeFieldBegin(ITEM_FIELD_DESC);
          struct.item.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ITEM_INDEX_FIELD_DESC);
        oprot.writeI32(struct.itemIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateInventoryItem_argsTupleSchemeFactory implements SchemeFactory {
      public updateInventoryItem_argsTupleScheme getScheme() {
        return new updateInventoryItem_argsTupleScheme();
      }
    }

    private static class updateInventoryItem_argsTupleScheme extends TupleScheme<updateInventoryItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateInventoryItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetPlayerName()) {
          optionals.set(1);
        }
        if (struct.isSetItem()) {
          optionals.set(2);
        }
        if (struct.isSetItemIndex()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetPlayerName()) {
          oprot.writeString(struct.playerName);
        }
        if (struct.isSetItem()) {
          struct.item.write(oprot);
        }
        if (struct.isSetItemIndex()) {
          oprot.writeI32(struct.itemIndex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateInventoryItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.playerName = iprot.readString();
          struct.setPlayerNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.item = new ItemStack();
          struct.item.read(iprot);
          struct.setItemIsSet(true);
        }
        if (incoming.get(3)) {
          struct.itemIndex = iprot.readI32();
          struct.setItemIndexIsSet(true);
        }
      }
    }

  }

  public static class updateInventoryItem_result implements org.apache.thrift.TBase<updateInventoryItem_result, updateInventoryItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateInventoryItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateInventoryItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateInventoryItem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateInventoryItem_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EAuthException aex; // required
    public EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateInventoryItem_result.class, metaDataMap);
    }

    public updateInventoryItem_result() {
    }

    public updateInventoryItem_result(
      boolean success,
      EAuthException aex,
      EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateInventoryItem_result(updateInventoryItem_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new EDataException(other.dex);
      }
    }

    public updateInventoryItem_result deepCopy() {
      return new updateInventoryItem_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateInventoryItem_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EAuthException getAex() {
      return this.aex;
    }

    public updateInventoryItem_result setAex(EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public EDataException getDex() {
      return this.dex;
    }

    public updateInventoryItem_result setDex(EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateInventoryItem_result)
        return this.equals((updateInventoryItem_result)that);
      return false;
    }

    public boolean equals(updateInventoryItem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateInventoryItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(other.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, other.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(other.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, other.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateInventoryItem_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateInventoryItem_resultStandardSchemeFactory implements SchemeFactory {
      public updateInventoryItem_resultStandardScheme getScheme() {
        return new updateInventoryItem_resultStandardScheme();
      }
    }

    private static class updateInventoryItem_resultStandardScheme extends StandardScheme<updateInventoryItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateInventoryItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateInventoryItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateInventoryItem_resultTupleSchemeFactory implements SchemeFactory {
      public updateInventoryItem_resultTupleScheme getScheme() {
        return new updateInventoryItem_resultTupleScheme();
      }
    }

    private static class updateInventoryItem_resultTupleScheme extends TupleScheme<updateInventoryItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateInventoryItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateInventoryItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

}
