/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.phybros.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SwiftApi {

  public interface Iface {

    /**
     * Add a Player to the server's whitelist. The player can be offline, or
     * be a player that has never played on this server before. If the player is
     * already on the whitelist, this method does nothing.
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the player to add to the whitelist
     * 
     * @return boolean true on success, false on failure
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws Errors.EDataException
     *             If the player was not found
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param name
     */
    public boolean addToWhitelist(String authString, String name) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException;

    /**
     * Permanently ban a player from the server by name. The player can be
     * offline, or have never played on this server before
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the player to ban
     * 
     * @return boolean true on success false on failure
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws Errors.EDataException
     *             If the player was not found
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param name
     */
    public boolean ban(String authString, String name) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException;

    /**
     * Permanently ban a specific IP from connecting to this server
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param ip
     *            The IP address to ban
     * 
     * @return boolean true on success false on failure
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param ip
     */
    public boolean banIp(String authString, String ip) throws org.phybros.thrift.EAuthException, org.apache.thrift.TException;

    /**
     * Takes "op" (operator) privileges away from a player. If the player is
     * already deopped, then this method does nothing
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The player to deop
     * 
     * @param notifyPlayer
     *            Whether or not to tell the player that they were deopped
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws Errors.EDataException
     *             If the Player was not found
     * 
     * @return String the current bukkit version
     * 
     * 
     * @param authString
     * @param name
     * @param notifyPlayer
     */
    public boolean deOp(String authString, String name, boolean notifyPlayer) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException;

    /**
     * Get the current bukkit version
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return String the current bukkit version
     * 
     * 
     * @param authString
     */
    public String getBukkitVersion(String authString) throws org.phybros.thrift.EAuthException, org.apache.thrift.TException;

    /**
     * Get an offline player. This method will always return an
     * OfflinePlayer object, even if the requested player has never played
     * before.
     * 
     * The "hasPlayedBefore" property can be checked to determine if the
     * requested player has ever played on this particular server before
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The player to get
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws Errors.EDataException
     *             If the player could not be found
     * 
     * @return OfflinePlayer the requested player.
     * 
     * 
     * @param authString
     * @param name
     */
    public OfflinePlayer getOfflinePlayer(String authString, String name) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException;

    /**
     * Gets a list of all players who have ever played on this server
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return List<OfflinePlayer> A list of all players who have ever
     *         played on this server
     * 
     * 
     * @param authString
     */
    public List<OfflinePlayer> getOfflinePlayers(String authString) throws org.phybros.thrift.EAuthException, org.apache.thrift.TException;

    /**
     * Get a player by name. Throws an Errors.EDataException if the player is
     * offline, or doesn't exist
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the player to try and get
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws Errors.EDataException
     *             If the player is not online, or does not exist
     * 
     * @return Player The requested player. If the player could not be
     *         found, and Errors.EDataException is thrown
     * @see org.phybros.thrift.SwiftApi.Iface#getPlugins(java.lang.String)
     * 
     * @param authString
     * @param name
     */
    public Player getPlayer(String authString, String name) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException;

    /**
     * Get all online Players
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return List<Player> A list of all currently online players
     * 
     * @param authString
     */
    public List<Player> getPlayers(String authString) throws org.phybros.thrift.EAuthException, org.apache.thrift.TException;

    /**
     * Get a loaded server plugin by name
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the plugin to try and get
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws Errors.EDataException
     *             If the requested plugin was not found
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return Plugin The plugin
     * 
     * 
     * @param authString
     * @param name
     */
    public Plugin getPlugin(String authString, String name) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException;

    /**
     * This method returns a list of all the currently loaded plugins on the
     * server.
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return List<Plugin> A list of the plugins on the server
     * 
     * 
     * @param authString
     */
    public List<Plugin> getPlugins(String authString) throws org.phybros.thrift.EAuthException, org.apache.thrift.TException;

    /**
     * Get the current server. This object contains a large amount of information
     * about the server including player and plugin information, as well as configuration
     * information.
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     * 		  If something thrifty went wrong
     * 
     * @throws Errors.EAuthException
     * 		  If the method call was not correctly authenticated
     * 
     * @return Server An object containing server information
     * 
     * 
     * @param authString
     */
    public Server getServer(String authString) throws org.phybros.thrift.EAuthException, org.apache.thrift.TException;

    /**
     * Get the current server version
     * 
     * @param authString
     *            The authentication hash
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @return String the version of the server
     * 
     * 
     * @param authString
     */
    public String getServerVersion(String authString) throws org.phybros.thrift.EAuthException, org.apache.thrift.TException;

    /**
     * Kick a currently online Player from the server with a specific custom
     * message
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the player to kick
     * 
     * @param message
     *            The message to send to the player after they have been
     *            kicked
     * 
     * @return boolean true on success false on failure
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws Errors.EDataException
     *             If the player is not currently online
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param name
     * @param message
     */
    public boolean kick(String authString, String name, String message) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException;

    /**
     * Makes a player "op" (operator). If the player is already op, then
     * this method does nothing
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the player to op
     *            
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws Errors.EDataException
     *             If the Player was not found
     * 
     * @return String the current bukkit version
     * 
     * 
     * @param authString
     * @param name
     * @param notifyPlayer
     */
    public boolean op(String authString, String name, boolean notifyPlayer) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException;

    /**
     * Remove a Player from the server's whitelist. The player can be offline, or
     * be a player that has never played on this server before. If the player is not
     * already on the whitelist, this method does nothing.
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the player to remove from the whitelist
     * 
     * @return boolean true on success, false on failure
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws Errors.EDataException
     *             If the player was not found
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param name
     */
    public boolean removeFromWhitelist(String authString, String name) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException;

    /**
     * Sets the gamemode of a player
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the player
     * 
     * @param mode
     *            The GameMode to set the player to
     * 
     * @throws TException
     *             If something thrifty went wrong
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws Errors.EDataException
     *             If the Player was not found
     * 
     * @return String the current bukkit version
     * 
     * 
     * @param authString
     * @param name
     * @param mode
     */
    public boolean setGameMode(String authString, String name, GameMode mode) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException;

    /**
     * Un ban a specific player
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param name
     *            The name of the player to unban
     * 
     * @return boolean true on success false on failure
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws Errors.EDataException
     *             If the player was not found
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param name
     */
    public boolean unBan(String authString, String name) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException;

    /**
     * Un ban a specific IP from connecting to this server
     * 
     * @param authString
     *            The authentication hash
     * 
     * @param ip
     *            The IP to unban
     * 
     * @return boolean true on success false on failure
     * 
     * @throws Errors.EAuthException
     *             If the method call was not correctly authenticated
     * 
     * @throws org.apache.thrift.TException
     *             If something went wrong with Thrift
     * 
     * @param authString
     * @param ip
     */
    public boolean unBanIp(String authString, String ip) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addToWhitelist(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addToWhitelist_call> resultHandler) throws org.apache.thrift.TException;

    public void ban(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ban_call> resultHandler) throws org.apache.thrift.TException;

    public void banIp(String authString, String ip, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.banIp_call> resultHandler) throws org.apache.thrift.TException;

    public void deOp(String authString, String name, boolean notifyPlayer, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deOp_call> resultHandler) throws org.apache.thrift.TException;

    public void getBukkitVersion(String authString, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getBukkitVersion_call> resultHandler) throws org.apache.thrift.TException;

    public void getOfflinePlayer(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getOfflinePlayer_call> resultHandler) throws org.apache.thrift.TException;

    public void getOfflinePlayers(String authString, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getOfflinePlayers_call> resultHandler) throws org.apache.thrift.TException;

    public void getPlayer(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPlayer_call> resultHandler) throws org.apache.thrift.TException;

    public void getPlayers(String authString, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPlayers_call> resultHandler) throws org.apache.thrift.TException;

    public void getPlugin(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPlugin_call> resultHandler) throws org.apache.thrift.TException;

    public void getPlugins(String authString, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPlugins_call> resultHandler) throws org.apache.thrift.TException;

    public void getServer(String authString, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getServer_call> resultHandler) throws org.apache.thrift.TException;

    public void getServerVersion(String authString, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getServerVersion_call> resultHandler) throws org.apache.thrift.TException;

    public void kick(String authString, String name, String message, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.kick_call> resultHandler) throws org.apache.thrift.TException;

    public void op(String authString, String name, boolean notifyPlayer, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.op_call> resultHandler) throws org.apache.thrift.TException;

    public void removeFromWhitelist(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeFromWhitelist_call> resultHandler) throws org.apache.thrift.TException;

    public void setGameMode(String authString, String name, GameMode mode, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setGameMode_call> resultHandler) throws org.apache.thrift.TException;

    public void unBan(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.unBan_call> resultHandler) throws org.apache.thrift.TException;

    public void unBanIp(String authString, String ip, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.unBanIp_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean addToWhitelist(String authString, String name) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      send_addToWhitelist(authString, name);
      return recv_addToWhitelist();
    }

    public void send_addToWhitelist(String authString, String name) throws org.apache.thrift.TException
    {
      addToWhitelist_args args = new addToWhitelist_args();
      args.setAuthString(authString);
      args.setName(name);
      sendBase("addToWhitelist", args);
    }

    public boolean recv_addToWhitelist() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      addToWhitelist_result result = new addToWhitelist_result();
      receiveBase(result, "addToWhitelist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addToWhitelist failed: unknown result");
    }

    public boolean ban(String authString, String name) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      send_ban(authString, name);
      return recv_ban();
    }

    public void send_ban(String authString, String name) throws org.apache.thrift.TException
    {
      ban_args args = new ban_args();
      args.setAuthString(authString);
      args.setName(name);
      sendBase("ban", args);
    }

    public boolean recv_ban() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      ban_result result = new ban_result();
      receiveBase(result, "ban");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ban failed: unknown result");
    }

    public boolean banIp(String authString, String ip) throws org.phybros.thrift.EAuthException, org.apache.thrift.TException
    {
      send_banIp(authString, ip);
      return recv_banIp();
    }

    public void send_banIp(String authString, String ip) throws org.apache.thrift.TException
    {
      banIp_args args = new banIp_args();
      args.setAuthString(authString);
      args.setIp(ip);
      sendBase("banIp", args);
    }

    public boolean recv_banIp() throws org.phybros.thrift.EAuthException, org.apache.thrift.TException
    {
      banIp_result result = new banIp_result();
      receiveBase(result, "banIp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "banIp failed: unknown result");
    }

    public boolean deOp(String authString, String name, boolean notifyPlayer) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      send_deOp(authString, name, notifyPlayer);
      return recv_deOp();
    }

    public void send_deOp(String authString, String name, boolean notifyPlayer) throws org.apache.thrift.TException
    {
      deOp_args args = new deOp_args();
      args.setAuthString(authString);
      args.setName(name);
      args.setNotifyPlayer(notifyPlayer);
      sendBase("deOp", args);
    }

    public boolean recv_deOp() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      deOp_result result = new deOp_result();
      receiveBase(result, "deOp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deOp failed: unknown result");
    }

    public String getBukkitVersion(String authString) throws org.phybros.thrift.EAuthException, org.apache.thrift.TException
    {
      send_getBukkitVersion(authString);
      return recv_getBukkitVersion();
    }

    public void send_getBukkitVersion(String authString) throws org.apache.thrift.TException
    {
      getBukkitVersion_args args = new getBukkitVersion_args();
      args.setAuthString(authString);
      sendBase("getBukkitVersion", args);
    }

    public String recv_getBukkitVersion() throws org.phybros.thrift.EAuthException, org.apache.thrift.TException
    {
      getBukkitVersion_result result = new getBukkitVersion_result();
      receiveBase(result, "getBukkitVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBukkitVersion failed: unknown result");
    }

    public OfflinePlayer getOfflinePlayer(String authString, String name) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      send_getOfflinePlayer(authString, name);
      return recv_getOfflinePlayer();
    }

    public void send_getOfflinePlayer(String authString, String name) throws org.apache.thrift.TException
    {
      getOfflinePlayer_args args = new getOfflinePlayer_args();
      args.setAuthString(authString);
      args.setName(name);
      sendBase("getOfflinePlayer", args);
    }

    public OfflinePlayer recv_getOfflinePlayer() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      getOfflinePlayer_result result = new getOfflinePlayer_result();
      receiveBase(result, "getOfflinePlayer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOfflinePlayer failed: unknown result");
    }

    public List<OfflinePlayer> getOfflinePlayers(String authString) throws org.phybros.thrift.EAuthException, org.apache.thrift.TException
    {
      send_getOfflinePlayers(authString);
      return recv_getOfflinePlayers();
    }

    public void send_getOfflinePlayers(String authString) throws org.apache.thrift.TException
    {
      getOfflinePlayers_args args = new getOfflinePlayers_args();
      args.setAuthString(authString);
      sendBase("getOfflinePlayers", args);
    }

    public List<OfflinePlayer> recv_getOfflinePlayers() throws org.phybros.thrift.EAuthException, org.apache.thrift.TException
    {
      getOfflinePlayers_result result = new getOfflinePlayers_result();
      receiveBase(result, "getOfflinePlayers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOfflinePlayers failed: unknown result");
    }

    public Player getPlayer(String authString, String name) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      send_getPlayer(authString, name);
      return recv_getPlayer();
    }

    public void send_getPlayer(String authString, String name) throws org.apache.thrift.TException
    {
      getPlayer_args args = new getPlayer_args();
      args.setAuthString(authString);
      args.setName(name);
      sendBase("getPlayer", args);
    }

    public Player recv_getPlayer() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      getPlayer_result result = new getPlayer_result();
      receiveBase(result, "getPlayer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPlayer failed: unknown result");
    }

    public List<Player> getPlayers(String authString) throws org.phybros.thrift.EAuthException, org.apache.thrift.TException
    {
      send_getPlayers(authString);
      return recv_getPlayers();
    }

    public void send_getPlayers(String authString) throws org.apache.thrift.TException
    {
      getPlayers_args args = new getPlayers_args();
      args.setAuthString(authString);
      sendBase("getPlayers", args);
    }

    public List<Player> recv_getPlayers() throws org.phybros.thrift.EAuthException, org.apache.thrift.TException
    {
      getPlayers_result result = new getPlayers_result();
      receiveBase(result, "getPlayers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPlayers failed: unknown result");
    }

    public Plugin getPlugin(String authString, String name) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      send_getPlugin(authString, name);
      return recv_getPlugin();
    }

    public void send_getPlugin(String authString, String name) throws org.apache.thrift.TException
    {
      getPlugin_args args = new getPlugin_args();
      args.setAuthString(authString);
      args.setName(name);
      sendBase("getPlugin", args);
    }

    public Plugin recv_getPlugin() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      getPlugin_result result = new getPlugin_result();
      receiveBase(result, "getPlugin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPlugin failed: unknown result");
    }

    public List<Plugin> getPlugins(String authString) throws org.phybros.thrift.EAuthException, org.apache.thrift.TException
    {
      send_getPlugins(authString);
      return recv_getPlugins();
    }

    public void send_getPlugins(String authString) throws org.apache.thrift.TException
    {
      getPlugins_args args = new getPlugins_args();
      args.setAuthString(authString);
      sendBase("getPlugins", args);
    }

    public List<Plugin> recv_getPlugins() throws org.phybros.thrift.EAuthException, org.apache.thrift.TException
    {
      getPlugins_result result = new getPlugins_result();
      receiveBase(result, "getPlugins");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPlugins failed: unknown result");
    }

    public Server getServer(String authString) throws org.phybros.thrift.EAuthException, org.apache.thrift.TException
    {
      send_getServer(authString);
      return recv_getServer();
    }

    public void send_getServer(String authString) throws org.apache.thrift.TException
    {
      getServer_args args = new getServer_args();
      args.setAuthString(authString);
      sendBase("getServer", args);
    }

    public Server recv_getServer() throws org.phybros.thrift.EAuthException, org.apache.thrift.TException
    {
      getServer_result result = new getServer_result();
      receiveBase(result, "getServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getServer failed: unknown result");
    }

    public String getServerVersion(String authString) throws org.phybros.thrift.EAuthException, org.apache.thrift.TException
    {
      send_getServerVersion(authString);
      return recv_getServerVersion();
    }

    public void send_getServerVersion(String authString) throws org.apache.thrift.TException
    {
      getServerVersion_args args = new getServerVersion_args();
      args.setAuthString(authString);
      sendBase("getServerVersion", args);
    }

    public String recv_getServerVersion() throws org.phybros.thrift.EAuthException, org.apache.thrift.TException
    {
      getServerVersion_result result = new getServerVersion_result();
      receiveBase(result, "getServerVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getServerVersion failed: unknown result");
    }

    public boolean kick(String authString, String name, String message) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      send_kick(authString, name, message);
      return recv_kick();
    }

    public void send_kick(String authString, String name, String message) throws org.apache.thrift.TException
    {
      kick_args args = new kick_args();
      args.setAuthString(authString);
      args.setName(name);
      args.setMessage(message);
      sendBase("kick", args);
    }

    public boolean recv_kick() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      kick_result result = new kick_result();
      receiveBase(result, "kick");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "kick failed: unknown result");
    }

    public boolean op(String authString, String name, boolean notifyPlayer) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      send_op(authString, name, notifyPlayer);
      return recv_op();
    }

    public void send_op(String authString, String name, boolean notifyPlayer) throws org.apache.thrift.TException
    {
      op_args args = new op_args();
      args.setAuthString(authString);
      args.setName(name);
      args.setNotifyPlayer(notifyPlayer);
      sendBase("op", args);
    }

    public boolean recv_op() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      op_result result = new op_result();
      receiveBase(result, "op");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "op failed: unknown result");
    }

    public boolean removeFromWhitelist(String authString, String name) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      send_removeFromWhitelist(authString, name);
      return recv_removeFromWhitelist();
    }

    public void send_removeFromWhitelist(String authString, String name) throws org.apache.thrift.TException
    {
      removeFromWhitelist_args args = new removeFromWhitelist_args();
      args.setAuthString(authString);
      args.setName(name);
      sendBase("removeFromWhitelist", args);
    }

    public boolean recv_removeFromWhitelist() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      removeFromWhitelist_result result = new removeFromWhitelist_result();
      receiveBase(result, "removeFromWhitelist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeFromWhitelist failed: unknown result");
    }

    public boolean setGameMode(String authString, String name, GameMode mode) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      send_setGameMode(authString, name, mode);
      return recv_setGameMode();
    }

    public void send_setGameMode(String authString, String name, GameMode mode) throws org.apache.thrift.TException
    {
      setGameMode_args args = new setGameMode_args();
      args.setAuthString(authString);
      args.setName(name);
      args.setMode(mode);
      sendBase("setGameMode", args);
    }

    public boolean recv_setGameMode() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      setGameMode_result result = new setGameMode_result();
      receiveBase(result, "setGameMode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setGameMode failed: unknown result");
    }

    public boolean unBan(String authString, String name) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      send_unBan(authString, name);
      return recv_unBan();
    }

    public void send_unBan(String authString, String name) throws org.apache.thrift.TException
    {
      unBan_args args = new unBan_args();
      args.setAuthString(authString);
      args.setName(name);
      sendBase("unBan", args);
    }

    public boolean recv_unBan() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      unBan_result result = new unBan_result();
      receiveBase(result, "unBan");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unBan failed: unknown result");
    }

    public boolean unBanIp(String authString, String ip) throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      send_unBanIp(authString, ip);
      return recv_unBanIp();
    }

    public void send_unBanIp(String authString, String ip) throws org.apache.thrift.TException
    {
      unBanIp_args args = new unBanIp_args();
      args.setAuthString(authString);
      args.setIp(ip);
      sendBase("unBanIp", args);
    }

    public boolean recv_unBanIp() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException
    {
      unBanIp_result result = new unBanIp_result();
      receiveBase(result, "unBanIp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aex != null) {
        throw result.aex;
      }
      if (result.dex != null) {
        throw result.dex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unBanIp failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addToWhitelist(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<addToWhitelist_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addToWhitelist_call method_call = new addToWhitelist_call(authString, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addToWhitelist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      public addToWhitelist_call(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<addToWhitelist_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addToWhitelist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addToWhitelist_args args = new addToWhitelist_args();
        args.setAuthString(authString);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addToWhitelist();
      }
    }

    public void ban(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<ban_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ban_call method_call = new ban_call(authString, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ban_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      public ban_call(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<ban_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ban", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ban_args args = new ban_args();
        args.setAuthString(authString);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ban();
      }
    }

    public void banIp(String authString, String ip, org.apache.thrift.async.AsyncMethodCallback<banIp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      banIp_call method_call = new banIp_call(authString, ip, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class banIp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String ip;
      public banIp_call(String authString, String ip, org.apache.thrift.async.AsyncMethodCallback<banIp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.ip = ip;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("banIp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        banIp_args args = new banIp_args();
        args.setAuthString(authString);
        args.setIp(ip);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.phybros.thrift.EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_banIp();
      }
    }

    public void deOp(String authString, String name, boolean notifyPlayer, org.apache.thrift.async.AsyncMethodCallback<deOp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deOp_call method_call = new deOp_call(authString, name, notifyPlayer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deOp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      private boolean notifyPlayer;
      public deOp_call(String authString, String name, boolean notifyPlayer, org.apache.thrift.async.AsyncMethodCallback<deOp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
        this.notifyPlayer = notifyPlayer;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deOp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deOp_args args = new deOp_args();
        args.setAuthString(authString);
        args.setName(name);
        args.setNotifyPlayer(notifyPlayer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deOp();
      }
    }

    public void getBukkitVersion(String authString, org.apache.thrift.async.AsyncMethodCallback<getBukkitVersion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBukkitVersion_call method_call = new getBukkitVersion_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBukkitVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getBukkitVersion_call(String authString, org.apache.thrift.async.AsyncMethodCallback<getBukkitVersion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBukkitVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBukkitVersion_args args = new getBukkitVersion_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.phybros.thrift.EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBukkitVersion();
      }
    }

    public void getOfflinePlayer(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<getOfflinePlayer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOfflinePlayer_call method_call = new getOfflinePlayer_call(authString, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOfflinePlayer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      public getOfflinePlayer_call(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<getOfflinePlayer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOfflinePlayer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOfflinePlayer_args args = new getOfflinePlayer_args();
        args.setAuthString(authString);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OfflinePlayer getResult() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOfflinePlayer();
      }
    }

    public void getOfflinePlayers(String authString, org.apache.thrift.async.AsyncMethodCallback<getOfflinePlayers_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOfflinePlayers_call method_call = new getOfflinePlayers_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOfflinePlayers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getOfflinePlayers_call(String authString, org.apache.thrift.async.AsyncMethodCallback<getOfflinePlayers_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOfflinePlayers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOfflinePlayers_args args = new getOfflinePlayers_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<OfflinePlayer> getResult() throws org.phybros.thrift.EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOfflinePlayers();
      }
    }

    public void getPlayer(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<getPlayer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPlayer_call method_call = new getPlayer_call(authString, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPlayer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      public getPlayer_call(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<getPlayer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPlayer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPlayer_args args = new getPlayer_args();
        args.setAuthString(authString);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Player getResult() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPlayer();
      }
    }

    public void getPlayers(String authString, org.apache.thrift.async.AsyncMethodCallback<getPlayers_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPlayers_call method_call = new getPlayers_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPlayers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getPlayers_call(String authString, org.apache.thrift.async.AsyncMethodCallback<getPlayers_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPlayers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPlayers_args args = new getPlayers_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Player> getResult() throws org.phybros.thrift.EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPlayers();
      }
    }

    public void getPlugin(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<getPlugin_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPlugin_call method_call = new getPlugin_call(authString, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPlugin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      public getPlugin_call(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<getPlugin_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPlugin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPlugin_args args = new getPlugin_args();
        args.setAuthString(authString);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Plugin getResult() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPlugin();
      }
    }

    public void getPlugins(String authString, org.apache.thrift.async.AsyncMethodCallback<getPlugins_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPlugins_call method_call = new getPlugins_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPlugins_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getPlugins_call(String authString, org.apache.thrift.async.AsyncMethodCallback<getPlugins_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPlugins", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPlugins_args args = new getPlugins_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Plugin> getResult() throws org.phybros.thrift.EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPlugins();
      }
    }

    public void getServer(String authString, org.apache.thrift.async.AsyncMethodCallback<getServer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getServer_call method_call = new getServer_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getServer_call(String authString, org.apache.thrift.async.AsyncMethodCallback<getServer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getServer_args args = new getServer_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Server getResult() throws org.phybros.thrift.EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getServer();
      }
    }

    public void getServerVersion(String authString, org.apache.thrift.async.AsyncMethodCallback<getServerVersion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getServerVersion_call method_call = new getServerVersion_call(authString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getServerVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      public getServerVersion_call(String authString, org.apache.thrift.async.AsyncMethodCallback<getServerVersion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getServerVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getServerVersion_args args = new getServerVersion_args();
        args.setAuthString(authString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.phybros.thrift.EAuthException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getServerVersion();
      }
    }

    public void kick(String authString, String name, String message, org.apache.thrift.async.AsyncMethodCallback<kick_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      kick_call method_call = new kick_call(authString, name, message, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class kick_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      private String message;
      public kick_call(String authString, String name, String message, org.apache.thrift.async.AsyncMethodCallback<kick_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
        this.message = message;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("kick", org.apache.thrift.protocol.TMessageType.CALL, 0));
        kick_args args = new kick_args();
        args.setAuthString(authString);
        args.setName(name);
        args.setMessage(message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_kick();
      }
    }

    public void op(String authString, String name, boolean notifyPlayer, org.apache.thrift.async.AsyncMethodCallback<op_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      op_call method_call = new op_call(authString, name, notifyPlayer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class op_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      private boolean notifyPlayer;
      public op_call(String authString, String name, boolean notifyPlayer, org.apache.thrift.async.AsyncMethodCallback<op_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
        this.notifyPlayer = notifyPlayer;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("op", org.apache.thrift.protocol.TMessageType.CALL, 0));
        op_args args = new op_args();
        args.setAuthString(authString);
        args.setName(name);
        args.setNotifyPlayer(notifyPlayer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_op();
      }
    }

    public void removeFromWhitelist(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<removeFromWhitelist_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeFromWhitelist_call method_call = new removeFromWhitelist_call(authString, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeFromWhitelist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      public removeFromWhitelist_call(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<removeFromWhitelist_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeFromWhitelist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeFromWhitelist_args args = new removeFromWhitelist_args();
        args.setAuthString(authString);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeFromWhitelist();
      }
    }

    public void setGameMode(String authString, String name, GameMode mode, org.apache.thrift.async.AsyncMethodCallback<setGameMode_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setGameMode_call method_call = new setGameMode_call(authString, name, mode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setGameMode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      private GameMode mode;
      public setGameMode_call(String authString, String name, GameMode mode, org.apache.thrift.async.AsyncMethodCallback<setGameMode_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
        this.mode = mode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setGameMode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setGameMode_args args = new setGameMode_args();
        args.setAuthString(authString);
        args.setName(name);
        args.setMode(mode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setGameMode();
      }
    }

    public void unBan(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<unBan_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unBan_call method_call = new unBan_call(authString, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unBan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String name;
      public unBan_call(String authString, String name, org.apache.thrift.async.AsyncMethodCallback<unBan_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unBan", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unBan_args args = new unBan_args();
        args.setAuthString(authString);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unBan();
      }
    }

    public void unBanIp(String authString, String ip, org.apache.thrift.async.AsyncMethodCallback<unBanIp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unBanIp_call method_call = new unBanIp_call(authString, ip, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unBanIp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authString;
      private String ip;
      public unBanIp_call(String authString, String ip, org.apache.thrift.async.AsyncMethodCallback<unBanIp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authString = authString;
        this.ip = ip;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unBanIp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unBanIp_args args = new unBanIp_args();
        args.setAuthString(authString);
        args.setIp(ip);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.phybros.thrift.EAuthException, org.phybros.thrift.EDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unBanIp();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addToWhitelist", new addToWhitelist());
      processMap.put("ban", new ban());
      processMap.put("banIp", new banIp());
      processMap.put("deOp", new deOp());
      processMap.put("getBukkitVersion", new getBukkitVersion());
      processMap.put("getOfflinePlayer", new getOfflinePlayer());
      processMap.put("getOfflinePlayers", new getOfflinePlayers());
      processMap.put("getPlayer", new getPlayer());
      processMap.put("getPlayers", new getPlayers());
      processMap.put("getPlugin", new getPlugin());
      processMap.put("getPlugins", new getPlugins());
      processMap.put("getServer", new getServer());
      processMap.put("getServerVersion", new getServerVersion());
      processMap.put("kick", new kick());
      processMap.put("op", new op());
      processMap.put("removeFromWhitelist", new removeFromWhitelist());
      processMap.put("setGameMode", new setGameMode());
      processMap.put("unBan", new unBan());
      processMap.put("unBanIp", new unBanIp());
      return processMap;
    }

    private static class addToWhitelist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addToWhitelist_args> {
      public addToWhitelist() {
        super("addToWhitelist");
      }

      protected addToWhitelist_args getEmptyArgsInstance() {
        return new addToWhitelist_args();
      }

      protected addToWhitelist_result getResult(I iface, addToWhitelist_args args) throws org.apache.thrift.TException {
        addToWhitelist_result result = new addToWhitelist_result();
        try {
          result.success = iface.addToWhitelist(args.authString, args.name);
          result.setSuccessIsSet(true);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        } catch (org.phybros.thrift.EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    private static class ban<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ban_args> {
      public ban() {
        super("ban");
      }

      protected ban_args getEmptyArgsInstance() {
        return new ban_args();
      }

      protected ban_result getResult(I iface, ban_args args) throws org.apache.thrift.TException {
        ban_result result = new ban_result();
        try {
          result.success = iface.ban(args.authString, args.name);
          result.setSuccessIsSet(true);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        } catch (org.phybros.thrift.EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    private static class banIp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, banIp_args> {
      public banIp() {
        super("banIp");
      }

      protected banIp_args getEmptyArgsInstance() {
        return new banIp_args();
      }

      protected banIp_result getResult(I iface, banIp_args args) throws org.apache.thrift.TException {
        banIp_result result = new banIp_result();
        try {
          result.success = iface.banIp(args.authString, args.ip);
          result.setSuccessIsSet(true);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    private static class deOp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deOp_args> {
      public deOp() {
        super("deOp");
      }

      protected deOp_args getEmptyArgsInstance() {
        return new deOp_args();
      }

      protected deOp_result getResult(I iface, deOp_args args) throws org.apache.thrift.TException {
        deOp_result result = new deOp_result();
        try {
          result.success = iface.deOp(args.authString, args.name, args.notifyPlayer);
          result.setSuccessIsSet(true);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        } catch (org.phybros.thrift.EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    private static class getBukkitVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBukkitVersion_args> {
      public getBukkitVersion() {
        super("getBukkitVersion");
      }

      protected getBukkitVersion_args getEmptyArgsInstance() {
        return new getBukkitVersion_args();
      }

      protected getBukkitVersion_result getResult(I iface, getBukkitVersion_args args) throws org.apache.thrift.TException {
        getBukkitVersion_result result = new getBukkitVersion_result();
        try {
          result.success = iface.getBukkitVersion(args.authString);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    private static class getOfflinePlayer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOfflinePlayer_args> {
      public getOfflinePlayer() {
        super("getOfflinePlayer");
      }

      protected getOfflinePlayer_args getEmptyArgsInstance() {
        return new getOfflinePlayer_args();
      }

      protected getOfflinePlayer_result getResult(I iface, getOfflinePlayer_args args) throws org.apache.thrift.TException {
        getOfflinePlayer_result result = new getOfflinePlayer_result();
        try {
          result.success = iface.getOfflinePlayer(args.authString, args.name);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        } catch (org.phybros.thrift.EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    private static class getOfflinePlayers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOfflinePlayers_args> {
      public getOfflinePlayers() {
        super("getOfflinePlayers");
      }

      protected getOfflinePlayers_args getEmptyArgsInstance() {
        return new getOfflinePlayers_args();
      }

      protected getOfflinePlayers_result getResult(I iface, getOfflinePlayers_args args) throws org.apache.thrift.TException {
        getOfflinePlayers_result result = new getOfflinePlayers_result();
        try {
          result.success = iface.getOfflinePlayers(args.authString);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    private static class getPlayer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPlayer_args> {
      public getPlayer() {
        super("getPlayer");
      }

      protected getPlayer_args getEmptyArgsInstance() {
        return new getPlayer_args();
      }

      protected getPlayer_result getResult(I iface, getPlayer_args args) throws org.apache.thrift.TException {
        getPlayer_result result = new getPlayer_result();
        try {
          result.success = iface.getPlayer(args.authString, args.name);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        } catch (org.phybros.thrift.EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    private static class getPlayers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPlayers_args> {
      public getPlayers() {
        super("getPlayers");
      }

      protected getPlayers_args getEmptyArgsInstance() {
        return new getPlayers_args();
      }

      protected getPlayers_result getResult(I iface, getPlayers_args args) throws org.apache.thrift.TException {
        getPlayers_result result = new getPlayers_result();
        try {
          result.success = iface.getPlayers(args.authString);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    private static class getPlugin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPlugin_args> {
      public getPlugin() {
        super("getPlugin");
      }

      protected getPlugin_args getEmptyArgsInstance() {
        return new getPlugin_args();
      }

      protected getPlugin_result getResult(I iface, getPlugin_args args) throws org.apache.thrift.TException {
        getPlugin_result result = new getPlugin_result();
        try {
          result.success = iface.getPlugin(args.authString, args.name);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        } catch (org.phybros.thrift.EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    private static class getPlugins<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPlugins_args> {
      public getPlugins() {
        super("getPlugins");
      }

      protected getPlugins_args getEmptyArgsInstance() {
        return new getPlugins_args();
      }

      protected getPlugins_result getResult(I iface, getPlugins_args args) throws org.apache.thrift.TException {
        getPlugins_result result = new getPlugins_result();
        try {
          result.success = iface.getPlugins(args.authString);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    private static class getServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getServer_args> {
      public getServer() {
        super("getServer");
      }

      protected getServer_args getEmptyArgsInstance() {
        return new getServer_args();
      }

      protected getServer_result getResult(I iface, getServer_args args) throws org.apache.thrift.TException {
        getServer_result result = new getServer_result();
        try {
          result.success = iface.getServer(args.authString);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    private static class getServerVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getServerVersion_args> {
      public getServerVersion() {
        super("getServerVersion");
      }

      protected getServerVersion_args getEmptyArgsInstance() {
        return new getServerVersion_args();
      }

      protected getServerVersion_result getResult(I iface, getServerVersion_args args) throws org.apache.thrift.TException {
        getServerVersion_result result = new getServerVersion_result();
        try {
          result.success = iface.getServerVersion(args.authString);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        }
        return result;
      }
    }

    private static class kick<I extends Iface> extends org.apache.thrift.ProcessFunction<I, kick_args> {
      public kick() {
        super("kick");
      }

      protected kick_args getEmptyArgsInstance() {
        return new kick_args();
      }

      protected kick_result getResult(I iface, kick_args args) throws org.apache.thrift.TException {
        kick_result result = new kick_result();
        try {
          result.success = iface.kick(args.authString, args.name, args.message);
          result.setSuccessIsSet(true);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        } catch (org.phybros.thrift.EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    private static class op<I extends Iface> extends org.apache.thrift.ProcessFunction<I, op_args> {
      public op() {
        super("op");
      }

      protected op_args getEmptyArgsInstance() {
        return new op_args();
      }

      protected op_result getResult(I iface, op_args args) throws org.apache.thrift.TException {
        op_result result = new op_result();
        try {
          result.success = iface.op(args.authString, args.name, args.notifyPlayer);
          result.setSuccessIsSet(true);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        } catch (org.phybros.thrift.EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    private static class removeFromWhitelist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeFromWhitelist_args> {
      public removeFromWhitelist() {
        super("removeFromWhitelist");
      }

      protected removeFromWhitelist_args getEmptyArgsInstance() {
        return new removeFromWhitelist_args();
      }

      protected removeFromWhitelist_result getResult(I iface, removeFromWhitelist_args args) throws org.apache.thrift.TException {
        removeFromWhitelist_result result = new removeFromWhitelist_result();
        try {
          result.success = iface.removeFromWhitelist(args.authString, args.name);
          result.setSuccessIsSet(true);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        } catch (org.phybros.thrift.EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    private static class setGameMode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setGameMode_args> {
      public setGameMode() {
        super("setGameMode");
      }

      protected setGameMode_args getEmptyArgsInstance() {
        return new setGameMode_args();
      }

      protected setGameMode_result getResult(I iface, setGameMode_args args) throws org.apache.thrift.TException {
        setGameMode_result result = new setGameMode_result();
        try {
          result.success = iface.setGameMode(args.authString, args.name, args.mode);
          result.setSuccessIsSet(true);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        } catch (org.phybros.thrift.EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    private static class unBan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unBan_args> {
      public unBan() {
        super("unBan");
      }

      protected unBan_args getEmptyArgsInstance() {
        return new unBan_args();
      }

      protected unBan_result getResult(I iface, unBan_args args) throws org.apache.thrift.TException {
        unBan_result result = new unBan_result();
        try {
          result.success = iface.unBan(args.authString, args.name);
          result.setSuccessIsSet(true);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        } catch (org.phybros.thrift.EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

    private static class unBanIp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unBanIp_args> {
      public unBanIp() {
        super("unBanIp");
      }

      protected unBanIp_args getEmptyArgsInstance() {
        return new unBanIp_args();
      }

      protected unBanIp_result getResult(I iface, unBanIp_args args) throws org.apache.thrift.TException {
        unBanIp_result result = new unBanIp_result();
        try {
          result.success = iface.unBanIp(args.authString, args.ip);
          result.setSuccessIsSet(true);
        } catch (org.phybros.thrift.EAuthException aex) {
          result.aex = aex;
        } catch (org.phybros.thrift.EDataException dex) {
          result.dex = dex;
        }
        return result;
      }
    }

  }

  public static class addToWhitelist_args implements org.apache.thrift.TBase<addToWhitelist_args, addToWhitelist_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToWhitelist_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addToWhitelist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addToWhitelist_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToWhitelist_args.class, metaDataMap);
    }

    public addToWhitelist_args() {
    }

    public addToWhitelist_args(
      String authString,
      String name)
    {
      this();
      this.authString = authString;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToWhitelist_args(addToWhitelist_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public addToWhitelist_args deepCopy() {
      return new addToWhitelist_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public addToWhitelist_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public addToWhitelist_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addToWhitelist_args)
        return this.equals((addToWhitelist_args)that);
      return false;
    }

    public boolean equals(addToWhitelist_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addToWhitelist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addToWhitelist_args typedOther = (addToWhitelist_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addToWhitelist_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToWhitelist_argsStandardSchemeFactory implements SchemeFactory {
      public addToWhitelist_argsStandardScheme getScheme() {
        return new addToWhitelist_argsStandardScheme();
      }
    }

    private static class addToWhitelist_argsStandardScheme extends StandardScheme<addToWhitelist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToWhitelist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToWhitelist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToWhitelist_argsTupleSchemeFactory implements SchemeFactory {
      public addToWhitelist_argsTupleScheme getScheme() {
        return new addToWhitelist_argsTupleScheme();
      }
    }

    private static class addToWhitelist_argsTupleScheme extends TupleScheme<addToWhitelist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToWhitelist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToWhitelist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class addToWhitelist_result implements org.apache.thrift.TBase<addToWhitelist_result, addToWhitelist_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToWhitelist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addToWhitelist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addToWhitelist_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.phybros.thrift.EAuthException aex; // required
    public org.phybros.thrift.EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToWhitelist_result.class, metaDataMap);
    }

    public addToWhitelist_result() {
    }

    public addToWhitelist_result(
      boolean success,
      org.phybros.thrift.EAuthException aex,
      org.phybros.thrift.EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToWhitelist_result(addToWhitelist_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new org.phybros.thrift.EDataException(other.dex);
      }
    }

    public addToWhitelist_result deepCopy() {
      return new addToWhitelist_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addToWhitelist_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public addToWhitelist_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public org.phybros.thrift.EDataException getDex() {
      return this.dex;
    }

    public addToWhitelist_result setDex(org.phybros.thrift.EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((org.phybros.thrift.EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addToWhitelist_result)
        return this.equals((addToWhitelist_result)that);
      return false;
    }

    public boolean equals(addToWhitelist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addToWhitelist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addToWhitelist_result typedOther = (addToWhitelist_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(typedOther.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, typedOther.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addToWhitelist_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToWhitelist_resultStandardSchemeFactory implements SchemeFactory {
      public addToWhitelist_resultStandardScheme getScheme() {
        return new addToWhitelist_resultStandardScheme();
      }
    }

    private static class addToWhitelist_resultStandardScheme extends StandardScheme<addToWhitelist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToWhitelist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new org.phybros.thrift.EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToWhitelist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToWhitelist_resultTupleSchemeFactory implements SchemeFactory {
      public addToWhitelist_resultTupleScheme getScheme() {
        return new addToWhitelist_resultTupleScheme();
      }
    }

    private static class addToWhitelist_resultTupleScheme extends TupleScheme<addToWhitelist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToWhitelist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToWhitelist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new org.phybros.thrift.EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class ban_args implements org.apache.thrift.TBase<ban_args, ban_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ban_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ban_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ban_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ban_args.class, metaDataMap);
    }

    public ban_args() {
    }

    public ban_args(
      String authString,
      String name)
    {
      this();
      this.authString = authString;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ban_args(ban_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public ban_args deepCopy() {
      return new ban_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public ban_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public ban_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ban_args)
        return this.equals((ban_args)that);
      return false;
    }

    public boolean equals(ban_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ban_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ban_args typedOther = (ban_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ban_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ban_argsStandardSchemeFactory implements SchemeFactory {
      public ban_argsStandardScheme getScheme() {
        return new ban_argsStandardScheme();
      }
    }

    private static class ban_argsStandardScheme extends StandardScheme<ban_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ban_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ban_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ban_argsTupleSchemeFactory implements SchemeFactory {
      public ban_argsTupleScheme getScheme() {
        return new ban_argsTupleScheme();
      }
    }

    private static class ban_argsTupleScheme extends TupleScheme<ban_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ban_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ban_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class ban_result implements org.apache.thrift.TBase<ban_result, ban_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ban_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ban_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ban_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.phybros.thrift.EAuthException aex; // required
    public org.phybros.thrift.EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ban_result.class, metaDataMap);
    }

    public ban_result() {
    }

    public ban_result(
      boolean success,
      org.phybros.thrift.EAuthException aex,
      org.phybros.thrift.EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ban_result(ban_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new org.phybros.thrift.EDataException(other.dex);
      }
    }

    public ban_result deepCopy() {
      return new ban_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ban_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public ban_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public org.phybros.thrift.EDataException getDex() {
      return this.dex;
    }

    public ban_result setDex(org.phybros.thrift.EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((org.phybros.thrift.EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ban_result)
        return this.equals((ban_result)that);
      return false;
    }

    public boolean equals(ban_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ban_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ban_result typedOther = (ban_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(typedOther.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, typedOther.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ban_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ban_resultStandardSchemeFactory implements SchemeFactory {
      public ban_resultStandardScheme getScheme() {
        return new ban_resultStandardScheme();
      }
    }

    private static class ban_resultStandardScheme extends StandardScheme<ban_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ban_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new org.phybros.thrift.EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ban_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ban_resultTupleSchemeFactory implements SchemeFactory {
      public ban_resultTupleScheme getScheme() {
        return new ban_resultTupleScheme();
      }
    }

    private static class ban_resultTupleScheme extends TupleScheme<ban_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ban_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ban_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new org.phybros.thrift.EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class banIp_args implements org.apache.thrift.TBase<banIp_args, banIp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("banIp_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new banIp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new banIp_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String ip; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      IP((short)2, "ip");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // IP
            return IP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(banIp_args.class, metaDataMap);
    }

    public banIp_args() {
    }

    public banIp_args(
      String authString,
      String ip)
    {
      this();
      this.authString = authString;
      this.ip = ip;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public banIp_args(banIp_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
    }

    public banIp_args deepCopy() {
      return new banIp_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.ip = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public banIp_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getIp() {
      return this.ip;
    }

    public banIp_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case IP:
        return getIp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case IP:
        return isSetIp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof banIp_args)
        return this.equals((banIp_args)that);
      return false;
    }

    public boolean equals(banIp_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(banIp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      banIp_args typedOther = (banIp_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("banIp_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class banIp_argsStandardSchemeFactory implements SchemeFactory {
      public banIp_argsStandardScheme getScheme() {
        return new banIp_argsStandardScheme();
      }
    }

    private static class banIp_argsStandardScheme extends StandardScheme<banIp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, banIp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, banIp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class banIp_argsTupleSchemeFactory implements SchemeFactory {
      public banIp_argsTupleScheme getScheme() {
        return new banIp_argsTupleScheme();
      }
    }

    private static class banIp_argsTupleScheme extends TupleScheme<banIp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, banIp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetIp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, banIp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
      }
    }

  }

  public static class banIp_result implements org.apache.thrift.TBase<banIp_result, banIp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("banIp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new banIp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new banIp_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.phybros.thrift.EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(banIp_result.class, metaDataMap);
    }

    public banIp_result() {
    }

    public banIp_result(
      boolean success,
      org.phybros.thrift.EAuthException aex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public banIp_result(banIp_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
    }

    public banIp_result deepCopy() {
      return new banIp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public banIp_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public banIp_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof banIp_result)
        return this.equals((banIp_result)that);
      return false;
    }

    public boolean equals(banIp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(banIp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      banIp_result typedOther = (banIp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("banIp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class banIp_resultStandardSchemeFactory implements SchemeFactory {
      public banIp_resultStandardScheme getScheme() {
        return new banIp_resultStandardScheme();
      }
    }

    private static class banIp_resultStandardScheme extends StandardScheme<banIp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, banIp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, banIp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class banIp_resultTupleSchemeFactory implements SchemeFactory {
      public banIp_resultTupleScheme getScheme() {
        return new banIp_resultTupleScheme();
      }
    }

    private static class banIp_resultTupleScheme extends TupleScheme<banIp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, banIp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, banIp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class deOp_args implements org.apache.thrift.TBase<deOp_args, deOp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deOp_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NOTIFY_PLAYER_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyPlayer", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deOp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deOp_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required
    public boolean notifyPlayer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name"),
      NOTIFY_PLAYER((short)3, "notifyPlayer");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          case 3: // NOTIFY_PLAYER
            return NOTIFY_PLAYER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOTIFYPLAYER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NOTIFY_PLAYER, new org.apache.thrift.meta_data.FieldMetaData("notifyPlayer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deOp_args.class, metaDataMap);
    }

    public deOp_args() {
    }

    public deOp_args(
      String authString,
      String name,
      boolean notifyPlayer)
    {
      this();
      this.authString = authString;
      this.name = name;
      this.notifyPlayer = notifyPlayer;
      setNotifyPlayerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deOp_args(deOp_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      this.notifyPlayer = other.notifyPlayer;
    }

    public deOp_args deepCopy() {
      return new deOp_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
      setNotifyPlayerIsSet(false);
      this.notifyPlayer = false;
    }

    public String getAuthString() {
      return this.authString;
    }

    public deOp_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public deOp_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public boolean isNotifyPlayer() {
      return this.notifyPlayer;
    }

    public deOp_args setNotifyPlayer(boolean notifyPlayer) {
      this.notifyPlayer = notifyPlayer;
      setNotifyPlayerIsSet(true);
      return this;
    }

    public void unsetNotifyPlayer() {
      __isset_bit_vector.clear(__NOTIFYPLAYER_ISSET_ID);
    }

    /** Returns true if field notifyPlayer is set (has been assigned a value) and false otherwise */
    public boolean isSetNotifyPlayer() {
      return __isset_bit_vector.get(__NOTIFYPLAYER_ISSET_ID);
    }

    public void setNotifyPlayerIsSet(boolean value) {
      __isset_bit_vector.set(__NOTIFYPLAYER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case NOTIFY_PLAYER:
        if (value == null) {
          unsetNotifyPlayer();
        } else {
          setNotifyPlayer((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      case NOTIFY_PLAYER:
        return Boolean.valueOf(isNotifyPlayer());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      case NOTIFY_PLAYER:
        return isSetNotifyPlayer();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deOp_args)
        return this.equals((deOp_args)that);
      return false;
    }

    public boolean equals(deOp_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_notifyPlayer = true;
      boolean that_present_notifyPlayer = true;
      if (this_present_notifyPlayer || that_present_notifyPlayer) {
        if (!(this_present_notifyPlayer && that_present_notifyPlayer))
          return false;
        if (this.notifyPlayer != that.notifyPlayer)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deOp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deOp_args typedOther = (deOp_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotifyPlayer()).compareTo(typedOther.isSetNotifyPlayer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotifyPlayer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyPlayer, typedOther.notifyPlayer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deOp_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notifyPlayer:");
      sb.append(this.notifyPlayer);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deOp_argsStandardSchemeFactory implements SchemeFactory {
      public deOp_argsStandardScheme getScheme() {
        return new deOp_argsStandardScheme();
      }
    }

    private static class deOp_argsStandardScheme extends StandardScheme<deOp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deOp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOTIFY_PLAYER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.notifyPlayer = iprot.readBool();
                struct.setNotifyPlayerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deOp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NOTIFY_PLAYER_FIELD_DESC);
        oprot.writeBool(struct.notifyPlayer);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deOp_argsTupleSchemeFactory implements SchemeFactory {
      public deOp_argsTupleScheme getScheme() {
        return new deOp_argsTupleScheme();
      }
    }

    private static class deOp_argsTupleScheme extends TupleScheme<deOp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deOp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetNotifyPlayer()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetNotifyPlayer()) {
          oprot.writeBool(struct.notifyPlayer);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deOp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.notifyPlayer = iprot.readBool();
          struct.setNotifyPlayerIsSet(true);
        }
      }
    }

  }

  public static class deOp_result implements org.apache.thrift.TBase<deOp_result, deOp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deOp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deOp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deOp_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.phybros.thrift.EAuthException aex; // required
    public org.phybros.thrift.EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deOp_result.class, metaDataMap);
    }

    public deOp_result() {
    }

    public deOp_result(
      boolean success,
      org.phybros.thrift.EAuthException aex,
      org.phybros.thrift.EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deOp_result(deOp_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new org.phybros.thrift.EDataException(other.dex);
      }
    }

    public deOp_result deepCopy() {
      return new deOp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deOp_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public deOp_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public org.phybros.thrift.EDataException getDex() {
      return this.dex;
    }

    public deOp_result setDex(org.phybros.thrift.EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((org.phybros.thrift.EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deOp_result)
        return this.equals((deOp_result)that);
      return false;
    }

    public boolean equals(deOp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deOp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deOp_result typedOther = (deOp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(typedOther.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, typedOther.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deOp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deOp_resultStandardSchemeFactory implements SchemeFactory {
      public deOp_resultStandardScheme getScheme() {
        return new deOp_resultStandardScheme();
      }
    }

    private static class deOp_resultStandardScheme extends StandardScheme<deOp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deOp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new org.phybros.thrift.EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deOp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deOp_resultTupleSchemeFactory implements SchemeFactory {
      public deOp_resultTupleScheme getScheme() {
        return new deOp_resultTupleScheme();
      }
    }

    private static class deOp_resultTupleScheme extends TupleScheme<deOp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deOp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deOp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new org.phybros.thrift.EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class getBukkitVersion_args implements org.apache.thrift.TBase<getBukkitVersion_args, getBukkitVersion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBukkitVersion_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBukkitVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBukkitVersion_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBukkitVersion_args.class, metaDataMap);
    }

    public getBukkitVersion_args() {
    }

    public getBukkitVersion_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBukkitVersion_args(getBukkitVersion_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getBukkitVersion_args deepCopy() {
      return new getBukkitVersion_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getBukkitVersion_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBukkitVersion_args)
        return this.equals((getBukkitVersion_args)that);
      return false;
    }

    public boolean equals(getBukkitVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBukkitVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBukkitVersion_args typedOther = (getBukkitVersion_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBukkitVersion_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBukkitVersion_argsStandardSchemeFactory implements SchemeFactory {
      public getBukkitVersion_argsStandardScheme getScheme() {
        return new getBukkitVersion_argsStandardScheme();
      }
    }

    private static class getBukkitVersion_argsStandardScheme extends StandardScheme<getBukkitVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBukkitVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBukkitVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBukkitVersion_argsTupleSchemeFactory implements SchemeFactory {
      public getBukkitVersion_argsTupleScheme getScheme() {
        return new getBukkitVersion_argsTupleScheme();
      }
    }

    private static class getBukkitVersion_argsTupleScheme extends TupleScheme<getBukkitVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBukkitVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBukkitVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getBukkitVersion_result implements org.apache.thrift.TBase<getBukkitVersion_result, getBukkitVersion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBukkitVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBukkitVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBukkitVersion_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.phybros.thrift.EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBukkitVersion_result.class, metaDataMap);
    }

    public getBukkitVersion_result() {
    }

    public getBukkitVersion_result(
      String success,
      org.phybros.thrift.EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBukkitVersion_result(getBukkitVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
    }

    public getBukkitVersion_result deepCopy() {
      return new getBukkitVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getBukkitVersion_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public getBukkitVersion_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBukkitVersion_result)
        return this.equals((getBukkitVersion_result)that);
      return false;
    }

    public boolean equals(getBukkitVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBukkitVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBukkitVersion_result typedOther = (getBukkitVersion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBukkitVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBukkitVersion_resultStandardSchemeFactory implements SchemeFactory {
      public getBukkitVersion_resultStandardScheme getScheme() {
        return new getBukkitVersion_resultStandardScheme();
      }
    }

    private static class getBukkitVersion_resultStandardScheme extends StandardScheme<getBukkitVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBukkitVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBukkitVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBukkitVersion_resultTupleSchemeFactory implements SchemeFactory {
      public getBukkitVersion_resultTupleScheme getScheme() {
        return new getBukkitVersion_resultTupleScheme();
      }
    }

    private static class getBukkitVersion_resultTupleScheme extends TupleScheme<getBukkitVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBukkitVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBukkitVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class getOfflinePlayer_args implements org.apache.thrift.TBase<getOfflinePlayer_args, getOfflinePlayer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOfflinePlayer_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOfflinePlayer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOfflinePlayer_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOfflinePlayer_args.class, metaDataMap);
    }

    public getOfflinePlayer_args() {
    }

    public getOfflinePlayer_args(
      String authString,
      String name)
    {
      this();
      this.authString = authString;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOfflinePlayer_args(getOfflinePlayer_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getOfflinePlayer_args deepCopy() {
      return new getOfflinePlayer_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getOfflinePlayer_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public getOfflinePlayer_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOfflinePlayer_args)
        return this.equals((getOfflinePlayer_args)that);
      return false;
    }

    public boolean equals(getOfflinePlayer_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOfflinePlayer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOfflinePlayer_args typedOther = (getOfflinePlayer_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOfflinePlayer_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOfflinePlayer_argsStandardSchemeFactory implements SchemeFactory {
      public getOfflinePlayer_argsStandardScheme getScheme() {
        return new getOfflinePlayer_argsStandardScheme();
      }
    }

    private static class getOfflinePlayer_argsStandardScheme extends StandardScheme<getOfflinePlayer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOfflinePlayer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOfflinePlayer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOfflinePlayer_argsTupleSchemeFactory implements SchemeFactory {
      public getOfflinePlayer_argsTupleScheme getScheme() {
        return new getOfflinePlayer_argsTupleScheme();
      }
    }

    private static class getOfflinePlayer_argsTupleScheme extends TupleScheme<getOfflinePlayer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOfflinePlayer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOfflinePlayer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class getOfflinePlayer_result implements org.apache.thrift.TBase<getOfflinePlayer_result, getOfflinePlayer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOfflinePlayer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOfflinePlayer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOfflinePlayer_resultTupleSchemeFactory());
    }

    public OfflinePlayer success; // required
    public org.phybros.thrift.EAuthException aex; // required
    public org.phybros.thrift.EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OfflinePlayer.class)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOfflinePlayer_result.class, metaDataMap);
    }

    public getOfflinePlayer_result() {
    }

    public getOfflinePlayer_result(
      OfflinePlayer success,
      org.phybros.thrift.EAuthException aex,
      org.phybros.thrift.EDataException dex)
    {
      this();
      this.success = success;
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOfflinePlayer_result(getOfflinePlayer_result other) {
      if (other.isSetSuccess()) {
        this.success = new OfflinePlayer(other.success);
      }
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new org.phybros.thrift.EDataException(other.dex);
      }
    }

    public getOfflinePlayer_result deepCopy() {
      return new getOfflinePlayer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
      this.dex = null;
    }

    public OfflinePlayer getSuccess() {
      return this.success;
    }

    public getOfflinePlayer_result setSuccess(OfflinePlayer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public getOfflinePlayer_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public org.phybros.thrift.EDataException getDex() {
      return this.dex;
    }

    public getOfflinePlayer_result setDex(org.phybros.thrift.EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OfflinePlayer)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((org.phybros.thrift.EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOfflinePlayer_result)
        return this.equals((getOfflinePlayer_result)that);
      return false;
    }

    public boolean equals(getOfflinePlayer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOfflinePlayer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOfflinePlayer_result typedOther = (getOfflinePlayer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(typedOther.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, typedOther.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOfflinePlayer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOfflinePlayer_resultStandardSchemeFactory implements SchemeFactory {
      public getOfflinePlayer_resultStandardScheme getScheme() {
        return new getOfflinePlayer_resultStandardScheme();
      }
    }

    private static class getOfflinePlayer_resultStandardScheme extends StandardScheme<getOfflinePlayer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOfflinePlayer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OfflinePlayer();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new org.phybros.thrift.EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOfflinePlayer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOfflinePlayer_resultTupleSchemeFactory implements SchemeFactory {
      public getOfflinePlayer_resultTupleScheme getScheme() {
        return new getOfflinePlayer_resultTupleScheme();
      }
    }

    private static class getOfflinePlayer_resultTupleScheme extends TupleScheme<getOfflinePlayer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOfflinePlayer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOfflinePlayer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new OfflinePlayer();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new org.phybros.thrift.EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class getOfflinePlayers_args implements org.apache.thrift.TBase<getOfflinePlayers_args, getOfflinePlayers_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOfflinePlayers_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOfflinePlayers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOfflinePlayers_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOfflinePlayers_args.class, metaDataMap);
    }

    public getOfflinePlayers_args() {
    }

    public getOfflinePlayers_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOfflinePlayers_args(getOfflinePlayers_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getOfflinePlayers_args deepCopy() {
      return new getOfflinePlayers_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getOfflinePlayers_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOfflinePlayers_args)
        return this.equals((getOfflinePlayers_args)that);
      return false;
    }

    public boolean equals(getOfflinePlayers_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOfflinePlayers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOfflinePlayers_args typedOther = (getOfflinePlayers_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOfflinePlayers_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOfflinePlayers_argsStandardSchemeFactory implements SchemeFactory {
      public getOfflinePlayers_argsStandardScheme getScheme() {
        return new getOfflinePlayers_argsStandardScheme();
      }
    }

    private static class getOfflinePlayers_argsStandardScheme extends StandardScheme<getOfflinePlayers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOfflinePlayers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOfflinePlayers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOfflinePlayers_argsTupleSchemeFactory implements SchemeFactory {
      public getOfflinePlayers_argsTupleScheme getScheme() {
        return new getOfflinePlayers_argsTupleScheme();
      }
    }

    private static class getOfflinePlayers_argsTupleScheme extends TupleScheme<getOfflinePlayers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOfflinePlayers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOfflinePlayers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getOfflinePlayers_result implements org.apache.thrift.TBase<getOfflinePlayers_result, getOfflinePlayers_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOfflinePlayers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOfflinePlayers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOfflinePlayers_resultTupleSchemeFactory());
    }

    public List<OfflinePlayer> success; // required
    public org.phybros.thrift.EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OfflinePlayer.class))));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOfflinePlayers_result.class, metaDataMap);
    }

    public getOfflinePlayers_result() {
    }

    public getOfflinePlayers_result(
      List<OfflinePlayer> success,
      org.phybros.thrift.EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOfflinePlayers_result(getOfflinePlayers_result other) {
      if (other.isSetSuccess()) {
        List<OfflinePlayer> __this__success = new ArrayList<OfflinePlayer>();
        for (OfflinePlayer other_element : other.success) {
          __this__success.add(new OfflinePlayer(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
    }

    public getOfflinePlayers_result deepCopy() {
      return new getOfflinePlayers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<OfflinePlayer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(OfflinePlayer elem) {
      if (this.success == null) {
        this.success = new ArrayList<OfflinePlayer>();
      }
      this.success.add(elem);
    }

    public List<OfflinePlayer> getSuccess() {
      return this.success;
    }

    public getOfflinePlayers_result setSuccess(List<OfflinePlayer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public getOfflinePlayers_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<OfflinePlayer>)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOfflinePlayers_result)
        return this.equals((getOfflinePlayers_result)that);
      return false;
    }

    public boolean equals(getOfflinePlayers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOfflinePlayers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOfflinePlayers_result typedOther = (getOfflinePlayers_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOfflinePlayers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOfflinePlayers_resultStandardSchemeFactory implements SchemeFactory {
      public getOfflinePlayers_resultStandardScheme getScheme() {
        return new getOfflinePlayers_resultStandardScheme();
      }
    }

    private static class getOfflinePlayers_resultStandardScheme extends StandardScheme<getOfflinePlayers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOfflinePlayers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.success = new ArrayList<OfflinePlayer>(_list74.size);
                  for (int _i75 = 0; _i75 < _list74.size; ++_i75)
                  {
                    OfflinePlayer _elem76; // required
                    _elem76 = new OfflinePlayer();
                    _elem76.read(iprot);
                    struct.success.add(_elem76);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOfflinePlayers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (OfflinePlayer _iter77 : struct.success)
            {
              _iter77.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOfflinePlayers_resultTupleSchemeFactory implements SchemeFactory {
      public getOfflinePlayers_resultTupleScheme getScheme() {
        return new getOfflinePlayers_resultTupleScheme();
      }
    }

    private static class getOfflinePlayers_resultTupleScheme extends TupleScheme<getOfflinePlayers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOfflinePlayers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (OfflinePlayer _iter78 : struct.success)
            {
              _iter78.write(oprot);
            }
          }
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOfflinePlayers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<OfflinePlayer>(_list79.size);
            for (int _i80 = 0; _i80 < _list79.size; ++_i80)
            {
              OfflinePlayer _elem81; // required
              _elem81 = new OfflinePlayer();
              _elem81.read(iprot);
              struct.success.add(_elem81);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class getPlayer_args implements org.apache.thrift.TBase<getPlayer_args, getPlayer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlayer_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlayer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlayer_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlayer_args.class, metaDataMap);
    }

    public getPlayer_args() {
    }

    public getPlayer_args(
      String authString,
      String name)
    {
      this();
      this.authString = authString;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlayer_args(getPlayer_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getPlayer_args deepCopy() {
      return new getPlayer_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getPlayer_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public getPlayer_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlayer_args)
        return this.equals((getPlayer_args)that);
      return false;
    }

    public boolean equals(getPlayer_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPlayer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPlayer_args typedOther = (getPlayer_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlayer_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlayer_argsStandardSchemeFactory implements SchemeFactory {
      public getPlayer_argsStandardScheme getScheme() {
        return new getPlayer_argsStandardScheme();
      }
    }

    private static class getPlayer_argsStandardScheme extends StandardScheme<getPlayer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlayer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlayer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlayer_argsTupleSchemeFactory implements SchemeFactory {
      public getPlayer_argsTupleScheme getScheme() {
        return new getPlayer_argsTupleScheme();
      }
    }

    private static class getPlayer_argsTupleScheme extends TupleScheme<getPlayer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlayer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlayer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class getPlayer_result implements org.apache.thrift.TBase<getPlayer_result, getPlayer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlayer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlayer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlayer_resultTupleSchemeFactory());
    }

    public Player success; // required
    public org.phybros.thrift.EAuthException aex; // required
    public org.phybros.thrift.EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Player.class)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlayer_result.class, metaDataMap);
    }

    public getPlayer_result() {
    }

    public getPlayer_result(
      Player success,
      org.phybros.thrift.EAuthException aex,
      org.phybros.thrift.EDataException dex)
    {
      this();
      this.success = success;
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlayer_result(getPlayer_result other) {
      if (other.isSetSuccess()) {
        this.success = new Player(other.success);
      }
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new org.phybros.thrift.EDataException(other.dex);
      }
    }

    public getPlayer_result deepCopy() {
      return new getPlayer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
      this.dex = null;
    }

    public Player getSuccess() {
      return this.success;
    }

    public getPlayer_result setSuccess(Player success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public getPlayer_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public org.phybros.thrift.EDataException getDex() {
      return this.dex;
    }

    public getPlayer_result setDex(org.phybros.thrift.EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Player)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((org.phybros.thrift.EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlayer_result)
        return this.equals((getPlayer_result)that);
      return false;
    }

    public boolean equals(getPlayer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPlayer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPlayer_result typedOther = (getPlayer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(typedOther.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, typedOther.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlayer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlayer_resultStandardSchemeFactory implements SchemeFactory {
      public getPlayer_resultStandardScheme getScheme() {
        return new getPlayer_resultStandardScheme();
      }
    }

    private static class getPlayer_resultStandardScheme extends StandardScheme<getPlayer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlayer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Player();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new org.phybros.thrift.EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlayer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlayer_resultTupleSchemeFactory implements SchemeFactory {
      public getPlayer_resultTupleScheme getScheme() {
        return new getPlayer_resultTupleScheme();
      }
    }

    private static class getPlayer_resultTupleScheme extends TupleScheme<getPlayer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlayer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlayer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new Player();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new org.phybros.thrift.EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class getPlayers_args implements org.apache.thrift.TBase<getPlayers_args, getPlayers_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlayers_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlayers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlayers_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlayers_args.class, metaDataMap);
    }

    public getPlayers_args() {
    }

    public getPlayers_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlayers_args(getPlayers_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getPlayers_args deepCopy() {
      return new getPlayers_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getPlayers_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlayers_args)
        return this.equals((getPlayers_args)that);
      return false;
    }

    public boolean equals(getPlayers_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPlayers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPlayers_args typedOther = (getPlayers_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlayers_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlayers_argsStandardSchemeFactory implements SchemeFactory {
      public getPlayers_argsStandardScheme getScheme() {
        return new getPlayers_argsStandardScheme();
      }
    }

    private static class getPlayers_argsStandardScheme extends StandardScheme<getPlayers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlayers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlayers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlayers_argsTupleSchemeFactory implements SchemeFactory {
      public getPlayers_argsTupleScheme getScheme() {
        return new getPlayers_argsTupleScheme();
      }
    }

    private static class getPlayers_argsTupleScheme extends TupleScheme<getPlayers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlayers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlayers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getPlayers_result implements org.apache.thrift.TBase<getPlayers_result, getPlayers_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlayers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlayers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlayers_resultTupleSchemeFactory());
    }

    public List<Player> success; // required
    public org.phybros.thrift.EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Player.class))));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlayers_result.class, metaDataMap);
    }

    public getPlayers_result() {
    }

    public getPlayers_result(
      List<Player> success,
      org.phybros.thrift.EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlayers_result(getPlayers_result other) {
      if (other.isSetSuccess()) {
        List<Player> __this__success = new ArrayList<Player>();
        for (Player other_element : other.success) {
          __this__success.add(new Player(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
    }

    public getPlayers_result deepCopy() {
      return new getPlayers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Player> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Player elem) {
      if (this.success == null) {
        this.success = new ArrayList<Player>();
      }
      this.success.add(elem);
    }

    public List<Player> getSuccess() {
      return this.success;
    }

    public getPlayers_result setSuccess(List<Player> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public getPlayers_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Player>)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlayers_result)
        return this.equals((getPlayers_result)that);
      return false;
    }

    public boolean equals(getPlayers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPlayers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPlayers_result typedOther = (getPlayers_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlayers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlayers_resultStandardSchemeFactory implements SchemeFactory {
      public getPlayers_resultStandardScheme getScheme() {
        return new getPlayers_resultStandardScheme();
      }
    }

    private static class getPlayers_resultStandardScheme extends StandardScheme<getPlayers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlayers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.success = new ArrayList<Player>(_list82.size);
                  for (int _i83 = 0; _i83 < _list82.size; ++_i83)
                  {
                    Player _elem84; // required
                    _elem84 = new Player();
                    _elem84.read(iprot);
                    struct.success.add(_elem84);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlayers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Player _iter85 : struct.success)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlayers_resultTupleSchemeFactory implements SchemeFactory {
      public getPlayers_resultTupleScheme getScheme() {
        return new getPlayers_resultTupleScheme();
      }
    }

    private static class getPlayers_resultTupleScheme extends TupleScheme<getPlayers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlayers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Player _iter86 : struct.success)
            {
              _iter86.write(oprot);
            }
          }
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlayers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Player>(_list87.size);
            for (int _i88 = 0; _i88 < _list87.size; ++_i88)
            {
              Player _elem89; // required
              _elem89 = new Player();
              _elem89.read(iprot);
              struct.success.add(_elem89);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class getPlugin_args implements org.apache.thrift.TBase<getPlugin_args, getPlugin_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlugin_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlugin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlugin_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlugin_args.class, metaDataMap);
    }

    public getPlugin_args() {
    }

    public getPlugin_args(
      String authString,
      String name)
    {
      this();
      this.authString = authString;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlugin_args(getPlugin_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getPlugin_args deepCopy() {
      return new getPlugin_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getPlugin_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public getPlugin_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlugin_args)
        return this.equals((getPlugin_args)that);
      return false;
    }

    public boolean equals(getPlugin_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPlugin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPlugin_args typedOther = (getPlugin_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlugin_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlugin_argsStandardSchemeFactory implements SchemeFactory {
      public getPlugin_argsStandardScheme getScheme() {
        return new getPlugin_argsStandardScheme();
      }
    }

    private static class getPlugin_argsStandardScheme extends StandardScheme<getPlugin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlugin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlugin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlugin_argsTupleSchemeFactory implements SchemeFactory {
      public getPlugin_argsTupleScheme getScheme() {
        return new getPlugin_argsTupleScheme();
      }
    }

    private static class getPlugin_argsTupleScheme extends TupleScheme<getPlugin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlugin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlugin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class getPlugin_result implements org.apache.thrift.TBase<getPlugin_result, getPlugin_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlugin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlugin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlugin_resultTupleSchemeFactory());
    }

    public Plugin success; // required
    public org.phybros.thrift.EAuthException aex; // required
    public org.phybros.thrift.EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Plugin.class)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlugin_result.class, metaDataMap);
    }

    public getPlugin_result() {
    }

    public getPlugin_result(
      Plugin success,
      org.phybros.thrift.EAuthException aex,
      org.phybros.thrift.EDataException dex)
    {
      this();
      this.success = success;
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlugin_result(getPlugin_result other) {
      if (other.isSetSuccess()) {
        this.success = new Plugin(other.success);
      }
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new org.phybros.thrift.EDataException(other.dex);
      }
    }

    public getPlugin_result deepCopy() {
      return new getPlugin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
      this.dex = null;
    }

    public Plugin getSuccess() {
      return this.success;
    }

    public getPlugin_result setSuccess(Plugin success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public getPlugin_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public org.phybros.thrift.EDataException getDex() {
      return this.dex;
    }

    public getPlugin_result setDex(org.phybros.thrift.EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Plugin)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((org.phybros.thrift.EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlugin_result)
        return this.equals((getPlugin_result)that);
      return false;
    }

    public boolean equals(getPlugin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPlugin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPlugin_result typedOther = (getPlugin_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(typedOther.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, typedOther.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlugin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlugin_resultStandardSchemeFactory implements SchemeFactory {
      public getPlugin_resultStandardScheme getScheme() {
        return new getPlugin_resultStandardScheme();
      }
    }

    private static class getPlugin_resultStandardScheme extends StandardScheme<getPlugin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlugin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Plugin();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new org.phybros.thrift.EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlugin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlugin_resultTupleSchemeFactory implements SchemeFactory {
      public getPlugin_resultTupleScheme getScheme() {
        return new getPlugin_resultTupleScheme();
      }
    }

    private static class getPlugin_resultTupleScheme extends TupleScheme<getPlugin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlugin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlugin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new Plugin();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new org.phybros.thrift.EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class getPlugins_args implements org.apache.thrift.TBase<getPlugins_args, getPlugins_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlugins_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlugins_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlugins_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlugins_args.class, metaDataMap);
    }

    public getPlugins_args() {
    }

    public getPlugins_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlugins_args(getPlugins_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getPlugins_args deepCopy() {
      return new getPlugins_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getPlugins_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlugins_args)
        return this.equals((getPlugins_args)that);
      return false;
    }

    public boolean equals(getPlugins_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPlugins_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPlugins_args typedOther = (getPlugins_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlugins_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlugins_argsStandardSchemeFactory implements SchemeFactory {
      public getPlugins_argsStandardScheme getScheme() {
        return new getPlugins_argsStandardScheme();
      }
    }

    private static class getPlugins_argsStandardScheme extends StandardScheme<getPlugins_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlugins_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlugins_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlugins_argsTupleSchemeFactory implements SchemeFactory {
      public getPlugins_argsTupleScheme getScheme() {
        return new getPlugins_argsTupleScheme();
      }
    }

    private static class getPlugins_argsTupleScheme extends TupleScheme<getPlugins_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlugins_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlugins_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getPlugins_result implements org.apache.thrift.TBase<getPlugins_result, getPlugins_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlugins_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlugins_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlugins_resultTupleSchemeFactory());
    }

    public List<Plugin> success; // required
    public org.phybros.thrift.EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Plugin.class))));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlugins_result.class, metaDataMap);
    }

    public getPlugins_result() {
    }

    public getPlugins_result(
      List<Plugin> success,
      org.phybros.thrift.EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlugins_result(getPlugins_result other) {
      if (other.isSetSuccess()) {
        List<Plugin> __this__success = new ArrayList<Plugin>();
        for (Plugin other_element : other.success) {
          __this__success.add(new Plugin(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
    }

    public getPlugins_result deepCopy() {
      return new getPlugins_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Plugin> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Plugin elem) {
      if (this.success == null) {
        this.success = new ArrayList<Plugin>();
      }
      this.success.add(elem);
    }

    public List<Plugin> getSuccess() {
      return this.success;
    }

    public getPlugins_result setSuccess(List<Plugin> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public getPlugins_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Plugin>)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlugins_result)
        return this.equals((getPlugins_result)that);
      return false;
    }

    public boolean equals(getPlugins_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPlugins_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPlugins_result typedOther = (getPlugins_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlugins_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlugins_resultStandardSchemeFactory implements SchemeFactory {
      public getPlugins_resultStandardScheme getScheme() {
        return new getPlugins_resultStandardScheme();
      }
    }

    private static class getPlugins_resultStandardScheme extends StandardScheme<getPlugins_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlugins_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                  struct.success = new ArrayList<Plugin>(_list90.size);
                  for (int _i91 = 0; _i91 < _list90.size; ++_i91)
                  {
                    Plugin _elem92; // required
                    _elem92 = new Plugin();
                    _elem92.read(iprot);
                    struct.success.add(_elem92);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlugins_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Plugin _iter93 : struct.success)
            {
              _iter93.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlugins_resultTupleSchemeFactory implements SchemeFactory {
      public getPlugins_resultTupleScheme getScheme() {
        return new getPlugins_resultTupleScheme();
      }
    }

    private static class getPlugins_resultTupleScheme extends TupleScheme<getPlugins_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlugins_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Plugin _iter94 : struct.success)
            {
              _iter94.write(oprot);
            }
          }
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlugins_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Plugin>(_list95.size);
            for (int _i96 = 0; _i96 < _list95.size; ++_i96)
            {
              Plugin _elem97; // required
              _elem97 = new Plugin();
              _elem97.read(iprot);
              struct.success.add(_elem97);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class getServer_args implements org.apache.thrift.TBase<getServer_args, getServer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServer_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServer_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServer_args.class, metaDataMap);
    }

    public getServer_args() {
    }

    public getServer_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServer_args(getServer_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getServer_args deepCopy() {
      return new getServer_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getServer_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServer_args)
        return this.equals((getServer_args)that);
      return false;
    }

    public boolean equals(getServer_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getServer_args typedOther = (getServer_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServer_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServer_argsStandardSchemeFactory implements SchemeFactory {
      public getServer_argsStandardScheme getScheme() {
        return new getServer_argsStandardScheme();
      }
    }

    private static class getServer_argsStandardScheme extends StandardScheme<getServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServer_argsTupleSchemeFactory implements SchemeFactory {
      public getServer_argsTupleScheme getScheme() {
        return new getServer_argsTupleScheme();
      }
    }

    private static class getServer_argsTupleScheme extends TupleScheme<getServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getServer_result implements org.apache.thrift.TBase<getServer_result, getServer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServer_resultTupleSchemeFactory());
    }

    public Server success; // required
    public org.phybros.thrift.EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Server.class)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServer_result.class, metaDataMap);
    }

    public getServer_result() {
    }

    public getServer_result(
      Server success,
      org.phybros.thrift.EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServer_result(getServer_result other) {
      if (other.isSetSuccess()) {
        this.success = new Server(other.success);
      }
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
    }

    public getServer_result deepCopy() {
      return new getServer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public Server getSuccess() {
      return this.success;
    }

    public getServer_result setSuccess(Server success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public getServer_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Server)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServer_result)
        return this.equals((getServer_result)that);
      return false;
    }

    public boolean equals(getServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getServer_result typedOther = (getServer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServer_resultStandardSchemeFactory implements SchemeFactory {
      public getServer_resultStandardScheme getScheme() {
        return new getServer_resultStandardScheme();
      }
    }

    private static class getServer_resultStandardScheme extends StandardScheme<getServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Server();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServer_resultTupleSchemeFactory implements SchemeFactory {
      public getServer_resultTupleScheme getScheme() {
        return new getServer_resultTupleScheme();
      }
    }

    private static class getServer_resultTupleScheme extends TupleScheme<getServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Server();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class getServerVersion_args implements org.apache.thrift.TBase<getServerVersion_args, getServerVersion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerVersion_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServerVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServerVersion_argsTupleSchemeFactory());
    }

    public String authString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerVersion_args.class, metaDataMap);
    }

    public getServerVersion_args() {
    }

    public getServerVersion_args(
      String authString)
    {
      this();
      this.authString = authString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerVersion_args(getServerVersion_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
    }

    public getServerVersion_args deepCopy() {
      return new getServerVersion_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public getServerVersion_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServerVersion_args)
        return this.equals((getServerVersion_args)that);
      return false;
    }

    public boolean equals(getServerVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getServerVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getServerVersion_args typedOther = (getServerVersion_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServerVersion_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServerVersion_argsStandardSchemeFactory implements SchemeFactory {
      public getServerVersion_argsStandardScheme getScheme() {
        return new getServerVersion_argsStandardScheme();
      }
    }

    private static class getServerVersion_argsStandardScheme extends StandardScheme<getServerVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServerVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServerVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServerVersion_argsTupleSchemeFactory implements SchemeFactory {
      public getServerVersion_argsTupleScheme getScheme() {
        return new getServerVersion_argsTupleScheme();
      }
    }

    private static class getServerVersion_argsTupleScheme extends TupleScheme<getServerVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServerVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServerVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
      }
    }

  }

  public static class getServerVersion_result implements org.apache.thrift.TBase<getServerVersion_result, getServerVersion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServerVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServerVersion_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.phybros.thrift.EAuthException aex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerVersion_result.class, metaDataMap);
    }

    public getServerVersion_result() {
    }

    public getServerVersion_result(
      String success,
      org.phybros.thrift.EAuthException aex)
    {
      this();
      this.success = success;
      this.aex = aex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerVersion_result(getServerVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
    }

    public getServerVersion_result deepCopy() {
      return new getServerVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getServerVersion_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public getServerVersion_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AEX:
        return getAex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServerVersion_result)
        return this.equals((getServerVersion_result)that);
      return false;
    }

    public boolean equals(getServerVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getServerVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getServerVersion_result typedOther = (getServerVersion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServerVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServerVersion_resultStandardSchemeFactory implements SchemeFactory {
      public getServerVersion_resultStandardScheme getScheme() {
        return new getServerVersion_resultStandardScheme();
      }
    }

    private static class getServerVersion_resultStandardScheme extends StandardScheme<getServerVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServerVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServerVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServerVersion_resultTupleSchemeFactory implements SchemeFactory {
      public getServerVersion_resultTupleScheme getScheme() {
        return new getServerVersion_resultTupleScheme();
      }
    }

    private static class getServerVersion_resultTupleScheme extends TupleScheme<getServerVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServerVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServerVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
      }
    }

  }

  public static class kick_args implements org.apache.thrift.TBase<kick_args, kick_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("kick_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new kick_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new kick_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required
    public String message; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name"),
      MESSAGE((short)3, "message");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          case 3: // MESSAGE
            return MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(kick_args.class, metaDataMap);
    }

    public kick_args() {
    }

    public kick_args(
      String authString,
      String name,
      String message)
    {
      this();
      this.authString = authString;
      this.name = name;
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public kick_args(kick_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetMessage()) {
        this.message = other.message;
      }
    }

    public kick_args deepCopy() {
      return new kick_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
      this.message = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public kick_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public kick_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getMessage() {
      return this.message;
    }

    public kick_args setMessage(String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      case MESSAGE:
        return getMessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      case MESSAGE:
        return isSetMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof kick_args)
        return this.equals((kick_args)that);
      return false;
    }

    public boolean equals(kick_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(kick_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      kick_args typedOther = (kick_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("kick_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class kick_argsStandardSchemeFactory implements SchemeFactory {
      public kick_argsStandardScheme getScheme() {
        return new kick_argsStandardScheme();
      }
    }

    private static class kick_argsStandardScheme extends StandardScheme<kick_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, kick_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, kick_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class kick_argsTupleSchemeFactory implements SchemeFactory {
      public kick_argsTupleScheme getScheme() {
        return new kick_argsTupleScheme();
      }
    }

    private static class kick_argsTupleScheme extends TupleScheme<kick_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, kick_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetMessage()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetMessage()) {
          oprot.writeString(struct.message);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, kick_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.message = iprot.readString();
          struct.setMessageIsSet(true);
        }
      }
    }

  }

  public static class kick_result implements org.apache.thrift.TBase<kick_result, kick_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("kick_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new kick_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new kick_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.phybros.thrift.EAuthException aex; // required
    public org.phybros.thrift.EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(kick_result.class, metaDataMap);
    }

    public kick_result() {
    }

    public kick_result(
      boolean success,
      org.phybros.thrift.EAuthException aex,
      org.phybros.thrift.EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public kick_result(kick_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new org.phybros.thrift.EDataException(other.dex);
      }
    }

    public kick_result deepCopy() {
      return new kick_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public kick_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public kick_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public org.phybros.thrift.EDataException getDex() {
      return this.dex;
    }

    public kick_result setDex(org.phybros.thrift.EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((org.phybros.thrift.EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof kick_result)
        return this.equals((kick_result)that);
      return false;
    }

    public boolean equals(kick_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(kick_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      kick_result typedOther = (kick_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(typedOther.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, typedOther.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("kick_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class kick_resultStandardSchemeFactory implements SchemeFactory {
      public kick_resultStandardScheme getScheme() {
        return new kick_resultStandardScheme();
      }
    }

    private static class kick_resultStandardScheme extends StandardScheme<kick_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, kick_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new org.phybros.thrift.EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, kick_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class kick_resultTupleSchemeFactory implements SchemeFactory {
      public kick_resultTupleScheme getScheme() {
        return new kick_resultTupleScheme();
      }
    }

    private static class kick_resultTupleScheme extends TupleScheme<kick_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, kick_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, kick_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new org.phybros.thrift.EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class op_args implements org.apache.thrift.TBase<op_args, op_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("op_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NOTIFY_PLAYER_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyPlayer", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new op_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new op_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required
    public boolean notifyPlayer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name"),
      NOTIFY_PLAYER((short)3, "notifyPlayer");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          case 3: // NOTIFY_PLAYER
            return NOTIFY_PLAYER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOTIFYPLAYER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NOTIFY_PLAYER, new org.apache.thrift.meta_data.FieldMetaData("notifyPlayer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(op_args.class, metaDataMap);
    }

    public op_args() {
    }

    public op_args(
      String authString,
      String name,
      boolean notifyPlayer)
    {
      this();
      this.authString = authString;
      this.name = name;
      this.notifyPlayer = notifyPlayer;
      setNotifyPlayerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public op_args(op_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      this.notifyPlayer = other.notifyPlayer;
    }

    public op_args deepCopy() {
      return new op_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
      setNotifyPlayerIsSet(false);
      this.notifyPlayer = false;
    }

    public String getAuthString() {
      return this.authString;
    }

    public op_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public op_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public boolean isNotifyPlayer() {
      return this.notifyPlayer;
    }

    public op_args setNotifyPlayer(boolean notifyPlayer) {
      this.notifyPlayer = notifyPlayer;
      setNotifyPlayerIsSet(true);
      return this;
    }

    public void unsetNotifyPlayer() {
      __isset_bit_vector.clear(__NOTIFYPLAYER_ISSET_ID);
    }

    /** Returns true if field notifyPlayer is set (has been assigned a value) and false otherwise */
    public boolean isSetNotifyPlayer() {
      return __isset_bit_vector.get(__NOTIFYPLAYER_ISSET_ID);
    }

    public void setNotifyPlayerIsSet(boolean value) {
      __isset_bit_vector.set(__NOTIFYPLAYER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case NOTIFY_PLAYER:
        if (value == null) {
          unsetNotifyPlayer();
        } else {
          setNotifyPlayer((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      case NOTIFY_PLAYER:
        return Boolean.valueOf(isNotifyPlayer());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      case NOTIFY_PLAYER:
        return isSetNotifyPlayer();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof op_args)
        return this.equals((op_args)that);
      return false;
    }

    public boolean equals(op_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_notifyPlayer = true;
      boolean that_present_notifyPlayer = true;
      if (this_present_notifyPlayer || that_present_notifyPlayer) {
        if (!(this_present_notifyPlayer && that_present_notifyPlayer))
          return false;
        if (this.notifyPlayer != that.notifyPlayer)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(op_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      op_args typedOther = (op_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotifyPlayer()).compareTo(typedOther.isSetNotifyPlayer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotifyPlayer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyPlayer, typedOther.notifyPlayer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("op_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notifyPlayer:");
      sb.append(this.notifyPlayer);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class op_argsStandardSchemeFactory implements SchemeFactory {
      public op_argsStandardScheme getScheme() {
        return new op_argsStandardScheme();
      }
    }

    private static class op_argsStandardScheme extends StandardScheme<op_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, op_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOTIFY_PLAYER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.notifyPlayer = iprot.readBool();
                struct.setNotifyPlayerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, op_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NOTIFY_PLAYER_FIELD_DESC);
        oprot.writeBool(struct.notifyPlayer);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class op_argsTupleSchemeFactory implements SchemeFactory {
      public op_argsTupleScheme getScheme() {
        return new op_argsTupleScheme();
      }
    }

    private static class op_argsTupleScheme extends TupleScheme<op_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, op_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetNotifyPlayer()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetNotifyPlayer()) {
          oprot.writeBool(struct.notifyPlayer);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, op_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.notifyPlayer = iprot.readBool();
          struct.setNotifyPlayerIsSet(true);
        }
      }
    }

  }

  public static class op_result implements org.apache.thrift.TBase<op_result, op_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("op_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new op_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new op_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.phybros.thrift.EAuthException aex; // required
    public org.phybros.thrift.EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(op_result.class, metaDataMap);
    }

    public op_result() {
    }

    public op_result(
      boolean success,
      org.phybros.thrift.EAuthException aex,
      org.phybros.thrift.EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public op_result(op_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new org.phybros.thrift.EDataException(other.dex);
      }
    }

    public op_result deepCopy() {
      return new op_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public op_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public op_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public org.phybros.thrift.EDataException getDex() {
      return this.dex;
    }

    public op_result setDex(org.phybros.thrift.EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((org.phybros.thrift.EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof op_result)
        return this.equals((op_result)that);
      return false;
    }

    public boolean equals(op_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(op_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      op_result typedOther = (op_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(typedOther.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, typedOther.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("op_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class op_resultStandardSchemeFactory implements SchemeFactory {
      public op_resultStandardScheme getScheme() {
        return new op_resultStandardScheme();
      }
    }

    private static class op_resultStandardScheme extends StandardScheme<op_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, op_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new org.phybros.thrift.EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, op_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class op_resultTupleSchemeFactory implements SchemeFactory {
      public op_resultTupleScheme getScheme() {
        return new op_resultTupleScheme();
      }
    }

    private static class op_resultTupleScheme extends TupleScheme<op_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, op_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, op_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new org.phybros.thrift.EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class removeFromWhitelist_args implements org.apache.thrift.TBase<removeFromWhitelist_args, removeFromWhitelist_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeFromWhitelist_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeFromWhitelist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeFromWhitelist_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeFromWhitelist_args.class, metaDataMap);
    }

    public removeFromWhitelist_args() {
    }

    public removeFromWhitelist_args(
      String authString,
      String name)
    {
      this();
      this.authString = authString;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeFromWhitelist_args(removeFromWhitelist_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public removeFromWhitelist_args deepCopy() {
      return new removeFromWhitelist_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public removeFromWhitelist_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public removeFromWhitelist_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeFromWhitelist_args)
        return this.equals((removeFromWhitelist_args)that);
      return false;
    }

    public boolean equals(removeFromWhitelist_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeFromWhitelist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeFromWhitelist_args typedOther = (removeFromWhitelist_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeFromWhitelist_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeFromWhitelist_argsStandardSchemeFactory implements SchemeFactory {
      public removeFromWhitelist_argsStandardScheme getScheme() {
        return new removeFromWhitelist_argsStandardScheme();
      }
    }

    private static class removeFromWhitelist_argsStandardScheme extends StandardScheme<removeFromWhitelist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeFromWhitelist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeFromWhitelist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeFromWhitelist_argsTupleSchemeFactory implements SchemeFactory {
      public removeFromWhitelist_argsTupleScheme getScheme() {
        return new removeFromWhitelist_argsTupleScheme();
      }
    }

    private static class removeFromWhitelist_argsTupleScheme extends TupleScheme<removeFromWhitelist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeFromWhitelist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeFromWhitelist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class removeFromWhitelist_result implements org.apache.thrift.TBase<removeFromWhitelist_result, removeFromWhitelist_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeFromWhitelist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeFromWhitelist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeFromWhitelist_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.phybros.thrift.EAuthException aex; // required
    public org.phybros.thrift.EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeFromWhitelist_result.class, metaDataMap);
    }

    public removeFromWhitelist_result() {
    }

    public removeFromWhitelist_result(
      boolean success,
      org.phybros.thrift.EAuthException aex,
      org.phybros.thrift.EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeFromWhitelist_result(removeFromWhitelist_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new org.phybros.thrift.EDataException(other.dex);
      }
    }

    public removeFromWhitelist_result deepCopy() {
      return new removeFromWhitelist_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removeFromWhitelist_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public removeFromWhitelist_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public org.phybros.thrift.EDataException getDex() {
      return this.dex;
    }

    public removeFromWhitelist_result setDex(org.phybros.thrift.EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((org.phybros.thrift.EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeFromWhitelist_result)
        return this.equals((removeFromWhitelist_result)that);
      return false;
    }

    public boolean equals(removeFromWhitelist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeFromWhitelist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeFromWhitelist_result typedOther = (removeFromWhitelist_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(typedOther.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, typedOther.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeFromWhitelist_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeFromWhitelist_resultStandardSchemeFactory implements SchemeFactory {
      public removeFromWhitelist_resultStandardScheme getScheme() {
        return new removeFromWhitelist_resultStandardScheme();
      }
    }

    private static class removeFromWhitelist_resultStandardScheme extends StandardScheme<removeFromWhitelist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeFromWhitelist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new org.phybros.thrift.EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeFromWhitelist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeFromWhitelist_resultTupleSchemeFactory implements SchemeFactory {
      public removeFromWhitelist_resultTupleScheme getScheme() {
        return new removeFromWhitelist_resultTupleScheme();
      }
    }

    private static class removeFromWhitelist_resultTupleScheme extends TupleScheme<removeFromWhitelist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeFromWhitelist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeFromWhitelist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new org.phybros.thrift.EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class setGameMode_args implements org.apache.thrift.TBase<setGameMode_args, setGameMode_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setGameMode_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setGameMode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setGameMode_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required
    /**
     * 
     * @see GameMode
     */
    public GameMode mode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name"),
      /**
       * 
       * @see GameMode
       */
      MODE((short)3, "mode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          case 3: // MODE
            return MODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GameMode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setGameMode_args.class, metaDataMap);
    }

    public setGameMode_args() {
    }

    public setGameMode_args(
      String authString,
      String name,
      GameMode mode)
    {
      this();
      this.authString = authString;
      this.name = name;
      this.mode = mode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setGameMode_args(setGameMode_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetMode()) {
        this.mode = other.mode;
      }
    }

    public setGameMode_args deepCopy() {
      return new setGameMode_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
      this.mode = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public setGameMode_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public setGameMode_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    /**
     * 
     * @see GameMode
     */
    public GameMode getMode() {
      return this.mode;
    }

    /**
     * 
     * @see GameMode
     */
    public setGameMode_args setMode(GameMode mode) {
      this.mode = mode;
      return this;
    }

    public void unsetMode() {
      this.mode = null;
    }

    /** Returns true if field mode is set (has been assigned a value) and false otherwise */
    public boolean isSetMode() {
      return this.mode != null;
    }

    public void setModeIsSet(boolean value) {
      if (!value) {
        this.mode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          setMode((GameMode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      case MODE:
        return getMode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      case MODE:
        return isSetMode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setGameMode_args)
        return this.equals((setGameMode_args)that);
      return false;
    }

    public boolean equals(setGameMode_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_mode = true && this.isSetMode();
      boolean that_present_mode = true && that.isSetMode();
      if (this_present_mode || that_present_mode) {
        if (!(this_present_mode && that_present_mode))
          return false;
        if (!this.mode.equals(that.mode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setGameMode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setGameMode_args typedOther = (setGameMode_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setGameMode_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mode:");
      if (this.mode == null) {
        sb.append("null");
      } else {
        sb.append(this.mode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setGameMode_argsStandardSchemeFactory implements SchemeFactory {
      public setGameMode_argsStandardScheme getScheme() {
        return new setGameMode_argsStandardScheme();
      }
    }

    private static class setGameMode_argsStandardScheme extends StandardScheme<setGameMode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setGameMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mode = GameMode.findByValue(iprot.readI32());
                struct.setModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setGameMode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.mode != null) {
          oprot.writeFieldBegin(MODE_FIELD_DESC);
          oprot.writeI32(struct.mode.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setGameMode_argsTupleSchemeFactory implements SchemeFactory {
      public setGameMode_argsTupleScheme getScheme() {
        return new setGameMode_argsTupleScheme();
      }
    }

    private static class setGameMode_argsTupleScheme extends TupleScheme<setGameMode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setGameMode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetMode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetMode()) {
          oprot.writeI32(struct.mode.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setGameMode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mode = GameMode.findByValue(iprot.readI32());
          struct.setModeIsSet(true);
        }
      }
    }

  }

  public static class setGameMode_result implements org.apache.thrift.TBase<setGameMode_result, setGameMode_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setGameMode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setGameMode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setGameMode_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.phybros.thrift.EAuthException aex; // required
    public org.phybros.thrift.EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setGameMode_result.class, metaDataMap);
    }

    public setGameMode_result() {
    }

    public setGameMode_result(
      boolean success,
      org.phybros.thrift.EAuthException aex,
      org.phybros.thrift.EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setGameMode_result(setGameMode_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new org.phybros.thrift.EDataException(other.dex);
      }
    }

    public setGameMode_result deepCopy() {
      return new setGameMode_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setGameMode_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public setGameMode_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public org.phybros.thrift.EDataException getDex() {
      return this.dex;
    }

    public setGameMode_result setDex(org.phybros.thrift.EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((org.phybros.thrift.EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setGameMode_result)
        return this.equals((setGameMode_result)that);
      return false;
    }

    public boolean equals(setGameMode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setGameMode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setGameMode_result typedOther = (setGameMode_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(typedOther.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, typedOther.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setGameMode_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setGameMode_resultStandardSchemeFactory implements SchemeFactory {
      public setGameMode_resultStandardScheme getScheme() {
        return new setGameMode_resultStandardScheme();
      }
    }

    private static class setGameMode_resultStandardScheme extends StandardScheme<setGameMode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setGameMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new org.phybros.thrift.EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setGameMode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setGameMode_resultTupleSchemeFactory implements SchemeFactory {
      public setGameMode_resultTupleScheme getScheme() {
        return new setGameMode_resultTupleScheme();
      }
    }

    private static class setGameMode_resultTupleScheme extends TupleScheme<setGameMode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setGameMode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setGameMode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new org.phybros.thrift.EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class unBan_args implements org.apache.thrift.TBase<unBan_args, unBan_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unBan_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unBan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unBan_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unBan_args.class, metaDataMap);
    }

    public unBan_args() {
    }

    public unBan_args(
      String authString,
      String name)
    {
      this();
      this.authString = authString;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unBan_args(unBan_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public unBan_args deepCopy() {
      return new unBan_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.name = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public unBan_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public unBan_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unBan_args)
        return this.equals((unBan_args)that);
      return false;
    }

    public boolean equals(unBan_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(unBan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unBan_args typedOther = (unBan_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unBan_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unBan_argsStandardSchemeFactory implements SchemeFactory {
      public unBan_argsStandardScheme getScheme() {
        return new unBan_argsStandardScheme();
      }
    }

    private static class unBan_argsStandardScheme extends StandardScheme<unBan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unBan_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unBan_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unBan_argsTupleSchemeFactory implements SchemeFactory {
      public unBan_argsTupleScheme getScheme() {
        return new unBan_argsTupleScheme();
      }
    }

    private static class unBan_argsTupleScheme extends TupleScheme<unBan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unBan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unBan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class unBan_result implements org.apache.thrift.TBase<unBan_result, unBan_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unBan_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unBan_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unBan_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.phybros.thrift.EAuthException aex; // required
    public org.phybros.thrift.EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unBan_result.class, metaDataMap);
    }

    public unBan_result() {
    }

    public unBan_result(
      boolean success,
      org.phybros.thrift.EAuthException aex,
      org.phybros.thrift.EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unBan_result(unBan_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new org.phybros.thrift.EDataException(other.dex);
      }
    }

    public unBan_result deepCopy() {
      return new unBan_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public unBan_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public unBan_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public org.phybros.thrift.EDataException getDex() {
      return this.dex;
    }

    public unBan_result setDex(org.phybros.thrift.EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((org.phybros.thrift.EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unBan_result)
        return this.equals((unBan_result)that);
      return false;
    }

    public boolean equals(unBan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(unBan_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unBan_result typedOther = (unBan_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(typedOther.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, typedOther.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unBan_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unBan_resultStandardSchemeFactory implements SchemeFactory {
      public unBan_resultStandardScheme getScheme() {
        return new unBan_resultStandardScheme();
      }
    }

    private static class unBan_resultStandardScheme extends StandardScheme<unBan_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unBan_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new org.phybros.thrift.EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unBan_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unBan_resultTupleSchemeFactory implements SchemeFactory {
      public unBan_resultTupleScheme getScheme() {
        return new unBan_resultTupleScheme();
      }
    }

    private static class unBan_resultTupleScheme extends TupleScheme<unBan_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unBan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unBan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new org.phybros.thrift.EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

  public static class unBanIp_args implements org.apache.thrift.TBase<unBanIp_args, unBanIp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unBanIp_args");

    private static final org.apache.thrift.protocol.TField AUTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("authString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unBanIp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unBanIp_argsTupleSchemeFactory());
    }

    public String authString; // required
    public String ip; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_STRING((short)1, "authString"),
      IP((short)2, "ip");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_STRING
            return AUTH_STRING;
          case 2: // IP
            return IP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("authString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unBanIp_args.class, metaDataMap);
    }

    public unBanIp_args() {
    }

    public unBanIp_args(
      String authString,
      String ip)
    {
      this();
      this.authString = authString;
      this.ip = ip;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unBanIp_args(unBanIp_args other) {
      if (other.isSetAuthString()) {
        this.authString = other.authString;
      }
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
    }

    public unBanIp_args deepCopy() {
      return new unBanIp_args(this);
    }

    @Override
    public void clear() {
      this.authString = null;
      this.ip = null;
    }

    public String getAuthString() {
      return this.authString;
    }

    public unBanIp_args setAuthString(String authString) {
      this.authString = authString;
      return this;
    }

    public void unsetAuthString() {
      this.authString = null;
    }

    /** Returns true if field authString is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthString() {
      return this.authString != null;
    }

    public void setAuthStringIsSet(boolean value) {
      if (!value) {
        this.authString = null;
      }
    }

    public String getIp() {
      return this.ip;
    }

    public unBanIp_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_STRING:
        if (value == null) {
          unsetAuthString();
        } else {
          setAuthString((String)value);
        }
        break;

      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_STRING:
        return getAuthString();

      case IP:
        return getIp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_STRING:
        return isSetAuthString();
      case IP:
        return isSetIp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unBanIp_args)
        return this.equals((unBanIp_args)that);
      return false;
    }

    public boolean equals(unBanIp_args that) {
      if (that == null)
        return false;

      boolean this_present_authString = true && this.isSetAuthString();
      boolean that_present_authString = true && that.isSetAuthString();
      if (this_present_authString || that_present_authString) {
        if (!(this_present_authString && that_present_authString))
          return false;
        if (!this.authString.equals(that.authString))
          return false;
      }

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(unBanIp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unBanIp_args typedOther = (unBanIp_args)other;

      lastComparison = Boolean.valueOf(isSetAuthString()).compareTo(typedOther.isSetAuthString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authString, typedOther.authString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unBanIp_args(");
      boolean first = true;

      sb.append("authString:");
      if (this.authString == null) {
        sb.append("null");
      } else {
        sb.append(this.authString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unBanIp_argsStandardSchemeFactory implements SchemeFactory {
      public unBanIp_argsStandardScheme getScheme() {
        return new unBanIp_argsStandardScheme();
      }
    }

    private static class unBanIp_argsStandardScheme extends StandardScheme<unBanIp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unBanIp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authString = iprot.readString();
                struct.setAuthStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unBanIp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authString != null) {
          oprot.writeFieldBegin(AUTH_STRING_FIELD_DESC);
          oprot.writeString(struct.authString);
          oprot.writeFieldEnd();
        }
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unBanIp_argsTupleSchemeFactory implements SchemeFactory {
      public unBanIp_argsTupleScheme getScheme() {
        return new unBanIp_argsTupleScheme();
      }
    }

    private static class unBanIp_argsTupleScheme extends TupleScheme<unBanIp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unBanIp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthString()) {
          optionals.set(0);
        }
        if (struct.isSetIp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthString()) {
          oprot.writeString(struct.authString);
        }
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unBanIp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authString = iprot.readString();
          struct.setAuthStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
      }
    }

  }

  public static class unBanIp_result implements org.apache.thrift.TBase<unBanIp_result, unBanIp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unBanIp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AEX_FIELD_DESC = new org.apache.thrift.protocol.TField("aex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unBanIp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unBanIp_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.phybros.thrift.EAuthException aex; // required
    public org.phybros.thrift.EDataException dex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AEX((short)1, "aex"),
      DEX((short)2, "dex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AEX
            return AEX;
          case 2: // DEX
            return DEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AEX, new org.apache.thrift.meta_data.FieldMetaData("aex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DEX, new org.apache.thrift.meta_data.FieldMetaData("dex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unBanIp_result.class, metaDataMap);
    }

    public unBanIp_result() {
    }

    public unBanIp_result(
      boolean success,
      org.phybros.thrift.EAuthException aex,
      org.phybros.thrift.EDataException dex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aex = aex;
      this.dex = dex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unBanIp_result(unBanIp_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetAex()) {
        this.aex = new org.phybros.thrift.EAuthException(other.aex);
      }
      if (other.isSetDex()) {
        this.dex = new org.phybros.thrift.EDataException(other.dex);
      }
    }

    public unBanIp_result deepCopy() {
      return new unBanIp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aex = null;
      this.dex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public unBanIp_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public org.phybros.thrift.EAuthException getAex() {
      return this.aex;
    }

    public unBanIp_result setAex(org.phybros.thrift.EAuthException aex) {
      this.aex = aex;
      return this;
    }

    public void unsetAex() {
      this.aex = null;
    }

    /** Returns true if field aex is set (has been assigned a value) and false otherwise */
    public boolean isSetAex() {
      return this.aex != null;
    }

    public void setAexIsSet(boolean value) {
      if (!value) {
        this.aex = null;
      }
    }

    public org.phybros.thrift.EDataException getDex() {
      return this.dex;
    }

    public unBanIp_result setDex(org.phybros.thrift.EDataException dex) {
      this.dex = dex;
      return this;
    }

    public void unsetDex() {
      this.dex = null;
    }

    /** Returns true if field dex is set (has been assigned a value) and false otherwise */
    public boolean isSetDex() {
      return this.dex != null;
    }

    public void setDexIsSet(boolean value) {
      if (!value) {
        this.dex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AEX:
        if (value == null) {
          unsetAex();
        } else {
          setAex((org.phybros.thrift.EAuthException)value);
        }
        break;

      case DEX:
        if (value == null) {
          unsetDex();
        } else {
          setDex((org.phybros.thrift.EDataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case AEX:
        return getAex();

      case DEX:
        return getDex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AEX:
        return isSetAex();
      case DEX:
        return isSetDex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unBanIp_result)
        return this.equals((unBanIp_result)that);
      return false;
    }

    public boolean equals(unBanIp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aex = true && this.isSetAex();
      boolean that_present_aex = true && that.isSetAex();
      if (this_present_aex || that_present_aex) {
        if (!(this_present_aex && that_present_aex))
          return false;
        if (!this.aex.equals(that.aex))
          return false;
      }

      boolean this_present_dex = true && this.isSetDex();
      boolean that_present_dex = true && that.isSetDex();
      if (this_present_dex || that_present_dex) {
        if (!(this_present_dex && that_present_dex))
          return false;
        if (!this.dex.equals(that.dex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(unBanIp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unBanIp_result typedOther = (unBanIp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAex()).compareTo(typedOther.isSetAex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aex, typedOther.aex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDex()).compareTo(typedOther.isSetDex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dex, typedOther.dex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unBanIp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aex:");
      if (this.aex == null) {
        sb.append("null");
      } else {
        sb.append(this.aex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dex:");
      if (this.dex == null) {
        sb.append("null");
      } else {
        sb.append(this.dex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unBanIp_resultStandardSchemeFactory implements SchemeFactory {
      public unBanIp_resultStandardScheme getScheme() {
        return new unBanIp_resultStandardScheme();
      }
    }

    private static class unBanIp_resultStandardScheme extends StandardScheme<unBanIp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unBanIp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aex = new org.phybros.thrift.EAuthException();
                struct.aex.read(iprot);
                struct.setAexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dex = new org.phybros.thrift.EDataException();
                struct.dex.read(iprot);
                struct.setDexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unBanIp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.aex != null) {
          oprot.writeFieldBegin(AEX_FIELD_DESC);
          struct.aex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dex != null) {
          oprot.writeFieldBegin(DEX_FIELD_DESC);
          struct.dex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unBanIp_resultTupleSchemeFactory implements SchemeFactory {
      public unBanIp_resultTupleScheme getScheme() {
        return new unBanIp_resultTupleScheme();
      }
    }

    private static class unBanIp_resultTupleScheme extends TupleScheme<unBanIp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unBanIp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAex()) {
          optionals.set(1);
        }
        if (struct.isSetDex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAex()) {
          struct.aex.write(oprot);
        }
        if (struct.isSetDex()) {
          struct.dex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unBanIp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aex = new org.phybros.thrift.EAuthException();
          struct.aex.read(iprot);
          struct.setAexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dex = new org.phybros.thrift.EDataException();
          struct.dex.read(iprot);
          struct.setDexIsSet(true);
        }
      }
    }

  }

}
